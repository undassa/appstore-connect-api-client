/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// AppPriceTiersApiService AppPriceTiersApi service
type AppPriceTiersApiService service

type ApiAppPriceTiersGetCollectionRequest struct {
	ctx _context.Context
	ApiService *AppPriceTiersApiService
	filterId *[]string
	fieldsAppPriceTiers *[]string
	limit *int32
	include *[]string
	fieldsAppPricePoints *[]string
	limitPricePoints *int32
}

func (r ApiAppPriceTiersGetCollectionRequest) FilterId(filterId []string) ApiAppPriceTiersGetCollectionRequest {
	r.filterId = &filterId
	return r
}
func (r ApiAppPriceTiersGetCollectionRequest) FieldsAppPriceTiers(fieldsAppPriceTiers []string) ApiAppPriceTiersGetCollectionRequest {
	r.fieldsAppPriceTiers = &fieldsAppPriceTiers
	return r
}
func (r ApiAppPriceTiersGetCollectionRequest) Limit(limit int32) ApiAppPriceTiersGetCollectionRequest {
	r.limit = &limit
	return r
}
func (r ApiAppPriceTiersGetCollectionRequest) Include(include []string) ApiAppPriceTiersGetCollectionRequest {
	r.include = &include
	return r
}
func (r ApiAppPriceTiersGetCollectionRequest) FieldsAppPricePoints(fieldsAppPricePoints []string) ApiAppPriceTiersGetCollectionRequest {
	r.fieldsAppPricePoints = &fieldsAppPricePoints
	return r
}
func (r ApiAppPriceTiersGetCollectionRequest) LimitPricePoints(limitPricePoints int32) ApiAppPriceTiersGetCollectionRequest {
	r.limitPricePoints = &limitPricePoints
	return r
}

func (r ApiAppPriceTiersGetCollectionRequest) Execute() (AppPriceTiersResponse, *_nethttp.Response, error) {
	return r.ApiService.AppPriceTiersGetCollectionExecute(r)
}

/*
 * AppPriceTiersGetCollection Method for AppPriceTiersGetCollection
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiAppPriceTiersGetCollectionRequest
 */
func (a *AppPriceTiersApiService) AppPriceTiersGetCollection(ctx _context.Context) ApiAppPriceTiersGetCollectionRequest {
	return ApiAppPriceTiersGetCollectionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return AppPriceTiersResponse
 */
func (a *AppPriceTiersApiService) AppPriceTiersGetCollectionExecute(r ApiAppPriceTiersGetCollectionRequest) (AppPriceTiersResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AppPriceTiersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppPriceTiersApiService.AppPriceTiersGetCollection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appPriceTiers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.filterId != nil {
		localVarQueryParams.Add("filter[id]", parameterToString(*r.filterId, "csv"))
	}
	if r.fieldsAppPriceTiers != nil {
		localVarQueryParams.Add("fields[appPriceTiers]", parameterToString(*r.fieldsAppPriceTiers, "csv"))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsAppPricePoints != nil {
		localVarQueryParams.Add("fields[appPricePoints]", parameterToString(*r.fieldsAppPricePoints, "csv"))
	}
	if r.limitPricePoints != nil {
		localVarQueryParams.Add("limit[pricePoints]", parameterToString(*r.limitPricePoints, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppPriceTiersGetInstanceRequest struct {
	ctx _context.Context
	ApiService *AppPriceTiersApiService
	id string
	fieldsAppPriceTiers *[]string
	include *[]string
	fieldsAppPricePoints *[]string
	limitPricePoints *int32
}

func (r ApiAppPriceTiersGetInstanceRequest) FieldsAppPriceTiers(fieldsAppPriceTiers []string) ApiAppPriceTiersGetInstanceRequest {
	r.fieldsAppPriceTiers = &fieldsAppPriceTiers
	return r
}
func (r ApiAppPriceTiersGetInstanceRequest) Include(include []string) ApiAppPriceTiersGetInstanceRequest {
	r.include = &include
	return r
}
func (r ApiAppPriceTiersGetInstanceRequest) FieldsAppPricePoints(fieldsAppPricePoints []string) ApiAppPriceTiersGetInstanceRequest {
	r.fieldsAppPricePoints = &fieldsAppPricePoints
	return r
}
func (r ApiAppPriceTiersGetInstanceRequest) LimitPricePoints(limitPricePoints int32) ApiAppPriceTiersGetInstanceRequest {
	r.limitPricePoints = &limitPricePoints
	return r
}

func (r ApiAppPriceTiersGetInstanceRequest) Execute() (AppPriceTierResponse, *_nethttp.Response, error) {
	return r.ApiService.AppPriceTiersGetInstanceExecute(r)
}

/*
 * AppPriceTiersGetInstance Method for AppPriceTiersGetInstance
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiAppPriceTiersGetInstanceRequest
 */
func (a *AppPriceTiersApiService) AppPriceTiersGetInstance(ctx _context.Context, id string) ApiAppPriceTiersGetInstanceRequest {
	return ApiAppPriceTiersGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return AppPriceTierResponse
 */
func (a *AppPriceTiersApiService) AppPriceTiersGetInstanceExecute(r ApiAppPriceTiersGetInstanceRequest) (AppPriceTierResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AppPriceTierResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppPriceTiersApiService.AppPriceTiersGetInstance")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appPriceTiers/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fieldsAppPriceTiers != nil {
		localVarQueryParams.Add("fields[appPriceTiers]", parameterToString(*r.fieldsAppPriceTiers, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsAppPricePoints != nil {
		localVarQueryParams.Add("fields[appPricePoints]", parameterToString(*r.fieldsAppPricePoints, "csv"))
	}
	if r.limitPricePoints != nil {
		localVarQueryParams.Add("limit[pricePoints]", parameterToString(*r.limitPricePoints, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppPriceTiersPricePointsGetToManyRelatedRequest struct {
	ctx _context.Context
	ApiService *AppPriceTiersApiService
	id string
	fieldsAppPricePoints *[]string
	limit *int32
}

func (r ApiAppPriceTiersPricePointsGetToManyRelatedRequest) FieldsAppPricePoints(fieldsAppPricePoints []string) ApiAppPriceTiersPricePointsGetToManyRelatedRequest {
	r.fieldsAppPricePoints = &fieldsAppPricePoints
	return r
}
func (r ApiAppPriceTiersPricePointsGetToManyRelatedRequest) Limit(limit int32) ApiAppPriceTiersPricePointsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

func (r ApiAppPriceTiersPricePointsGetToManyRelatedRequest) Execute() (AppPricePointsResponse, *_nethttp.Response, error) {
	return r.ApiService.AppPriceTiersPricePointsGetToManyRelatedExecute(r)
}

/*
 * AppPriceTiersPricePointsGetToManyRelated Method for AppPriceTiersPricePointsGetToManyRelated
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiAppPriceTiersPricePointsGetToManyRelatedRequest
 */
func (a *AppPriceTiersApiService) AppPriceTiersPricePointsGetToManyRelated(ctx _context.Context, id string) ApiAppPriceTiersPricePointsGetToManyRelatedRequest {
	return ApiAppPriceTiersPricePointsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return AppPricePointsResponse
 */
func (a *AppPriceTiersApiService) AppPriceTiersPricePointsGetToManyRelatedExecute(r ApiAppPriceTiersPricePointsGetToManyRelatedRequest) (AppPricePointsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AppPricePointsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppPriceTiersApiService.AppPriceTiersPricePointsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appPriceTiers/{id}/pricePoints"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fieldsAppPricePoints != nil {
		localVarQueryParams.Add("fields[appPricePoints]", parameterToString(*r.fieldsAppPricePoints, "csv"))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
