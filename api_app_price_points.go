/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// AppPricePointsApiService AppPricePointsApi service
type AppPricePointsApiService service

type ApiAppPricePointsGetCollectionRequest struct {
	ctx _context.Context
	ApiService *AppPricePointsApiService
	filterPriceTier *[]string
	filterTerritory *[]string
	fieldsAppPricePoints *[]string
	limit *int32
	include *[]string
	fieldsTerritories *[]string
}

func (r ApiAppPricePointsGetCollectionRequest) FilterPriceTier(filterPriceTier []string) ApiAppPricePointsGetCollectionRequest {
	r.filterPriceTier = &filterPriceTier
	return r
}
func (r ApiAppPricePointsGetCollectionRequest) FilterTerritory(filterTerritory []string) ApiAppPricePointsGetCollectionRequest {
	r.filterTerritory = &filterTerritory
	return r
}
func (r ApiAppPricePointsGetCollectionRequest) FieldsAppPricePoints(fieldsAppPricePoints []string) ApiAppPricePointsGetCollectionRequest {
	r.fieldsAppPricePoints = &fieldsAppPricePoints
	return r
}
func (r ApiAppPricePointsGetCollectionRequest) Limit(limit int32) ApiAppPricePointsGetCollectionRequest {
	r.limit = &limit
	return r
}
func (r ApiAppPricePointsGetCollectionRequest) Include(include []string) ApiAppPricePointsGetCollectionRequest {
	r.include = &include
	return r
}
func (r ApiAppPricePointsGetCollectionRequest) FieldsTerritories(fieldsTerritories []string) ApiAppPricePointsGetCollectionRequest {
	r.fieldsTerritories = &fieldsTerritories
	return r
}

func (r ApiAppPricePointsGetCollectionRequest) Execute() (AppPricePointsResponse, *_nethttp.Response, error) {
	return r.ApiService.AppPricePointsGetCollectionExecute(r)
}

/*
 * AppPricePointsGetCollection Method for AppPricePointsGetCollection
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiAppPricePointsGetCollectionRequest
 */
func (a *AppPricePointsApiService) AppPricePointsGetCollection(ctx _context.Context) ApiAppPricePointsGetCollectionRequest {
	return ApiAppPricePointsGetCollectionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return AppPricePointsResponse
 */
func (a *AppPricePointsApiService) AppPricePointsGetCollectionExecute(r ApiAppPricePointsGetCollectionRequest) (AppPricePointsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AppPricePointsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppPricePointsApiService.AppPricePointsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appPricePoints"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.filterPriceTier != nil {
		localVarQueryParams.Add("filter[priceTier]", parameterToString(*r.filterPriceTier, "csv"))
	}
	if r.filterTerritory != nil {
		localVarQueryParams.Add("filter[territory]", parameterToString(*r.filterTerritory, "csv"))
	}
	if r.fieldsAppPricePoints != nil {
		localVarQueryParams.Add("fields[appPricePoints]", parameterToString(*r.fieldsAppPricePoints, "csv"))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsTerritories != nil {
		localVarQueryParams.Add("fields[territories]", parameterToString(*r.fieldsTerritories, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppPricePointsGetInstanceRequest struct {
	ctx _context.Context
	ApiService *AppPricePointsApiService
	id string
	fieldsAppPricePoints *[]string
	include *[]string
	fieldsTerritories *[]string
}

func (r ApiAppPricePointsGetInstanceRequest) FieldsAppPricePoints(fieldsAppPricePoints []string) ApiAppPricePointsGetInstanceRequest {
	r.fieldsAppPricePoints = &fieldsAppPricePoints
	return r
}
func (r ApiAppPricePointsGetInstanceRequest) Include(include []string) ApiAppPricePointsGetInstanceRequest {
	r.include = &include
	return r
}
func (r ApiAppPricePointsGetInstanceRequest) FieldsTerritories(fieldsTerritories []string) ApiAppPricePointsGetInstanceRequest {
	r.fieldsTerritories = &fieldsTerritories
	return r
}

func (r ApiAppPricePointsGetInstanceRequest) Execute() (AppPricePointResponse, *_nethttp.Response, error) {
	return r.ApiService.AppPricePointsGetInstanceExecute(r)
}

/*
 * AppPricePointsGetInstance Method for AppPricePointsGetInstance
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiAppPricePointsGetInstanceRequest
 */
func (a *AppPricePointsApiService) AppPricePointsGetInstance(ctx _context.Context, id string) ApiAppPricePointsGetInstanceRequest {
	return ApiAppPricePointsGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return AppPricePointResponse
 */
func (a *AppPricePointsApiService) AppPricePointsGetInstanceExecute(r ApiAppPricePointsGetInstanceRequest) (AppPricePointResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AppPricePointResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppPricePointsApiService.AppPricePointsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appPricePoints/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fieldsAppPricePoints != nil {
		localVarQueryParams.Add("fields[appPricePoints]", parameterToString(*r.fieldsAppPricePoints, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsTerritories != nil {
		localVarQueryParams.Add("fields[territories]", parameterToString(*r.fieldsTerritories, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppPricePointsTerritoryGetToOneRelatedRequest struct {
	ctx _context.Context
	ApiService *AppPricePointsApiService
	id string
	fieldsTerritories *[]string
}

func (r ApiAppPricePointsTerritoryGetToOneRelatedRequest) FieldsTerritories(fieldsTerritories []string) ApiAppPricePointsTerritoryGetToOneRelatedRequest {
	r.fieldsTerritories = &fieldsTerritories
	return r
}

func (r ApiAppPricePointsTerritoryGetToOneRelatedRequest) Execute() (TerritoryResponse, *_nethttp.Response, error) {
	return r.ApiService.AppPricePointsTerritoryGetToOneRelatedExecute(r)
}

/*
 * AppPricePointsTerritoryGetToOneRelated Method for AppPricePointsTerritoryGetToOneRelated
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiAppPricePointsTerritoryGetToOneRelatedRequest
 */
func (a *AppPricePointsApiService) AppPricePointsTerritoryGetToOneRelated(ctx _context.Context, id string) ApiAppPricePointsTerritoryGetToOneRelatedRequest {
	return ApiAppPricePointsTerritoryGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return TerritoryResponse
 */
func (a *AppPricePointsApiService) AppPricePointsTerritoryGetToOneRelatedExecute(r ApiAppPricePointsTerritoryGetToOneRelatedRequest) (TerritoryResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TerritoryResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppPricePointsApiService.AppPricePointsTerritoryGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appPricePoints/{id}/territory"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fieldsTerritories != nil {
		localVarQueryParams.Add("fields[territories]", parameterToString(*r.fieldsTerritories, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
