/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// BuildsApiService BuildsApi service
type BuildsApiService service

type ApiBuildsAppEncryptionDeclarationGetToOneRelatedRequest struct {
	ctx _context.Context
	ApiService *BuildsApiService
	id string
	fieldsAppEncryptionDeclarations *[]string
}

func (r ApiBuildsAppEncryptionDeclarationGetToOneRelatedRequest) FieldsAppEncryptionDeclarations(fieldsAppEncryptionDeclarations []string) ApiBuildsAppEncryptionDeclarationGetToOneRelatedRequest {
	r.fieldsAppEncryptionDeclarations = &fieldsAppEncryptionDeclarations
	return r
}

func (r ApiBuildsAppEncryptionDeclarationGetToOneRelatedRequest) Execute() (AppEncryptionDeclarationResponse, *_nethttp.Response, error) {
	return r.ApiService.BuildsAppEncryptionDeclarationGetToOneRelatedExecute(r)
}

/*
 * BuildsAppEncryptionDeclarationGetToOneRelated Method for BuildsAppEncryptionDeclarationGetToOneRelated
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiBuildsAppEncryptionDeclarationGetToOneRelatedRequest
 */
func (a *BuildsApiService) BuildsAppEncryptionDeclarationGetToOneRelated(ctx _context.Context, id string) ApiBuildsAppEncryptionDeclarationGetToOneRelatedRequest {
	return ApiBuildsAppEncryptionDeclarationGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return AppEncryptionDeclarationResponse
 */
func (a *BuildsApiService) BuildsAppEncryptionDeclarationGetToOneRelatedExecute(r ApiBuildsAppEncryptionDeclarationGetToOneRelatedRequest) (AppEncryptionDeclarationResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AppEncryptionDeclarationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsAppEncryptionDeclarationGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/appEncryptionDeclaration"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fieldsAppEncryptionDeclarations != nil {
		localVarQueryParams.Add("fields[appEncryptionDeclarations]", parameterToString(*r.fieldsAppEncryptionDeclarations, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBuildsAppEncryptionDeclarationGetToOneRelationshipRequest struct {
	ctx _context.Context
	ApiService *BuildsApiService
	id string
}


func (r ApiBuildsAppEncryptionDeclarationGetToOneRelationshipRequest) Execute() (BuildAppEncryptionDeclarationLinkageResponse, *_nethttp.Response, error) {
	return r.ApiService.BuildsAppEncryptionDeclarationGetToOneRelationshipExecute(r)
}

/*
 * BuildsAppEncryptionDeclarationGetToOneRelationship Method for BuildsAppEncryptionDeclarationGetToOneRelationship
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiBuildsAppEncryptionDeclarationGetToOneRelationshipRequest
 */
func (a *BuildsApiService) BuildsAppEncryptionDeclarationGetToOneRelationship(ctx _context.Context, id string) ApiBuildsAppEncryptionDeclarationGetToOneRelationshipRequest {
	return ApiBuildsAppEncryptionDeclarationGetToOneRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return BuildAppEncryptionDeclarationLinkageResponse
 */
func (a *BuildsApiService) BuildsAppEncryptionDeclarationGetToOneRelationshipExecute(r ApiBuildsAppEncryptionDeclarationGetToOneRelationshipRequest) (BuildAppEncryptionDeclarationLinkageResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BuildAppEncryptionDeclarationLinkageResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsAppEncryptionDeclarationGetToOneRelationship")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/relationships/appEncryptionDeclaration"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBuildsAppEncryptionDeclarationUpdateToOneRelationshipRequest struct {
	ctx _context.Context
	ApiService *BuildsApiService
	id string
	buildAppEncryptionDeclarationLinkageRequest *BuildAppEncryptionDeclarationLinkageRequest
}

func (r ApiBuildsAppEncryptionDeclarationUpdateToOneRelationshipRequest) BuildAppEncryptionDeclarationLinkageRequest(buildAppEncryptionDeclarationLinkageRequest BuildAppEncryptionDeclarationLinkageRequest) ApiBuildsAppEncryptionDeclarationUpdateToOneRelationshipRequest {
	r.buildAppEncryptionDeclarationLinkageRequest = &buildAppEncryptionDeclarationLinkageRequest
	return r
}

func (r ApiBuildsAppEncryptionDeclarationUpdateToOneRelationshipRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.BuildsAppEncryptionDeclarationUpdateToOneRelationshipExecute(r)
}

/*
 * BuildsAppEncryptionDeclarationUpdateToOneRelationship Method for BuildsAppEncryptionDeclarationUpdateToOneRelationship
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiBuildsAppEncryptionDeclarationUpdateToOneRelationshipRequest
 */
func (a *BuildsApiService) BuildsAppEncryptionDeclarationUpdateToOneRelationship(ctx _context.Context, id string) ApiBuildsAppEncryptionDeclarationUpdateToOneRelationshipRequest {
	return ApiBuildsAppEncryptionDeclarationUpdateToOneRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *BuildsApiService) BuildsAppEncryptionDeclarationUpdateToOneRelationshipExecute(r ApiBuildsAppEncryptionDeclarationUpdateToOneRelationshipRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsAppEncryptionDeclarationUpdateToOneRelationship")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/relationships/appEncryptionDeclaration"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.buildAppEncryptionDeclarationLinkageRequest == nil {
		return nil, reportError("buildAppEncryptionDeclarationLinkageRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.buildAppEncryptionDeclarationLinkageRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiBuildsAppGetToOneRelatedRequest struct {
	ctx _context.Context
	ApiService *BuildsApiService
	id string
	fieldsApps *[]string
}

func (r ApiBuildsAppGetToOneRelatedRequest) FieldsApps(fieldsApps []string) ApiBuildsAppGetToOneRelatedRequest {
	r.fieldsApps = &fieldsApps
	return r
}

func (r ApiBuildsAppGetToOneRelatedRequest) Execute() (AppResponse, *_nethttp.Response, error) {
	return r.ApiService.BuildsAppGetToOneRelatedExecute(r)
}

/*
 * BuildsAppGetToOneRelated Method for BuildsAppGetToOneRelated
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiBuildsAppGetToOneRelatedRequest
 */
func (a *BuildsApiService) BuildsAppGetToOneRelated(ctx _context.Context, id string) ApiBuildsAppGetToOneRelatedRequest {
	return ApiBuildsAppGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return AppResponse
 */
func (a *BuildsApiService) BuildsAppGetToOneRelatedExecute(r ApiBuildsAppGetToOneRelatedRequest) (AppResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AppResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsAppGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/app"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fieldsApps != nil {
		localVarQueryParams.Add("fields[apps]", parameterToString(*r.fieldsApps, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBuildsAppStoreVersionGetToOneRelatedRequest struct {
	ctx _context.Context
	ApiService *BuildsApiService
	id string
	fieldsAppStoreVersions *[]string
}

func (r ApiBuildsAppStoreVersionGetToOneRelatedRequest) FieldsAppStoreVersions(fieldsAppStoreVersions []string) ApiBuildsAppStoreVersionGetToOneRelatedRequest {
	r.fieldsAppStoreVersions = &fieldsAppStoreVersions
	return r
}

func (r ApiBuildsAppStoreVersionGetToOneRelatedRequest) Execute() (AppStoreVersionResponse, *_nethttp.Response, error) {
	return r.ApiService.BuildsAppStoreVersionGetToOneRelatedExecute(r)
}

/*
 * BuildsAppStoreVersionGetToOneRelated Method for BuildsAppStoreVersionGetToOneRelated
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiBuildsAppStoreVersionGetToOneRelatedRequest
 */
func (a *BuildsApiService) BuildsAppStoreVersionGetToOneRelated(ctx _context.Context, id string) ApiBuildsAppStoreVersionGetToOneRelatedRequest {
	return ApiBuildsAppStoreVersionGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return AppStoreVersionResponse
 */
func (a *BuildsApiService) BuildsAppStoreVersionGetToOneRelatedExecute(r ApiBuildsAppStoreVersionGetToOneRelatedRequest) (AppStoreVersionResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AppStoreVersionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsAppStoreVersionGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/appStoreVersion"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fieldsAppStoreVersions != nil {
		localVarQueryParams.Add("fields[appStoreVersions]", parameterToString(*r.fieldsAppStoreVersions, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBuildsBetaAppReviewSubmissionGetToOneRelatedRequest struct {
	ctx _context.Context
	ApiService *BuildsApiService
	id string
	fieldsBetaAppReviewSubmissions *[]string
}

func (r ApiBuildsBetaAppReviewSubmissionGetToOneRelatedRequest) FieldsBetaAppReviewSubmissions(fieldsBetaAppReviewSubmissions []string) ApiBuildsBetaAppReviewSubmissionGetToOneRelatedRequest {
	r.fieldsBetaAppReviewSubmissions = &fieldsBetaAppReviewSubmissions
	return r
}

func (r ApiBuildsBetaAppReviewSubmissionGetToOneRelatedRequest) Execute() (BetaAppReviewSubmissionResponse, *_nethttp.Response, error) {
	return r.ApiService.BuildsBetaAppReviewSubmissionGetToOneRelatedExecute(r)
}

/*
 * BuildsBetaAppReviewSubmissionGetToOneRelated Method for BuildsBetaAppReviewSubmissionGetToOneRelated
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiBuildsBetaAppReviewSubmissionGetToOneRelatedRequest
 */
func (a *BuildsApiService) BuildsBetaAppReviewSubmissionGetToOneRelated(ctx _context.Context, id string) ApiBuildsBetaAppReviewSubmissionGetToOneRelatedRequest {
	return ApiBuildsBetaAppReviewSubmissionGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return BetaAppReviewSubmissionResponse
 */
func (a *BuildsApiService) BuildsBetaAppReviewSubmissionGetToOneRelatedExecute(r ApiBuildsBetaAppReviewSubmissionGetToOneRelatedRequest) (BetaAppReviewSubmissionResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BetaAppReviewSubmissionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsBetaAppReviewSubmissionGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/betaAppReviewSubmission"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fieldsBetaAppReviewSubmissions != nil {
		localVarQueryParams.Add("fields[betaAppReviewSubmissions]", parameterToString(*r.fieldsBetaAppReviewSubmissions, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBuildsBetaBuildLocalizationsGetToManyRelatedRequest struct {
	ctx _context.Context
	ApiService *BuildsApiService
	id string
	fieldsBetaBuildLocalizations *[]string
	limit *int32
}

func (r ApiBuildsBetaBuildLocalizationsGetToManyRelatedRequest) FieldsBetaBuildLocalizations(fieldsBetaBuildLocalizations []string) ApiBuildsBetaBuildLocalizationsGetToManyRelatedRequest {
	r.fieldsBetaBuildLocalizations = &fieldsBetaBuildLocalizations
	return r
}
func (r ApiBuildsBetaBuildLocalizationsGetToManyRelatedRequest) Limit(limit int32) ApiBuildsBetaBuildLocalizationsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

func (r ApiBuildsBetaBuildLocalizationsGetToManyRelatedRequest) Execute() (BetaBuildLocalizationsResponse, *_nethttp.Response, error) {
	return r.ApiService.BuildsBetaBuildLocalizationsGetToManyRelatedExecute(r)
}

/*
 * BuildsBetaBuildLocalizationsGetToManyRelated Method for BuildsBetaBuildLocalizationsGetToManyRelated
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiBuildsBetaBuildLocalizationsGetToManyRelatedRequest
 */
func (a *BuildsApiService) BuildsBetaBuildLocalizationsGetToManyRelated(ctx _context.Context, id string) ApiBuildsBetaBuildLocalizationsGetToManyRelatedRequest {
	return ApiBuildsBetaBuildLocalizationsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return BetaBuildLocalizationsResponse
 */
func (a *BuildsApiService) BuildsBetaBuildLocalizationsGetToManyRelatedExecute(r ApiBuildsBetaBuildLocalizationsGetToManyRelatedRequest) (BetaBuildLocalizationsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BetaBuildLocalizationsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsBetaBuildLocalizationsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/betaBuildLocalizations"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fieldsBetaBuildLocalizations != nil {
		localVarQueryParams.Add("fields[betaBuildLocalizations]", parameterToString(*r.fieldsBetaBuildLocalizations, "csv"))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBuildsBetaGroupsCreateToManyRelationshipRequest struct {
	ctx _context.Context
	ApiService *BuildsApiService
	id string
	buildBetaGroupsLinkagesRequest *BuildBetaGroupsLinkagesRequest
}

func (r ApiBuildsBetaGroupsCreateToManyRelationshipRequest) BuildBetaGroupsLinkagesRequest(buildBetaGroupsLinkagesRequest BuildBetaGroupsLinkagesRequest) ApiBuildsBetaGroupsCreateToManyRelationshipRequest {
	r.buildBetaGroupsLinkagesRequest = &buildBetaGroupsLinkagesRequest
	return r
}

func (r ApiBuildsBetaGroupsCreateToManyRelationshipRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.BuildsBetaGroupsCreateToManyRelationshipExecute(r)
}

/*
 * BuildsBetaGroupsCreateToManyRelationship Method for BuildsBetaGroupsCreateToManyRelationship
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiBuildsBetaGroupsCreateToManyRelationshipRequest
 */
func (a *BuildsApiService) BuildsBetaGroupsCreateToManyRelationship(ctx _context.Context, id string) ApiBuildsBetaGroupsCreateToManyRelationshipRequest {
	return ApiBuildsBetaGroupsCreateToManyRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *BuildsApiService) BuildsBetaGroupsCreateToManyRelationshipExecute(r ApiBuildsBetaGroupsCreateToManyRelationshipRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsBetaGroupsCreateToManyRelationship")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/relationships/betaGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.buildBetaGroupsLinkagesRequest == nil {
		return nil, reportError("buildBetaGroupsLinkagesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.buildBetaGroupsLinkagesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiBuildsBetaGroupsDeleteToManyRelationshipRequest struct {
	ctx _context.Context
	ApiService *BuildsApiService
	id string
	buildBetaGroupsLinkagesRequest *BuildBetaGroupsLinkagesRequest
}

func (r ApiBuildsBetaGroupsDeleteToManyRelationshipRequest) BuildBetaGroupsLinkagesRequest(buildBetaGroupsLinkagesRequest BuildBetaGroupsLinkagesRequest) ApiBuildsBetaGroupsDeleteToManyRelationshipRequest {
	r.buildBetaGroupsLinkagesRequest = &buildBetaGroupsLinkagesRequest
	return r
}

func (r ApiBuildsBetaGroupsDeleteToManyRelationshipRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.BuildsBetaGroupsDeleteToManyRelationshipExecute(r)
}

/*
 * BuildsBetaGroupsDeleteToManyRelationship Method for BuildsBetaGroupsDeleteToManyRelationship
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiBuildsBetaGroupsDeleteToManyRelationshipRequest
 */
func (a *BuildsApiService) BuildsBetaGroupsDeleteToManyRelationship(ctx _context.Context, id string) ApiBuildsBetaGroupsDeleteToManyRelationshipRequest {
	return ApiBuildsBetaGroupsDeleteToManyRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *BuildsApiService) BuildsBetaGroupsDeleteToManyRelationshipExecute(r ApiBuildsBetaGroupsDeleteToManyRelationshipRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsBetaGroupsDeleteToManyRelationship")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/relationships/betaGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.buildBetaGroupsLinkagesRequest == nil {
		return nil, reportError("buildBetaGroupsLinkagesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.buildBetaGroupsLinkagesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiBuildsBuildBetaDetailGetToOneRelatedRequest struct {
	ctx _context.Context
	ApiService *BuildsApiService
	id string
	fieldsBuildBetaDetails *[]string
}

func (r ApiBuildsBuildBetaDetailGetToOneRelatedRequest) FieldsBuildBetaDetails(fieldsBuildBetaDetails []string) ApiBuildsBuildBetaDetailGetToOneRelatedRequest {
	r.fieldsBuildBetaDetails = &fieldsBuildBetaDetails
	return r
}

func (r ApiBuildsBuildBetaDetailGetToOneRelatedRequest) Execute() (BuildBetaDetailResponse, *_nethttp.Response, error) {
	return r.ApiService.BuildsBuildBetaDetailGetToOneRelatedExecute(r)
}

/*
 * BuildsBuildBetaDetailGetToOneRelated Method for BuildsBuildBetaDetailGetToOneRelated
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiBuildsBuildBetaDetailGetToOneRelatedRequest
 */
func (a *BuildsApiService) BuildsBuildBetaDetailGetToOneRelated(ctx _context.Context, id string) ApiBuildsBuildBetaDetailGetToOneRelatedRequest {
	return ApiBuildsBuildBetaDetailGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return BuildBetaDetailResponse
 */
func (a *BuildsApiService) BuildsBuildBetaDetailGetToOneRelatedExecute(r ApiBuildsBuildBetaDetailGetToOneRelatedRequest) (BuildBetaDetailResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BuildBetaDetailResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsBuildBetaDetailGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/buildBetaDetail"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fieldsBuildBetaDetails != nil {
		localVarQueryParams.Add("fields[buildBetaDetails]", parameterToString(*r.fieldsBuildBetaDetails, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBuildsDiagnosticSignaturesGetToManyRelatedRequest struct {
	ctx _context.Context
	ApiService *BuildsApiService
	id string
	filterDiagnosticType *[]string
	fieldsDiagnosticSignatures *[]string
	limit *int32
}

func (r ApiBuildsDiagnosticSignaturesGetToManyRelatedRequest) FilterDiagnosticType(filterDiagnosticType []string) ApiBuildsDiagnosticSignaturesGetToManyRelatedRequest {
	r.filterDiagnosticType = &filterDiagnosticType
	return r
}
func (r ApiBuildsDiagnosticSignaturesGetToManyRelatedRequest) FieldsDiagnosticSignatures(fieldsDiagnosticSignatures []string) ApiBuildsDiagnosticSignaturesGetToManyRelatedRequest {
	r.fieldsDiagnosticSignatures = &fieldsDiagnosticSignatures
	return r
}
func (r ApiBuildsDiagnosticSignaturesGetToManyRelatedRequest) Limit(limit int32) ApiBuildsDiagnosticSignaturesGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

func (r ApiBuildsDiagnosticSignaturesGetToManyRelatedRequest) Execute() (DiagnosticSignaturesResponse, *_nethttp.Response, error) {
	return r.ApiService.BuildsDiagnosticSignaturesGetToManyRelatedExecute(r)
}

/*
 * BuildsDiagnosticSignaturesGetToManyRelated Method for BuildsDiagnosticSignaturesGetToManyRelated
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiBuildsDiagnosticSignaturesGetToManyRelatedRequest
 */
func (a *BuildsApiService) BuildsDiagnosticSignaturesGetToManyRelated(ctx _context.Context, id string) ApiBuildsDiagnosticSignaturesGetToManyRelatedRequest {
	return ApiBuildsDiagnosticSignaturesGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return DiagnosticSignaturesResponse
 */
func (a *BuildsApiService) BuildsDiagnosticSignaturesGetToManyRelatedExecute(r ApiBuildsDiagnosticSignaturesGetToManyRelatedRequest) (DiagnosticSignaturesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DiagnosticSignaturesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsDiagnosticSignaturesGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/diagnosticSignatures"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.filterDiagnosticType != nil {
		localVarQueryParams.Add("filter[diagnosticType]", parameterToString(*r.filterDiagnosticType, "csv"))
	}
	if r.fieldsDiagnosticSignatures != nil {
		localVarQueryParams.Add("fields[diagnosticSignatures]", parameterToString(*r.fieldsDiagnosticSignatures, "csv"))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBuildsGetCollectionRequest struct {
	ctx _context.Context
	ApiService *BuildsApiService
	filterBetaAppReviewSubmissionBetaReviewState *[]string
	filterExpired *[]string
	filterPreReleaseVersionPlatform *[]string
	filterPreReleaseVersionVersion *[]string
	filterProcessingState *[]string
	filterUsesNonExemptEncryption *[]string
	filterVersion *[]string
	filterApp *[]string
	filterAppStoreVersion *[]string
	filterBetaGroups *[]string
	filterPreReleaseVersion *[]string
	filterId *[]string
	sort *[]string
	fieldsBuilds *[]string
	limit *int32
	include *[]string
	fieldsAppEncryptionDeclarations *[]string
	fieldsBetaAppReviewSubmissions *[]string
	fieldsBuildBetaDetails *[]string
	fieldsBuildIcons *[]string
	fieldsPerfPowerMetrics *[]string
	fieldsPreReleaseVersions *[]string
	fieldsAppStoreVersions *[]string
	fieldsDiagnosticSignatures *[]string
	fieldsBetaTesters *[]string
	fieldsBetaBuildLocalizations *[]string
	fieldsApps *[]string
	limitBetaBuildLocalizations *int32
	limitIcons *int32
	limitIndividualTesters *int32
}

func (r ApiBuildsGetCollectionRequest) FilterBetaAppReviewSubmissionBetaReviewState(filterBetaAppReviewSubmissionBetaReviewState []string) ApiBuildsGetCollectionRequest {
	r.filterBetaAppReviewSubmissionBetaReviewState = &filterBetaAppReviewSubmissionBetaReviewState
	return r
}
func (r ApiBuildsGetCollectionRequest) FilterExpired(filterExpired []string) ApiBuildsGetCollectionRequest {
	r.filterExpired = &filterExpired
	return r
}
func (r ApiBuildsGetCollectionRequest) FilterPreReleaseVersionPlatform(filterPreReleaseVersionPlatform []string) ApiBuildsGetCollectionRequest {
	r.filterPreReleaseVersionPlatform = &filterPreReleaseVersionPlatform
	return r
}
func (r ApiBuildsGetCollectionRequest) FilterPreReleaseVersionVersion(filterPreReleaseVersionVersion []string) ApiBuildsGetCollectionRequest {
	r.filterPreReleaseVersionVersion = &filterPreReleaseVersionVersion
	return r
}
func (r ApiBuildsGetCollectionRequest) FilterProcessingState(filterProcessingState []string) ApiBuildsGetCollectionRequest {
	r.filterProcessingState = &filterProcessingState
	return r
}
func (r ApiBuildsGetCollectionRequest) FilterUsesNonExemptEncryption(filterUsesNonExemptEncryption []string) ApiBuildsGetCollectionRequest {
	r.filterUsesNonExemptEncryption = &filterUsesNonExemptEncryption
	return r
}
func (r ApiBuildsGetCollectionRequest) FilterVersion(filterVersion []string) ApiBuildsGetCollectionRequest {
	r.filterVersion = &filterVersion
	return r
}
func (r ApiBuildsGetCollectionRequest) FilterApp(filterApp []string) ApiBuildsGetCollectionRequest {
	r.filterApp = &filterApp
	return r
}
func (r ApiBuildsGetCollectionRequest) FilterAppStoreVersion(filterAppStoreVersion []string) ApiBuildsGetCollectionRequest {
	r.filterAppStoreVersion = &filterAppStoreVersion
	return r
}
func (r ApiBuildsGetCollectionRequest) FilterBetaGroups(filterBetaGroups []string) ApiBuildsGetCollectionRequest {
	r.filterBetaGroups = &filterBetaGroups
	return r
}
func (r ApiBuildsGetCollectionRequest) FilterPreReleaseVersion(filterPreReleaseVersion []string) ApiBuildsGetCollectionRequest {
	r.filterPreReleaseVersion = &filterPreReleaseVersion
	return r
}
func (r ApiBuildsGetCollectionRequest) FilterId(filterId []string) ApiBuildsGetCollectionRequest {
	r.filterId = &filterId
	return r
}
func (r ApiBuildsGetCollectionRequest) Sort(sort []string) ApiBuildsGetCollectionRequest {
	r.sort = &sort
	return r
}
func (r ApiBuildsGetCollectionRequest) FieldsBuilds(fieldsBuilds []string) ApiBuildsGetCollectionRequest {
	r.fieldsBuilds = &fieldsBuilds
	return r
}
func (r ApiBuildsGetCollectionRequest) Limit(limit int32) ApiBuildsGetCollectionRequest {
	r.limit = &limit
	return r
}
func (r ApiBuildsGetCollectionRequest) Include(include []string) ApiBuildsGetCollectionRequest {
	r.include = &include
	return r
}
func (r ApiBuildsGetCollectionRequest) FieldsAppEncryptionDeclarations(fieldsAppEncryptionDeclarations []string) ApiBuildsGetCollectionRequest {
	r.fieldsAppEncryptionDeclarations = &fieldsAppEncryptionDeclarations
	return r
}
func (r ApiBuildsGetCollectionRequest) FieldsBetaAppReviewSubmissions(fieldsBetaAppReviewSubmissions []string) ApiBuildsGetCollectionRequest {
	r.fieldsBetaAppReviewSubmissions = &fieldsBetaAppReviewSubmissions
	return r
}
func (r ApiBuildsGetCollectionRequest) FieldsBuildBetaDetails(fieldsBuildBetaDetails []string) ApiBuildsGetCollectionRequest {
	r.fieldsBuildBetaDetails = &fieldsBuildBetaDetails
	return r
}
func (r ApiBuildsGetCollectionRequest) FieldsBuildIcons(fieldsBuildIcons []string) ApiBuildsGetCollectionRequest {
	r.fieldsBuildIcons = &fieldsBuildIcons
	return r
}
func (r ApiBuildsGetCollectionRequest) FieldsPerfPowerMetrics(fieldsPerfPowerMetrics []string) ApiBuildsGetCollectionRequest {
	r.fieldsPerfPowerMetrics = &fieldsPerfPowerMetrics
	return r
}
func (r ApiBuildsGetCollectionRequest) FieldsPreReleaseVersions(fieldsPreReleaseVersions []string) ApiBuildsGetCollectionRequest {
	r.fieldsPreReleaseVersions = &fieldsPreReleaseVersions
	return r
}
func (r ApiBuildsGetCollectionRequest) FieldsAppStoreVersions(fieldsAppStoreVersions []string) ApiBuildsGetCollectionRequest {
	r.fieldsAppStoreVersions = &fieldsAppStoreVersions
	return r
}
func (r ApiBuildsGetCollectionRequest) FieldsDiagnosticSignatures(fieldsDiagnosticSignatures []string) ApiBuildsGetCollectionRequest {
	r.fieldsDiagnosticSignatures = &fieldsDiagnosticSignatures
	return r
}
func (r ApiBuildsGetCollectionRequest) FieldsBetaTesters(fieldsBetaTesters []string) ApiBuildsGetCollectionRequest {
	r.fieldsBetaTesters = &fieldsBetaTesters
	return r
}
func (r ApiBuildsGetCollectionRequest) FieldsBetaBuildLocalizations(fieldsBetaBuildLocalizations []string) ApiBuildsGetCollectionRequest {
	r.fieldsBetaBuildLocalizations = &fieldsBetaBuildLocalizations
	return r
}
func (r ApiBuildsGetCollectionRequest) FieldsApps(fieldsApps []string) ApiBuildsGetCollectionRequest {
	r.fieldsApps = &fieldsApps
	return r
}
func (r ApiBuildsGetCollectionRequest) LimitBetaBuildLocalizations(limitBetaBuildLocalizations int32) ApiBuildsGetCollectionRequest {
	r.limitBetaBuildLocalizations = &limitBetaBuildLocalizations
	return r
}
func (r ApiBuildsGetCollectionRequest) LimitIcons(limitIcons int32) ApiBuildsGetCollectionRequest {
	r.limitIcons = &limitIcons
	return r
}
func (r ApiBuildsGetCollectionRequest) LimitIndividualTesters(limitIndividualTesters int32) ApiBuildsGetCollectionRequest {
	r.limitIndividualTesters = &limitIndividualTesters
	return r
}

func (r ApiBuildsGetCollectionRequest) Execute() (BuildsResponse, *_nethttp.Response, error) {
	return r.ApiService.BuildsGetCollectionExecute(r)
}

/*
 * BuildsGetCollection Method for BuildsGetCollection
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiBuildsGetCollectionRequest
 */
func (a *BuildsApiService) BuildsGetCollection(ctx _context.Context) ApiBuildsGetCollectionRequest {
	return ApiBuildsGetCollectionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return BuildsResponse
 */
func (a *BuildsApiService) BuildsGetCollectionExecute(r ApiBuildsGetCollectionRequest) (BuildsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BuildsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.filterBetaAppReviewSubmissionBetaReviewState != nil {
		localVarQueryParams.Add("filter[betaAppReviewSubmission.betaReviewState]", parameterToString(*r.filterBetaAppReviewSubmissionBetaReviewState, "csv"))
	}
	if r.filterExpired != nil {
		localVarQueryParams.Add("filter[expired]", parameterToString(*r.filterExpired, "csv"))
	}
	if r.filterPreReleaseVersionPlatform != nil {
		localVarQueryParams.Add("filter[preReleaseVersion.platform]", parameterToString(*r.filterPreReleaseVersionPlatform, "csv"))
	}
	if r.filterPreReleaseVersionVersion != nil {
		localVarQueryParams.Add("filter[preReleaseVersion.version]", parameterToString(*r.filterPreReleaseVersionVersion, "csv"))
	}
	if r.filterProcessingState != nil {
		localVarQueryParams.Add("filter[processingState]", parameterToString(*r.filterProcessingState, "csv"))
	}
	if r.filterUsesNonExemptEncryption != nil {
		localVarQueryParams.Add("filter[usesNonExemptEncryption]", parameterToString(*r.filterUsesNonExemptEncryption, "csv"))
	}
	if r.filterVersion != nil {
		localVarQueryParams.Add("filter[version]", parameterToString(*r.filterVersion, "csv"))
	}
	if r.filterApp != nil {
		localVarQueryParams.Add("filter[app]", parameterToString(*r.filterApp, "csv"))
	}
	if r.filterAppStoreVersion != nil {
		localVarQueryParams.Add("filter[appStoreVersion]", parameterToString(*r.filterAppStoreVersion, "csv"))
	}
	if r.filterBetaGroups != nil {
		localVarQueryParams.Add("filter[betaGroups]", parameterToString(*r.filterBetaGroups, "csv"))
	}
	if r.filterPreReleaseVersion != nil {
		localVarQueryParams.Add("filter[preReleaseVersion]", parameterToString(*r.filterPreReleaseVersion, "csv"))
	}
	if r.filterId != nil {
		localVarQueryParams.Add("filter[id]", parameterToString(*r.filterId, "csv"))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, "csv"))
	}
	if r.fieldsBuilds != nil {
		localVarQueryParams.Add("fields[builds]", parameterToString(*r.fieldsBuilds, "csv"))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsAppEncryptionDeclarations != nil {
		localVarQueryParams.Add("fields[appEncryptionDeclarations]", parameterToString(*r.fieldsAppEncryptionDeclarations, "csv"))
	}
	if r.fieldsBetaAppReviewSubmissions != nil {
		localVarQueryParams.Add("fields[betaAppReviewSubmissions]", parameterToString(*r.fieldsBetaAppReviewSubmissions, "csv"))
	}
	if r.fieldsBuildBetaDetails != nil {
		localVarQueryParams.Add("fields[buildBetaDetails]", parameterToString(*r.fieldsBuildBetaDetails, "csv"))
	}
	if r.fieldsBuildIcons != nil {
		localVarQueryParams.Add("fields[buildIcons]", parameterToString(*r.fieldsBuildIcons, "csv"))
	}
	if r.fieldsPerfPowerMetrics != nil {
		localVarQueryParams.Add("fields[perfPowerMetrics]", parameterToString(*r.fieldsPerfPowerMetrics, "csv"))
	}
	if r.fieldsPreReleaseVersions != nil {
		localVarQueryParams.Add("fields[preReleaseVersions]", parameterToString(*r.fieldsPreReleaseVersions, "csv"))
	}
	if r.fieldsAppStoreVersions != nil {
		localVarQueryParams.Add("fields[appStoreVersions]", parameterToString(*r.fieldsAppStoreVersions, "csv"))
	}
	if r.fieldsDiagnosticSignatures != nil {
		localVarQueryParams.Add("fields[diagnosticSignatures]", parameterToString(*r.fieldsDiagnosticSignatures, "csv"))
	}
	if r.fieldsBetaTesters != nil {
		localVarQueryParams.Add("fields[betaTesters]", parameterToString(*r.fieldsBetaTesters, "csv"))
	}
	if r.fieldsBetaBuildLocalizations != nil {
		localVarQueryParams.Add("fields[betaBuildLocalizations]", parameterToString(*r.fieldsBetaBuildLocalizations, "csv"))
	}
	if r.fieldsApps != nil {
		localVarQueryParams.Add("fields[apps]", parameterToString(*r.fieldsApps, "csv"))
	}
	if r.limitBetaBuildLocalizations != nil {
		localVarQueryParams.Add("limit[betaBuildLocalizations]", parameterToString(*r.limitBetaBuildLocalizations, ""))
	}
	if r.limitIcons != nil {
		localVarQueryParams.Add("limit[icons]", parameterToString(*r.limitIcons, ""))
	}
	if r.limitIndividualTesters != nil {
		localVarQueryParams.Add("limit[individualTesters]", parameterToString(*r.limitIndividualTesters, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBuildsGetInstanceRequest struct {
	ctx _context.Context
	ApiService *BuildsApiService
	id string
	fieldsBuilds *[]string
	include *[]string
	fieldsAppEncryptionDeclarations *[]string
	fieldsBetaAppReviewSubmissions *[]string
	fieldsBuildBetaDetails *[]string
	fieldsBuildIcons *[]string
	fieldsPerfPowerMetrics *[]string
	fieldsPreReleaseVersions *[]string
	fieldsAppStoreVersions *[]string
	fieldsDiagnosticSignatures *[]string
	fieldsBetaTesters *[]string
	fieldsBetaBuildLocalizations *[]string
	fieldsApps *[]string
	limitBetaBuildLocalizations *int32
	limitIcons *int32
	limitIndividualTesters *int32
}

func (r ApiBuildsGetInstanceRequest) FieldsBuilds(fieldsBuilds []string) ApiBuildsGetInstanceRequest {
	r.fieldsBuilds = &fieldsBuilds
	return r
}
func (r ApiBuildsGetInstanceRequest) Include(include []string) ApiBuildsGetInstanceRequest {
	r.include = &include
	return r
}
func (r ApiBuildsGetInstanceRequest) FieldsAppEncryptionDeclarations(fieldsAppEncryptionDeclarations []string) ApiBuildsGetInstanceRequest {
	r.fieldsAppEncryptionDeclarations = &fieldsAppEncryptionDeclarations
	return r
}
func (r ApiBuildsGetInstanceRequest) FieldsBetaAppReviewSubmissions(fieldsBetaAppReviewSubmissions []string) ApiBuildsGetInstanceRequest {
	r.fieldsBetaAppReviewSubmissions = &fieldsBetaAppReviewSubmissions
	return r
}
func (r ApiBuildsGetInstanceRequest) FieldsBuildBetaDetails(fieldsBuildBetaDetails []string) ApiBuildsGetInstanceRequest {
	r.fieldsBuildBetaDetails = &fieldsBuildBetaDetails
	return r
}
func (r ApiBuildsGetInstanceRequest) FieldsBuildIcons(fieldsBuildIcons []string) ApiBuildsGetInstanceRequest {
	r.fieldsBuildIcons = &fieldsBuildIcons
	return r
}
func (r ApiBuildsGetInstanceRequest) FieldsPerfPowerMetrics(fieldsPerfPowerMetrics []string) ApiBuildsGetInstanceRequest {
	r.fieldsPerfPowerMetrics = &fieldsPerfPowerMetrics
	return r
}
func (r ApiBuildsGetInstanceRequest) FieldsPreReleaseVersions(fieldsPreReleaseVersions []string) ApiBuildsGetInstanceRequest {
	r.fieldsPreReleaseVersions = &fieldsPreReleaseVersions
	return r
}
func (r ApiBuildsGetInstanceRequest) FieldsAppStoreVersions(fieldsAppStoreVersions []string) ApiBuildsGetInstanceRequest {
	r.fieldsAppStoreVersions = &fieldsAppStoreVersions
	return r
}
func (r ApiBuildsGetInstanceRequest) FieldsDiagnosticSignatures(fieldsDiagnosticSignatures []string) ApiBuildsGetInstanceRequest {
	r.fieldsDiagnosticSignatures = &fieldsDiagnosticSignatures
	return r
}
func (r ApiBuildsGetInstanceRequest) FieldsBetaTesters(fieldsBetaTesters []string) ApiBuildsGetInstanceRequest {
	r.fieldsBetaTesters = &fieldsBetaTesters
	return r
}
func (r ApiBuildsGetInstanceRequest) FieldsBetaBuildLocalizations(fieldsBetaBuildLocalizations []string) ApiBuildsGetInstanceRequest {
	r.fieldsBetaBuildLocalizations = &fieldsBetaBuildLocalizations
	return r
}
func (r ApiBuildsGetInstanceRequest) FieldsApps(fieldsApps []string) ApiBuildsGetInstanceRequest {
	r.fieldsApps = &fieldsApps
	return r
}
func (r ApiBuildsGetInstanceRequest) LimitBetaBuildLocalizations(limitBetaBuildLocalizations int32) ApiBuildsGetInstanceRequest {
	r.limitBetaBuildLocalizations = &limitBetaBuildLocalizations
	return r
}
func (r ApiBuildsGetInstanceRequest) LimitIcons(limitIcons int32) ApiBuildsGetInstanceRequest {
	r.limitIcons = &limitIcons
	return r
}
func (r ApiBuildsGetInstanceRequest) LimitIndividualTesters(limitIndividualTesters int32) ApiBuildsGetInstanceRequest {
	r.limitIndividualTesters = &limitIndividualTesters
	return r
}

func (r ApiBuildsGetInstanceRequest) Execute() (BuildResponse, *_nethttp.Response, error) {
	return r.ApiService.BuildsGetInstanceExecute(r)
}

/*
 * BuildsGetInstance Method for BuildsGetInstance
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiBuildsGetInstanceRequest
 */
func (a *BuildsApiService) BuildsGetInstance(ctx _context.Context, id string) ApiBuildsGetInstanceRequest {
	return ApiBuildsGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return BuildResponse
 */
func (a *BuildsApiService) BuildsGetInstanceExecute(r ApiBuildsGetInstanceRequest) (BuildResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BuildResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fieldsBuilds != nil {
		localVarQueryParams.Add("fields[builds]", parameterToString(*r.fieldsBuilds, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsAppEncryptionDeclarations != nil {
		localVarQueryParams.Add("fields[appEncryptionDeclarations]", parameterToString(*r.fieldsAppEncryptionDeclarations, "csv"))
	}
	if r.fieldsBetaAppReviewSubmissions != nil {
		localVarQueryParams.Add("fields[betaAppReviewSubmissions]", parameterToString(*r.fieldsBetaAppReviewSubmissions, "csv"))
	}
	if r.fieldsBuildBetaDetails != nil {
		localVarQueryParams.Add("fields[buildBetaDetails]", parameterToString(*r.fieldsBuildBetaDetails, "csv"))
	}
	if r.fieldsBuildIcons != nil {
		localVarQueryParams.Add("fields[buildIcons]", parameterToString(*r.fieldsBuildIcons, "csv"))
	}
	if r.fieldsPerfPowerMetrics != nil {
		localVarQueryParams.Add("fields[perfPowerMetrics]", parameterToString(*r.fieldsPerfPowerMetrics, "csv"))
	}
	if r.fieldsPreReleaseVersions != nil {
		localVarQueryParams.Add("fields[preReleaseVersions]", parameterToString(*r.fieldsPreReleaseVersions, "csv"))
	}
	if r.fieldsAppStoreVersions != nil {
		localVarQueryParams.Add("fields[appStoreVersions]", parameterToString(*r.fieldsAppStoreVersions, "csv"))
	}
	if r.fieldsDiagnosticSignatures != nil {
		localVarQueryParams.Add("fields[diagnosticSignatures]", parameterToString(*r.fieldsDiagnosticSignatures, "csv"))
	}
	if r.fieldsBetaTesters != nil {
		localVarQueryParams.Add("fields[betaTesters]", parameterToString(*r.fieldsBetaTesters, "csv"))
	}
	if r.fieldsBetaBuildLocalizations != nil {
		localVarQueryParams.Add("fields[betaBuildLocalizations]", parameterToString(*r.fieldsBetaBuildLocalizations, "csv"))
	}
	if r.fieldsApps != nil {
		localVarQueryParams.Add("fields[apps]", parameterToString(*r.fieldsApps, "csv"))
	}
	if r.limitBetaBuildLocalizations != nil {
		localVarQueryParams.Add("limit[betaBuildLocalizations]", parameterToString(*r.limitBetaBuildLocalizations, ""))
	}
	if r.limitIcons != nil {
		localVarQueryParams.Add("limit[icons]", parameterToString(*r.limitIcons, ""))
	}
	if r.limitIndividualTesters != nil {
		localVarQueryParams.Add("limit[individualTesters]", parameterToString(*r.limitIndividualTesters, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBuildsIconsGetToManyRelatedRequest struct {
	ctx _context.Context
	ApiService *BuildsApiService
	id string
	fieldsBuildIcons *[]string
	limit *int32
}

func (r ApiBuildsIconsGetToManyRelatedRequest) FieldsBuildIcons(fieldsBuildIcons []string) ApiBuildsIconsGetToManyRelatedRequest {
	r.fieldsBuildIcons = &fieldsBuildIcons
	return r
}
func (r ApiBuildsIconsGetToManyRelatedRequest) Limit(limit int32) ApiBuildsIconsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

func (r ApiBuildsIconsGetToManyRelatedRequest) Execute() (BuildIconsResponse, *_nethttp.Response, error) {
	return r.ApiService.BuildsIconsGetToManyRelatedExecute(r)
}

/*
 * BuildsIconsGetToManyRelated Method for BuildsIconsGetToManyRelated
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiBuildsIconsGetToManyRelatedRequest
 */
func (a *BuildsApiService) BuildsIconsGetToManyRelated(ctx _context.Context, id string) ApiBuildsIconsGetToManyRelatedRequest {
	return ApiBuildsIconsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return BuildIconsResponse
 */
func (a *BuildsApiService) BuildsIconsGetToManyRelatedExecute(r ApiBuildsIconsGetToManyRelatedRequest) (BuildIconsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BuildIconsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsIconsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/icons"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fieldsBuildIcons != nil {
		localVarQueryParams.Add("fields[buildIcons]", parameterToString(*r.fieldsBuildIcons, "csv"))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBuildsIndividualTestersCreateToManyRelationshipRequest struct {
	ctx _context.Context
	ApiService *BuildsApiService
	id string
	buildIndividualTestersLinkagesRequest *BuildIndividualTestersLinkagesRequest
}

func (r ApiBuildsIndividualTestersCreateToManyRelationshipRequest) BuildIndividualTestersLinkagesRequest(buildIndividualTestersLinkagesRequest BuildIndividualTestersLinkagesRequest) ApiBuildsIndividualTestersCreateToManyRelationshipRequest {
	r.buildIndividualTestersLinkagesRequest = &buildIndividualTestersLinkagesRequest
	return r
}

func (r ApiBuildsIndividualTestersCreateToManyRelationshipRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.BuildsIndividualTestersCreateToManyRelationshipExecute(r)
}

/*
 * BuildsIndividualTestersCreateToManyRelationship Method for BuildsIndividualTestersCreateToManyRelationship
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiBuildsIndividualTestersCreateToManyRelationshipRequest
 */
func (a *BuildsApiService) BuildsIndividualTestersCreateToManyRelationship(ctx _context.Context, id string) ApiBuildsIndividualTestersCreateToManyRelationshipRequest {
	return ApiBuildsIndividualTestersCreateToManyRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *BuildsApiService) BuildsIndividualTestersCreateToManyRelationshipExecute(r ApiBuildsIndividualTestersCreateToManyRelationshipRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsIndividualTestersCreateToManyRelationship")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/relationships/individualTesters"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.buildIndividualTestersLinkagesRequest == nil {
		return nil, reportError("buildIndividualTestersLinkagesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.buildIndividualTestersLinkagesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiBuildsIndividualTestersDeleteToManyRelationshipRequest struct {
	ctx _context.Context
	ApiService *BuildsApiService
	id string
	buildIndividualTestersLinkagesRequest *BuildIndividualTestersLinkagesRequest
}

func (r ApiBuildsIndividualTestersDeleteToManyRelationshipRequest) BuildIndividualTestersLinkagesRequest(buildIndividualTestersLinkagesRequest BuildIndividualTestersLinkagesRequest) ApiBuildsIndividualTestersDeleteToManyRelationshipRequest {
	r.buildIndividualTestersLinkagesRequest = &buildIndividualTestersLinkagesRequest
	return r
}

func (r ApiBuildsIndividualTestersDeleteToManyRelationshipRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.BuildsIndividualTestersDeleteToManyRelationshipExecute(r)
}

/*
 * BuildsIndividualTestersDeleteToManyRelationship Method for BuildsIndividualTestersDeleteToManyRelationship
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiBuildsIndividualTestersDeleteToManyRelationshipRequest
 */
func (a *BuildsApiService) BuildsIndividualTestersDeleteToManyRelationship(ctx _context.Context, id string) ApiBuildsIndividualTestersDeleteToManyRelationshipRequest {
	return ApiBuildsIndividualTestersDeleteToManyRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *BuildsApiService) BuildsIndividualTestersDeleteToManyRelationshipExecute(r ApiBuildsIndividualTestersDeleteToManyRelationshipRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsIndividualTestersDeleteToManyRelationship")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/relationships/individualTesters"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.buildIndividualTestersLinkagesRequest == nil {
		return nil, reportError("buildIndividualTestersLinkagesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.buildIndividualTestersLinkagesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiBuildsIndividualTestersGetToManyRelatedRequest struct {
	ctx _context.Context
	ApiService *BuildsApiService
	id string
	fieldsBetaTesters *[]string
	limit *int32
}

func (r ApiBuildsIndividualTestersGetToManyRelatedRequest) FieldsBetaTesters(fieldsBetaTesters []string) ApiBuildsIndividualTestersGetToManyRelatedRequest {
	r.fieldsBetaTesters = &fieldsBetaTesters
	return r
}
func (r ApiBuildsIndividualTestersGetToManyRelatedRequest) Limit(limit int32) ApiBuildsIndividualTestersGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

func (r ApiBuildsIndividualTestersGetToManyRelatedRequest) Execute() (BetaTestersResponse, *_nethttp.Response, error) {
	return r.ApiService.BuildsIndividualTestersGetToManyRelatedExecute(r)
}

/*
 * BuildsIndividualTestersGetToManyRelated Method for BuildsIndividualTestersGetToManyRelated
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiBuildsIndividualTestersGetToManyRelatedRequest
 */
func (a *BuildsApiService) BuildsIndividualTestersGetToManyRelated(ctx _context.Context, id string) ApiBuildsIndividualTestersGetToManyRelatedRequest {
	return ApiBuildsIndividualTestersGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return BetaTestersResponse
 */
func (a *BuildsApiService) BuildsIndividualTestersGetToManyRelatedExecute(r ApiBuildsIndividualTestersGetToManyRelatedRequest) (BetaTestersResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BetaTestersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsIndividualTestersGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/individualTesters"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fieldsBetaTesters != nil {
		localVarQueryParams.Add("fields[betaTesters]", parameterToString(*r.fieldsBetaTesters, "csv"))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBuildsIndividualTestersGetToManyRelationshipRequest struct {
	ctx _context.Context
	ApiService *BuildsApiService
	id string
	limit *int32
}

func (r ApiBuildsIndividualTestersGetToManyRelationshipRequest) Limit(limit int32) ApiBuildsIndividualTestersGetToManyRelationshipRequest {
	r.limit = &limit
	return r
}

func (r ApiBuildsIndividualTestersGetToManyRelationshipRequest) Execute() (BuildIndividualTestersLinkagesResponse, *_nethttp.Response, error) {
	return r.ApiService.BuildsIndividualTestersGetToManyRelationshipExecute(r)
}

/*
 * BuildsIndividualTestersGetToManyRelationship Method for BuildsIndividualTestersGetToManyRelationship
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiBuildsIndividualTestersGetToManyRelationshipRequest
 */
func (a *BuildsApiService) BuildsIndividualTestersGetToManyRelationship(ctx _context.Context, id string) ApiBuildsIndividualTestersGetToManyRelationshipRequest {
	return ApiBuildsIndividualTestersGetToManyRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return BuildIndividualTestersLinkagesResponse
 */
func (a *BuildsApiService) BuildsIndividualTestersGetToManyRelationshipExecute(r ApiBuildsIndividualTestersGetToManyRelationshipRequest) (BuildIndividualTestersLinkagesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BuildIndividualTestersLinkagesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsIndividualTestersGetToManyRelationship")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/relationships/individualTesters"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBuildsPerfPowerMetricsGetToManyRelatedRequest struct {
	ctx _context.Context
	ApiService *BuildsApiService
	id string
	filterDeviceType *[]string
	filterMetricType *[]string
	filterPlatform *[]string
}

func (r ApiBuildsPerfPowerMetricsGetToManyRelatedRequest) FilterDeviceType(filterDeviceType []string) ApiBuildsPerfPowerMetricsGetToManyRelatedRequest {
	r.filterDeviceType = &filterDeviceType
	return r
}
func (r ApiBuildsPerfPowerMetricsGetToManyRelatedRequest) FilterMetricType(filterMetricType []string) ApiBuildsPerfPowerMetricsGetToManyRelatedRequest {
	r.filterMetricType = &filterMetricType
	return r
}
func (r ApiBuildsPerfPowerMetricsGetToManyRelatedRequest) FilterPlatform(filterPlatform []string) ApiBuildsPerfPowerMetricsGetToManyRelatedRequest {
	r.filterPlatform = &filterPlatform
	return r
}

func (r ApiBuildsPerfPowerMetricsGetToManyRelatedRequest) Execute() (PerfPowerMetricsResponse, *_nethttp.Response, error) {
	return r.ApiService.BuildsPerfPowerMetricsGetToManyRelatedExecute(r)
}

/*
 * BuildsPerfPowerMetricsGetToManyRelated Method for BuildsPerfPowerMetricsGetToManyRelated
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiBuildsPerfPowerMetricsGetToManyRelatedRequest
 */
func (a *BuildsApiService) BuildsPerfPowerMetricsGetToManyRelated(ctx _context.Context, id string) ApiBuildsPerfPowerMetricsGetToManyRelatedRequest {
	return ApiBuildsPerfPowerMetricsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return PerfPowerMetricsResponse
 */
func (a *BuildsApiService) BuildsPerfPowerMetricsGetToManyRelatedExecute(r ApiBuildsPerfPowerMetricsGetToManyRelatedRequest) (PerfPowerMetricsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PerfPowerMetricsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsPerfPowerMetricsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/perfPowerMetrics"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.filterDeviceType != nil {
		localVarQueryParams.Add("filter[deviceType]", parameterToString(*r.filterDeviceType, "csv"))
	}
	if r.filterMetricType != nil {
		localVarQueryParams.Add("filter[metricType]", parameterToString(*r.filterMetricType, "csv"))
	}
	if r.filterPlatform != nil {
		localVarQueryParams.Add("filter[platform]", parameterToString(*r.filterPlatform, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBuildsPreReleaseVersionGetToOneRelatedRequest struct {
	ctx _context.Context
	ApiService *BuildsApiService
	id string
	fieldsPreReleaseVersions *[]string
}

func (r ApiBuildsPreReleaseVersionGetToOneRelatedRequest) FieldsPreReleaseVersions(fieldsPreReleaseVersions []string) ApiBuildsPreReleaseVersionGetToOneRelatedRequest {
	r.fieldsPreReleaseVersions = &fieldsPreReleaseVersions
	return r
}

func (r ApiBuildsPreReleaseVersionGetToOneRelatedRequest) Execute() (PrereleaseVersionResponse, *_nethttp.Response, error) {
	return r.ApiService.BuildsPreReleaseVersionGetToOneRelatedExecute(r)
}

/*
 * BuildsPreReleaseVersionGetToOneRelated Method for BuildsPreReleaseVersionGetToOneRelated
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiBuildsPreReleaseVersionGetToOneRelatedRequest
 */
func (a *BuildsApiService) BuildsPreReleaseVersionGetToOneRelated(ctx _context.Context, id string) ApiBuildsPreReleaseVersionGetToOneRelatedRequest {
	return ApiBuildsPreReleaseVersionGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return PrereleaseVersionResponse
 */
func (a *BuildsApiService) BuildsPreReleaseVersionGetToOneRelatedExecute(r ApiBuildsPreReleaseVersionGetToOneRelatedRequest) (PrereleaseVersionResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PrereleaseVersionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsPreReleaseVersionGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/preReleaseVersion"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fieldsPreReleaseVersions != nil {
		localVarQueryParams.Add("fields[preReleaseVersions]", parameterToString(*r.fieldsPreReleaseVersions, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBuildsUpdateInstanceRequest struct {
	ctx _context.Context
	ApiService *BuildsApiService
	id string
	buildUpdateRequest *BuildUpdateRequest
}

func (r ApiBuildsUpdateInstanceRequest) BuildUpdateRequest(buildUpdateRequest BuildUpdateRequest) ApiBuildsUpdateInstanceRequest {
	r.buildUpdateRequest = &buildUpdateRequest
	return r
}

func (r ApiBuildsUpdateInstanceRequest) Execute() (BuildResponse, *_nethttp.Response, error) {
	return r.ApiService.BuildsUpdateInstanceExecute(r)
}

/*
 * BuildsUpdateInstance Method for BuildsUpdateInstance
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiBuildsUpdateInstanceRequest
 */
func (a *BuildsApiService) BuildsUpdateInstance(ctx _context.Context, id string) ApiBuildsUpdateInstanceRequest {
	return ApiBuildsUpdateInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return BuildResponse
 */
func (a *BuildsApiService) BuildsUpdateInstanceExecute(r ApiBuildsUpdateInstanceRequest) (BuildResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BuildResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsUpdateInstance")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.buildUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("buildUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.buildUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
