/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// PreReleaseVersionsApiService PreReleaseVersionsApi service
type PreReleaseVersionsApiService service

type ApiPreReleaseVersionsAppGetToOneRelatedRequest struct {
	ctx _context.Context
	ApiService *PreReleaseVersionsApiService
	id string
	fieldsApps *[]string
}

func (r ApiPreReleaseVersionsAppGetToOneRelatedRequest) FieldsApps(fieldsApps []string) ApiPreReleaseVersionsAppGetToOneRelatedRequest {
	r.fieldsApps = &fieldsApps
	return r
}

func (r ApiPreReleaseVersionsAppGetToOneRelatedRequest) Execute() (AppResponse, *_nethttp.Response, error) {
	return r.ApiService.PreReleaseVersionsAppGetToOneRelatedExecute(r)
}

/*
 * PreReleaseVersionsAppGetToOneRelated Method for PreReleaseVersionsAppGetToOneRelated
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiPreReleaseVersionsAppGetToOneRelatedRequest
 */
func (a *PreReleaseVersionsApiService) PreReleaseVersionsAppGetToOneRelated(ctx _context.Context, id string) ApiPreReleaseVersionsAppGetToOneRelatedRequest {
	return ApiPreReleaseVersionsAppGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return AppResponse
 */
func (a *PreReleaseVersionsApiService) PreReleaseVersionsAppGetToOneRelatedExecute(r ApiPreReleaseVersionsAppGetToOneRelatedRequest) (AppResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AppResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PreReleaseVersionsApiService.PreReleaseVersionsAppGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/preReleaseVersions/{id}/app"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fieldsApps != nil {
		localVarQueryParams.Add("fields[apps]", parameterToString(*r.fieldsApps, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPreReleaseVersionsBuildsGetToManyRelatedRequest struct {
	ctx _context.Context
	ApiService *PreReleaseVersionsApiService
	id string
	fieldsBuilds *[]string
	limit *int32
}

func (r ApiPreReleaseVersionsBuildsGetToManyRelatedRequest) FieldsBuilds(fieldsBuilds []string) ApiPreReleaseVersionsBuildsGetToManyRelatedRequest {
	r.fieldsBuilds = &fieldsBuilds
	return r
}
func (r ApiPreReleaseVersionsBuildsGetToManyRelatedRequest) Limit(limit int32) ApiPreReleaseVersionsBuildsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

func (r ApiPreReleaseVersionsBuildsGetToManyRelatedRequest) Execute() (BuildsResponse, *_nethttp.Response, error) {
	return r.ApiService.PreReleaseVersionsBuildsGetToManyRelatedExecute(r)
}

/*
 * PreReleaseVersionsBuildsGetToManyRelated Method for PreReleaseVersionsBuildsGetToManyRelated
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiPreReleaseVersionsBuildsGetToManyRelatedRequest
 */
func (a *PreReleaseVersionsApiService) PreReleaseVersionsBuildsGetToManyRelated(ctx _context.Context, id string) ApiPreReleaseVersionsBuildsGetToManyRelatedRequest {
	return ApiPreReleaseVersionsBuildsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return BuildsResponse
 */
func (a *PreReleaseVersionsApiService) PreReleaseVersionsBuildsGetToManyRelatedExecute(r ApiPreReleaseVersionsBuildsGetToManyRelatedRequest) (BuildsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BuildsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PreReleaseVersionsApiService.PreReleaseVersionsBuildsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/preReleaseVersions/{id}/builds"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fieldsBuilds != nil {
		localVarQueryParams.Add("fields[builds]", parameterToString(*r.fieldsBuilds, "csv"))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPreReleaseVersionsGetCollectionRequest struct {
	ctx _context.Context
	ApiService *PreReleaseVersionsApiService
	filterBuildsExpired *[]string
	filterBuildsProcessingState *[]string
	filterPlatform *[]string
	filterVersion *[]string
	filterApp *[]string
	filterBuilds *[]string
	sort *[]string
	fieldsPreReleaseVersions *[]string
	limit *int32
	include *[]string
	fieldsBuilds *[]string
	fieldsApps *[]string
	limitBuilds *int32
}

func (r ApiPreReleaseVersionsGetCollectionRequest) FilterBuildsExpired(filterBuildsExpired []string) ApiPreReleaseVersionsGetCollectionRequest {
	r.filterBuildsExpired = &filterBuildsExpired
	return r
}
func (r ApiPreReleaseVersionsGetCollectionRequest) FilterBuildsProcessingState(filterBuildsProcessingState []string) ApiPreReleaseVersionsGetCollectionRequest {
	r.filterBuildsProcessingState = &filterBuildsProcessingState
	return r
}
func (r ApiPreReleaseVersionsGetCollectionRequest) FilterPlatform(filterPlatform []string) ApiPreReleaseVersionsGetCollectionRequest {
	r.filterPlatform = &filterPlatform
	return r
}
func (r ApiPreReleaseVersionsGetCollectionRequest) FilterVersion(filterVersion []string) ApiPreReleaseVersionsGetCollectionRequest {
	r.filterVersion = &filterVersion
	return r
}
func (r ApiPreReleaseVersionsGetCollectionRequest) FilterApp(filterApp []string) ApiPreReleaseVersionsGetCollectionRequest {
	r.filterApp = &filterApp
	return r
}
func (r ApiPreReleaseVersionsGetCollectionRequest) FilterBuilds(filterBuilds []string) ApiPreReleaseVersionsGetCollectionRequest {
	r.filterBuilds = &filterBuilds
	return r
}
func (r ApiPreReleaseVersionsGetCollectionRequest) Sort(sort []string) ApiPreReleaseVersionsGetCollectionRequest {
	r.sort = &sort
	return r
}
func (r ApiPreReleaseVersionsGetCollectionRequest) FieldsPreReleaseVersions(fieldsPreReleaseVersions []string) ApiPreReleaseVersionsGetCollectionRequest {
	r.fieldsPreReleaseVersions = &fieldsPreReleaseVersions
	return r
}
func (r ApiPreReleaseVersionsGetCollectionRequest) Limit(limit int32) ApiPreReleaseVersionsGetCollectionRequest {
	r.limit = &limit
	return r
}
func (r ApiPreReleaseVersionsGetCollectionRequest) Include(include []string) ApiPreReleaseVersionsGetCollectionRequest {
	r.include = &include
	return r
}
func (r ApiPreReleaseVersionsGetCollectionRequest) FieldsBuilds(fieldsBuilds []string) ApiPreReleaseVersionsGetCollectionRequest {
	r.fieldsBuilds = &fieldsBuilds
	return r
}
func (r ApiPreReleaseVersionsGetCollectionRequest) FieldsApps(fieldsApps []string) ApiPreReleaseVersionsGetCollectionRequest {
	r.fieldsApps = &fieldsApps
	return r
}
func (r ApiPreReleaseVersionsGetCollectionRequest) LimitBuilds(limitBuilds int32) ApiPreReleaseVersionsGetCollectionRequest {
	r.limitBuilds = &limitBuilds
	return r
}

func (r ApiPreReleaseVersionsGetCollectionRequest) Execute() (PreReleaseVersionsResponse, *_nethttp.Response, error) {
	return r.ApiService.PreReleaseVersionsGetCollectionExecute(r)
}

/*
 * PreReleaseVersionsGetCollection Method for PreReleaseVersionsGetCollection
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPreReleaseVersionsGetCollectionRequest
 */
func (a *PreReleaseVersionsApiService) PreReleaseVersionsGetCollection(ctx _context.Context) ApiPreReleaseVersionsGetCollectionRequest {
	return ApiPreReleaseVersionsGetCollectionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return PreReleaseVersionsResponse
 */
func (a *PreReleaseVersionsApiService) PreReleaseVersionsGetCollectionExecute(r ApiPreReleaseVersionsGetCollectionRequest) (PreReleaseVersionsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PreReleaseVersionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PreReleaseVersionsApiService.PreReleaseVersionsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/preReleaseVersions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.filterBuildsExpired != nil {
		localVarQueryParams.Add("filter[builds.expired]", parameterToString(*r.filterBuildsExpired, "csv"))
	}
	if r.filterBuildsProcessingState != nil {
		localVarQueryParams.Add("filter[builds.processingState]", parameterToString(*r.filterBuildsProcessingState, "csv"))
	}
	if r.filterPlatform != nil {
		localVarQueryParams.Add("filter[platform]", parameterToString(*r.filterPlatform, "csv"))
	}
	if r.filterVersion != nil {
		localVarQueryParams.Add("filter[version]", parameterToString(*r.filterVersion, "csv"))
	}
	if r.filterApp != nil {
		localVarQueryParams.Add("filter[app]", parameterToString(*r.filterApp, "csv"))
	}
	if r.filterBuilds != nil {
		localVarQueryParams.Add("filter[builds]", parameterToString(*r.filterBuilds, "csv"))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, "csv"))
	}
	if r.fieldsPreReleaseVersions != nil {
		localVarQueryParams.Add("fields[preReleaseVersions]", parameterToString(*r.fieldsPreReleaseVersions, "csv"))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsBuilds != nil {
		localVarQueryParams.Add("fields[builds]", parameterToString(*r.fieldsBuilds, "csv"))
	}
	if r.fieldsApps != nil {
		localVarQueryParams.Add("fields[apps]", parameterToString(*r.fieldsApps, "csv"))
	}
	if r.limitBuilds != nil {
		localVarQueryParams.Add("limit[builds]", parameterToString(*r.limitBuilds, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPreReleaseVersionsGetInstanceRequest struct {
	ctx _context.Context
	ApiService *PreReleaseVersionsApiService
	id string
	fieldsPreReleaseVersions *[]string
	include *[]string
	fieldsBuilds *[]string
	fieldsApps *[]string
	limitBuilds *int32
}

func (r ApiPreReleaseVersionsGetInstanceRequest) FieldsPreReleaseVersions(fieldsPreReleaseVersions []string) ApiPreReleaseVersionsGetInstanceRequest {
	r.fieldsPreReleaseVersions = &fieldsPreReleaseVersions
	return r
}
func (r ApiPreReleaseVersionsGetInstanceRequest) Include(include []string) ApiPreReleaseVersionsGetInstanceRequest {
	r.include = &include
	return r
}
func (r ApiPreReleaseVersionsGetInstanceRequest) FieldsBuilds(fieldsBuilds []string) ApiPreReleaseVersionsGetInstanceRequest {
	r.fieldsBuilds = &fieldsBuilds
	return r
}
func (r ApiPreReleaseVersionsGetInstanceRequest) FieldsApps(fieldsApps []string) ApiPreReleaseVersionsGetInstanceRequest {
	r.fieldsApps = &fieldsApps
	return r
}
func (r ApiPreReleaseVersionsGetInstanceRequest) LimitBuilds(limitBuilds int32) ApiPreReleaseVersionsGetInstanceRequest {
	r.limitBuilds = &limitBuilds
	return r
}

func (r ApiPreReleaseVersionsGetInstanceRequest) Execute() (PrereleaseVersionResponse, *_nethttp.Response, error) {
	return r.ApiService.PreReleaseVersionsGetInstanceExecute(r)
}

/*
 * PreReleaseVersionsGetInstance Method for PreReleaseVersionsGetInstance
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiPreReleaseVersionsGetInstanceRequest
 */
func (a *PreReleaseVersionsApiService) PreReleaseVersionsGetInstance(ctx _context.Context, id string) ApiPreReleaseVersionsGetInstanceRequest {
	return ApiPreReleaseVersionsGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return PrereleaseVersionResponse
 */
func (a *PreReleaseVersionsApiService) PreReleaseVersionsGetInstanceExecute(r ApiPreReleaseVersionsGetInstanceRequest) (PrereleaseVersionResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PrereleaseVersionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PreReleaseVersionsApiService.PreReleaseVersionsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/preReleaseVersions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fieldsPreReleaseVersions != nil {
		localVarQueryParams.Add("fields[preReleaseVersions]", parameterToString(*r.fieldsPreReleaseVersions, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsBuilds != nil {
		localVarQueryParams.Add("fields[builds]", parameterToString(*r.fieldsBuilds, "csv"))
	}
	if r.fieldsApps != nil {
		localVarQueryParams.Add("fields[apps]", parameterToString(*r.fieldsApps, "csv"))
	}
	if r.limitBuilds != nil {
		localVarQueryParams.Add("limit[builds]", parameterToString(*r.limitBuilds, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
