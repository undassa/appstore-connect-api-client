/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect

import (
	"encoding/json"
	"fmt"
)

// CertificateType the model 'CertificateType'
type CertificateType string

// List of CertificateType
const (
	IOS_DEVELOPMENT CertificateType = "IOS_DEVELOPMENT"
	IOS_DISTRIBUTION CertificateType = "IOS_DISTRIBUTION"
	MAC_APP_DISTRIBUTION CertificateType = "MAC_APP_DISTRIBUTION"
	MAC_INSTALLER_DISTRIBUTION CertificateType = "MAC_INSTALLER_DISTRIBUTION"
	MAC_APP_DEVELOPMENT CertificateType = "MAC_APP_DEVELOPMENT"
	DEVELOPER_ID_KEXT CertificateType = "DEVELOPER_ID_KEXT"
	DEVELOPER_ID_APPLICATION CertificateType = "DEVELOPER_ID_APPLICATION"
	DEVELOPMENT CertificateType = "DEVELOPMENT"
	DISTRIBUTION CertificateType = "DISTRIBUTION"
)

func (v *CertificateType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CertificateType(value)
	for _, existing := range []CertificateType{ "IOS_DEVELOPMENT", "IOS_DISTRIBUTION", "MAC_APP_DISTRIBUTION", "MAC_INSTALLER_DISTRIBUTION", "MAC_APP_DEVELOPMENT", "DEVELOPER_ID_KEXT", "DEVELOPER_ID_APPLICATION", "DEVELOPMENT", "DISTRIBUTION",   } {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CertificateType", value)
}

// Ptr returns reference to CertificateType value
func (v CertificateType) Ptr() *CertificateType {
	return &v
}

type NullableCertificateType struct {
	value *CertificateType
	isSet bool
}

func (v NullableCertificateType) Get() *CertificateType {
	return v.value
}

func (v *NullableCertificateType) Set(val *CertificateType) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateType) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateType(val *CertificateType) *NullableCertificateType {
	return &NullableCertificateType{value: val, isSet: true}
}

func (v NullableCertificateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

