/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// GameCenterEnabledVersionsApiService GameCenterEnabledVersionsApi service
type GameCenterEnabledVersionsApiService service

type ApiGameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipRequest struct {
	ctx _context.Context
	ApiService *GameCenterEnabledVersionsApiService
	id string
	gameCenterEnabledVersionCompatibleVersionsLinkagesRequest *GameCenterEnabledVersionCompatibleVersionsLinkagesRequest
}

func (r ApiGameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipRequest) GameCenterEnabledVersionCompatibleVersionsLinkagesRequest(gameCenterEnabledVersionCompatibleVersionsLinkagesRequest GameCenterEnabledVersionCompatibleVersionsLinkagesRequest) ApiGameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipRequest {
	r.gameCenterEnabledVersionCompatibleVersionsLinkagesRequest = &gameCenterEnabledVersionCompatibleVersionsLinkagesRequest
	return r
}

func (r ApiGameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipExecute(r)
}

/*
 * GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationship Method for GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationship
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiGameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipRequest
 */
func (a *GameCenterEnabledVersionsApiService) GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationship(ctx _context.Context, id string) ApiGameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipRequest {
	return ApiGameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *GameCenterEnabledVersionsApiService) GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipExecute(r ApiGameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterEnabledVersionsApiService.GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationship")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.gameCenterEnabledVersionCompatibleVersionsLinkagesRequest == nil {
		return nil, reportError("gameCenterEnabledVersionCompatibleVersionsLinkagesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gameCenterEnabledVersionCompatibleVersionsLinkagesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipRequest struct {
	ctx _context.Context
	ApiService *GameCenterEnabledVersionsApiService
	id string
	gameCenterEnabledVersionCompatibleVersionsLinkagesRequest *GameCenterEnabledVersionCompatibleVersionsLinkagesRequest
}

func (r ApiGameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipRequest) GameCenterEnabledVersionCompatibleVersionsLinkagesRequest(gameCenterEnabledVersionCompatibleVersionsLinkagesRequest GameCenterEnabledVersionCompatibleVersionsLinkagesRequest) ApiGameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipRequest {
	r.gameCenterEnabledVersionCompatibleVersionsLinkagesRequest = &gameCenterEnabledVersionCompatibleVersionsLinkagesRequest
	return r
}

func (r ApiGameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipExecute(r)
}

/*
 * GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationship Method for GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationship
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiGameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipRequest
 */
func (a *GameCenterEnabledVersionsApiService) GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationship(ctx _context.Context, id string) ApiGameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipRequest {
	return ApiGameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *GameCenterEnabledVersionsApiService) GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipExecute(r ApiGameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterEnabledVersionsApiService.GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationship")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.gameCenterEnabledVersionCompatibleVersionsLinkagesRequest == nil {
		return nil, reportError("gameCenterEnabledVersionCompatibleVersionsLinkagesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gameCenterEnabledVersionCompatibleVersionsLinkagesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedRequest struct {
	ctx _context.Context
	ApiService *GameCenterEnabledVersionsApiService
	id string
	filterPlatform *[]string
	filterVersionString *[]string
	filterApp *[]string
	filterId *[]string
	sort *[]string
	fieldsGameCenterEnabledVersions *[]string
	fieldsApps *[]string
	limit *int32
	include *[]string
}

func (r ApiGameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedRequest) FilterPlatform(filterPlatform []string) ApiGameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedRequest {
	r.filterPlatform = &filterPlatform
	return r
}
func (r ApiGameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedRequest) FilterVersionString(filterVersionString []string) ApiGameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedRequest {
	r.filterVersionString = &filterVersionString
	return r
}
func (r ApiGameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedRequest) FilterApp(filterApp []string) ApiGameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedRequest {
	r.filterApp = &filterApp
	return r
}
func (r ApiGameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedRequest) FilterId(filterId []string) ApiGameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedRequest {
	r.filterId = &filterId
	return r
}
func (r ApiGameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedRequest) Sort(sort []string) ApiGameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedRequest {
	r.sort = &sort
	return r
}
func (r ApiGameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedRequest) FieldsGameCenterEnabledVersions(fieldsGameCenterEnabledVersions []string) ApiGameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedRequest {
	r.fieldsGameCenterEnabledVersions = &fieldsGameCenterEnabledVersions
	return r
}
func (r ApiGameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedRequest) FieldsApps(fieldsApps []string) ApiGameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedRequest {
	r.fieldsApps = &fieldsApps
	return r
}
func (r ApiGameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedRequest) Limit(limit int32) ApiGameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}
func (r ApiGameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedRequest) Include(include []string) ApiGameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r ApiGameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedRequest) Execute() (GameCenterEnabledVersionsResponse, *_nethttp.Response, error) {
	return r.ApiService.GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedExecute(r)
}

/*
 * GameCenterEnabledVersionsCompatibleVersionsGetToManyRelated Method for GameCenterEnabledVersionsCompatibleVersionsGetToManyRelated
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiGameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedRequest
 */
func (a *GameCenterEnabledVersionsApiService) GameCenterEnabledVersionsCompatibleVersionsGetToManyRelated(ctx _context.Context, id string) ApiGameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedRequest {
	return ApiGameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return GameCenterEnabledVersionsResponse
 */
func (a *GameCenterEnabledVersionsApiService) GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedExecute(r ApiGameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedRequest) (GameCenterEnabledVersionsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GameCenterEnabledVersionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterEnabledVersionsApiService.GameCenterEnabledVersionsCompatibleVersionsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterEnabledVersions/{id}/compatibleVersions"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.filterPlatform != nil {
		localVarQueryParams.Add("filter[platform]", parameterToString(*r.filterPlatform, "csv"))
	}
	if r.filterVersionString != nil {
		localVarQueryParams.Add("filter[versionString]", parameterToString(*r.filterVersionString, "csv"))
	}
	if r.filterApp != nil {
		localVarQueryParams.Add("filter[app]", parameterToString(*r.filterApp, "csv"))
	}
	if r.filterId != nil {
		localVarQueryParams.Add("filter[id]", parameterToString(*r.filterId, "csv"))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, "csv"))
	}
	if r.fieldsGameCenterEnabledVersions != nil {
		localVarQueryParams.Add("fields[gameCenterEnabledVersions]", parameterToString(*r.fieldsGameCenterEnabledVersions, "csv"))
	}
	if r.fieldsApps != nil {
		localVarQueryParams.Add("fields[apps]", parameterToString(*r.fieldsApps, "csv"))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipRequest struct {
	ctx _context.Context
	ApiService *GameCenterEnabledVersionsApiService
	id string
	limit *int32
}

func (r ApiGameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipRequest) Limit(limit int32) ApiGameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipRequest {
	r.limit = &limit
	return r
}

func (r ApiGameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipRequest) Execute() (GameCenterEnabledVersionCompatibleVersionsLinkagesResponse, *_nethttp.Response, error) {
	return r.ApiService.GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipExecute(r)
}

/*
 * GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationship Method for GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationship
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiGameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipRequest
 */
func (a *GameCenterEnabledVersionsApiService) GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationship(ctx _context.Context, id string) ApiGameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipRequest {
	return ApiGameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return GameCenterEnabledVersionCompatibleVersionsLinkagesResponse
 */
func (a *GameCenterEnabledVersionsApiService) GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipExecute(r ApiGameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipRequest) (GameCenterEnabledVersionCompatibleVersionsLinkagesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GameCenterEnabledVersionCompatibleVersionsLinkagesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterEnabledVersionsApiService.GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationship")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipRequest struct {
	ctx _context.Context
	ApiService *GameCenterEnabledVersionsApiService
	id string
	gameCenterEnabledVersionCompatibleVersionsLinkagesRequest *GameCenterEnabledVersionCompatibleVersionsLinkagesRequest
}

func (r ApiGameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipRequest) GameCenterEnabledVersionCompatibleVersionsLinkagesRequest(gameCenterEnabledVersionCompatibleVersionsLinkagesRequest GameCenterEnabledVersionCompatibleVersionsLinkagesRequest) ApiGameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipRequest {
	r.gameCenterEnabledVersionCompatibleVersionsLinkagesRequest = &gameCenterEnabledVersionCompatibleVersionsLinkagesRequest
	return r
}

func (r ApiGameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipExecute(r)
}

/*
 * GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationship Method for GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationship
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiGameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipRequest
 */
func (a *GameCenterEnabledVersionsApiService) GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationship(ctx _context.Context, id string) ApiGameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipRequest {
	return ApiGameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *GameCenterEnabledVersionsApiService) GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipExecute(r ApiGameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterEnabledVersionsApiService.GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationship")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.gameCenterEnabledVersionCompatibleVersionsLinkagesRequest == nil {
		return nil, reportError("gameCenterEnabledVersionCompatibleVersionsLinkagesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gameCenterEnabledVersionCompatibleVersionsLinkagesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
