/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect

import (
	"encoding/json"
	"fmt"
)

// ExternalBetaState the model 'ExternalBetaState'
type ExternalBetaState string

// List of ExternalBetaState
const (
	READY_FOR_BETA_SUBMISSION ExternalBetaState = "READY_FOR_BETA_SUBMISSION"
	WAITING_FOR_BETA_REVIEW   ExternalBetaState = "WAITING_FOR_BETA_REVIEW"
	IN_BETA_REVIEW            ExternalBetaState = "IN_BETA_REVIEW"
	BETA_REJECTED             ExternalBetaState = "BETA_REJECTED"
	BETA_APPROVED             ExternalBetaState = "BETA_APPROVED"
)

func (v *ExternalBetaState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExternalBetaState(value)
	for _, existing := range []ExternalBetaState{"PROCESSING", "PROCESSING_EXCEPTION", "MISSING_EXPORT_COMPLIANCE", "READY_FOR_BETA_TESTING", "IN_BETA_TESTING", "EXPIRED", "READY_FOR_BETA_SUBMISSION", "IN_EXPORT_COMPLIANCE_REVIEW", "WAITING_FOR_BETA_REVIEW", "IN_BETA_REVIEW", "BETA_REJECTED", "BETA_APPROVED"} {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExternalBetaState", value)
}

// Ptr returns reference to ExternalBetaState value
func (v ExternalBetaState) Ptr() *ExternalBetaState {
	return &v
}

type NullableExternalBetaState struct {
	value *ExternalBetaState
	isSet bool
}

func (v NullableExternalBetaState) Get() *ExternalBetaState {
	return v.value
}

func (v *NullableExternalBetaState) Set(val *ExternalBetaState) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalBetaState) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalBetaState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalBetaState(val *ExternalBetaState) *NullableExternalBetaState {
	return &NullableExternalBetaState{value: val, isSet: true}
}

func (v NullableExternalBetaState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalBetaState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
