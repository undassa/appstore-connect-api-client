/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect

import (
	"encoding/json"
)

// AppInfoRelationships struct for AppInfoRelationships
type AppInfoRelationships struct {
	App *AppEncryptionDeclarationRelationshipsApp `json:"app,omitempty"`
	AppInfoLocalizations *AppInfoRelationshipsAppInfoLocalizations `json:"appInfoLocalizations,omitempty"`
	PrimaryCategory *AppCategoryRelationshipsParent `json:"primaryCategory,omitempty"`
	PrimarySubcategoryOne *AppCategoryRelationshipsParent `json:"primarySubcategoryOne,omitempty"`
	PrimarySubcategoryTwo *AppCategoryRelationshipsParent `json:"primarySubcategoryTwo,omitempty"`
	SecondaryCategory *AppCategoryRelationshipsParent `json:"secondaryCategory,omitempty"`
	SecondarySubcategoryOne *AppCategoryRelationshipsParent `json:"secondarySubcategoryOne,omitempty"`
	SecondarySubcategoryTwo *AppCategoryRelationshipsParent `json:"secondarySubcategoryTwo,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AppInfoRelationships AppInfoRelationships

// NewAppInfoRelationships instantiates a new AppInfoRelationships object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppInfoRelationships() *AppInfoRelationships {
	this := AppInfoRelationships{}
	return &this
}

// NewAppInfoRelationshipsWithDefaults instantiates a new AppInfoRelationships object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppInfoRelationshipsWithDefaults() *AppInfoRelationships {
	this := AppInfoRelationships{}
	return &this
}

// GetApp returns the App field value if set, zero value otherwise.
func (o *AppInfoRelationships) GetApp() AppEncryptionDeclarationRelationshipsApp {
	if o == nil || o.App == nil {
		var ret AppEncryptionDeclarationRelationshipsApp
		return ret
	}
	return *o.App
}

// GetAppOk returns a tuple with the App field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppInfoRelationships) GetAppOk() (*AppEncryptionDeclarationRelationshipsApp, bool) {
	if o == nil || o.App == nil {
		return nil, false
	}
	return o.App, true
}

// HasApp returns a boolean if a field has been set.
func (o *AppInfoRelationships) HasApp() bool {
	if o != nil && o.App != nil {
		return true
	}

	return false
}

// SetApp gets a reference to the given AppEncryptionDeclarationRelationshipsApp and assigns it to the App field.
func (o *AppInfoRelationships) SetApp(v AppEncryptionDeclarationRelationshipsApp) {
	o.App = &v
}

// GetAppInfoLocalizations returns the AppInfoLocalizations field value if set, zero value otherwise.
func (o *AppInfoRelationships) GetAppInfoLocalizations() AppInfoRelationshipsAppInfoLocalizations {
	if o == nil || o.AppInfoLocalizations == nil {
		var ret AppInfoRelationshipsAppInfoLocalizations
		return ret
	}
	return *o.AppInfoLocalizations
}

// GetAppInfoLocalizationsOk returns a tuple with the AppInfoLocalizations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppInfoRelationships) GetAppInfoLocalizationsOk() (*AppInfoRelationshipsAppInfoLocalizations, bool) {
	if o == nil || o.AppInfoLocalizations == nil {
		return nil, false
	}
	return o.AppInfoLocalizations, true
}

// HasAppInfoLocalizations returns a boolean if a field has been set.
func (o *AppInfoRelationships) HasAppInfoLocalizations() bool {
	if o != nil && o.AppInfoLocalizations != nil {
		return true
	}

	return false
}

// SetAppInfoLocalizations gets a reference to the given AppInfoRelationshipsAppInfoLocalizations and assigns it to the AppInfoLocalizations field.
func (o *AppInfoRelationships) SetAppInfoLocalizations(v AppInfoRelationshipsAppInfoLocalizations) {
	o.AppInfoLocalizations = &v
}

// GetPrimaryCategory returns the PrimaryCategory field value if set, zero value otherwise.
func (o *AppInfoRelationships) GetPrimaryCategory() AppCategoryRelationshipsParent {
	if o == nil || o.PrimaryCategory == nil {
		var ret AppCategoryRelationshipsParent
		return ret
	}
	return *o.PrimaryCategory
}

// GetPrimaryCategoryOk returns a tuple with the PrimaryCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppInfoRelationships) GetPrimaryCategoryOk() (*AppCategoryRelationshipsParent, bool) {
	if o == nil || o.PrimaryCategory == nil {
		return nil, false
	}
	return o.PrimaryCategory, true
}

// HasPrimaryCategory returns a boolean if a field has been set.
func (o *AppInfoRelationships) HasPrimaryCategory() bool {
	if o != nil && o.PrimaryCategory != nil {
		return true
	}

	return false
}

// SetPrimaryCategory gets a reference to the given AppCategoryRelationshipsParent and assigns it to the PrimaryCategory field.
func (o *AppInfoRelationships) SetPrimaryCategory(v AppCategoryRelationshipsParent) {
	o.PrimaryCategory = &v
}

// GetPrimarySubcategoryOne returns the PrimarySubcategoryOne field value if set, zero value otherwise.
func (o *AppInfoRelationships) GetPrimarySubcategoryOne() AppCategoryRelationshipsParent {
	if o == nil || o.PrimarySubcategoryOne == nil {
		var ret AppCategoryRelationshipsParent
		return ret
	}
	return *o.PrimarySubcategoryOne
}

// GetPrimarySubcategoryOneOk returns a tuple with the PrimarySubcategoryOne field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppInfoRelationships) GetPrimarySubcategoryOneOk() (*AppCategoryRelationshipsParent, bool) {
	if o == nil || o.PrimarySubcategoryOne == nil {
		return nil, false
	}
	return o.PrimarySubcategoryOne, true
}

// HasPrimarySubcategoryOne returns a boolean if a field has been set.
func (o *AppInfoRelationships) HasPrimarySubcategoryOne() bool {
	if o != nil && o.PrimarySubcategoryOne != nil {
		return true
	}

	return false
}

// SetPrimarySubcategoryOne gets a reference to the given AppCategoryRelationshipsParent and assigns it to the PrimarySubcategoryOne field.
func (o *AppInfoRelationships) SetPrimarySubcategoryOne(v AppCategoryRelationshipsParent) {
	o.PrimarySubcategoryOne = &v
}

// GetPrimarySubcategoryTwo returns the PrimarySubcategoryTwo field value if set, zero value otherwise.
func (o *AppInfoRelationships) GetPrimarySubcategoryTwo() AppCategoryRelationshipsParent {
	if o == nil || o.PrimarySubcategoryTwo == nil {
		var ret AppCategoryRelationshipsParent
		return ret
	}
	return *o.PrimarySubcategoryTwo
}

// GetPrimarySubcategoryTwoOk returns a tuple with the PrimarySubcategoryTwo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppInfoRelationships) GetPrimarySubcategoryTwoOk() (*AppCategoryRelationshipsParent, bool) {
	if o == nil || o.PrimarySubcategoryTwo == nil {
		return nil, false
	}
	return o.PrimarySubcategoryTwo, true
}

// HasPrimarySubcategoryTwo returns a boolean if a field has been set.
func (o *AppInfoRelationships) HasPrimarySubcategoryTwo() bool {
	if o != nil && o.PrimarySubcategoryTwo != nil {
		return true
	}

	return false
}

// SetPrimarySubcategoryTwo gets a reference to the given AppCategoryRelationshipsParent and assigns it to the PrimarySubcategoryTwo field.
func (o *AppInfoRelationships) SetPrimarySubcategoryTwo(v AppCategoryRelationshipsParent) {
	o.PrimarySubcategoryTwo = &v
}

// GetSecondaryCategory returns the SecondaryCategory field value if set, zero value otherwise.
func (o *AppInfoRelationships) GetSecondaryCategory() AppCategoryRelationshipsParent {
	if o == nil || o.SecondaryCategory == nil {
		var ret AppCategoryRelationshipsParent
		return ret
	}
	return *o.SecondaryCategory
}

// GetSecondaryCategoryOk returns a tuple with the SecondaryCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppInfoRelationships) GetSecondaryCategoryOk() (*AppCategoryRelationshipsParent, bool) {
	if o == nil || o.SecondaryCategory == nil {
		return nil, false
	}
	return o.SecondaryCategory, true
}

// HasSecondaryCategory returns a boolean if a field has been set.
func (o *AppInfoRelationships) HasSecondaryCategory() bool {
	if o != nil && o.SecondaryCategory != nil {
		return true
	}

	return false
}

// SetSecondaryCategory gets a reference to the given AppCategoryRelationshipsParent and assigns it to the SecondaryCategory field.
func (o *AppInfoRelationships) SetSecondaryCategory(v AppCategoryRelationshipsParent) {
	o.SecondaryCategory = &v
}

// GetSecondarySubcategoryOne returns the SecondarySubcategoryOne field value if set, zero value otherwise.
func (o *AppInfoRelationships) GetSecondarySubcategoryOne() AppCategoryRelationshipsParent {
	if o == nil || o.SecondarySubcategoryOne == nil {
		var ret AppCategoryRelationshipsParent
		return ret
	}
	return *o.SecondarySubcategoryOne
}

// GetSecondarySubcategoryOneOk returns a tuple with the SecondarySubcategoryOne field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppInfoRelationships) GetSecondarySubcategoryOneOk() (*AppCategoryRelationshipsParent, bool) {
	if o == nil || o.SecondarySubcategoryOne == nil {
		return nil, false
	}
	return o.SecondarySubcategoryOne, true
}

// HasSecondarySubcategoryOne returns a boolean if a field has been set.
func (o *AppInfoRelationships) HasSecondarySubcategoryOne() bool {
	if o != nil && o.SecondarySubcategoryOne != nil {
		return true
	}

	return false
}

// SetSecondarySubcategoryOne gets a reference to the given AppCategoryRelationshipsParent and assigns it to the SecondarySubcategoryOne field.
func (o *AppInfoRelationships) SetSecondarySubcategoryOne(v AppCategoryRelationshipsParent) {
	o.SecondarySubcategoryOne = &v
}

// GetSecondarySubcategoryTwo returns the SecondarySubcategoryTwo field value if set, zero value otherwise.
func (o *AppInfoRelationships) GetSecondarySubcategoryTwo() AppCategoryRelationshipsParent {
	if o == nil || o.SecondarySubcategoryTwo == nil {
		var ret AppCategoryRelationshipsParent
		return ret
	}
	return *o.SecondarySubcategoryTwo
}

// GetSecondarySubcategoryTwoOk returns a tuple with the SecondarySubcategoryTwo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppInfoRelationships) GetSecondarySubcategoryTwoOk() (*AppCategoryRelationshipsParent, bool) {
	if o == nil || o.SecondarySubcategoryTwo == nil {
		return nil, false
	}
	return o.SecondarySubcategoryTwo, true
}

// HasSecondarySubcategoryTwo returns a boolean if a field has been set.
func (o *AppInfoRelationships) HasSecondarySubcategoryTwo() bool {
	if o != nil && o.SecondarySubcategoryTwo != nil {
		return true
	}

	return false
}

// SetSecondarySubcategoryTwo gets a reference to the given AppCategoryRelationshipsParent and assigns it to the SecondarySubcategoryTwo field.
func (o *AppInfoRelationships) SetSecondarySubcategoryTwo(v AppCategoryRelationshipsParent) {
	o.SecondarySubcategoryTwo = &v
}

func (o AppInfoRelationships) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.App != nil {
		toSerialize["app"] = o.App
	}
	if o.AppInfoLocalizations != nil {
		toSerialize["appInfoLocalizations"] = o.AppInfoLocalizations
	}
	if o.PrimaryCategory != nil {
		toSerialize["primaryCategory"] = o.PrimaryCategory
	}
	if o.PrimarySubcategoryOne != nil {
		toSerialize["primarySubcategoryOne"] = o.PrimarySubcategoryOne
	}
	if o.PrimarySubcategoryTwo != nil {
		toSerialize["primarySubcategoryTwo"] = o.PrimarySubcategoryTwo
	}
	if o.SecondaryCategory != nil {
		toSerialize["secondaryCategory"] = o.SecondaryCategory
	}
	if o.SecondarySubcategoryOne != nil {
		toSerialize["secondarySubcategoryOne"] = o.SecondarySubcategoryOne
	}
	if o.SecondarySubcategoryTwo != nil {
		toSerialize["secondarySubcategoryTwo"] = o.SecondarySubcategoryTwo
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *AppInfoRelationships) UnmarshalJSON(bytes []byte) (err error) {
	varAppInfoRelationships := _AppInfoRelationships{}

	if err = json.Unmarshal(bytes, &varAppInfoRelationships); err == nil {
		*o = AppInfoRelationships(varAppInfoRelationships)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "app")
		delete(additionalProperties, "appInfoLocalizations")
		delete(additionalProperties, "primaryCategory")
		delete(additionalProperties, "primarySubcategoryOne")
		delete(additionalProperties, "primarySubcategoryTwo")
		delete(additionalProperties, "secondaryCategory")
		delete(additionalProperties, "secondarySubcategoryOne")
		delete(additionalProperties, "secondarySubcategoryTwo")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAppInfoRelationships struct {
	value *AppInfoRelationships
	isSet bool
}

func (v NullableAppInfoRelationships) Get() *AppInfoRelationships {
	return v.value
}

func (v *NullableAppInfoRelationships) Set(val *AppInfoRelationships) {
	v.value = val
	v.isSet = true
}

func (v NullableAppInfoRelationships) IsSet() bool {
	return v.isSet
}

func (v *NullableAppInfoRelationships) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppInfoRelationships(val *AppInfoRelationships) *NullableAppInfoRelationships {
	return &NullableAppInfoRelationships{value: val, isSet: true}
}

func (v NullableAppInfoRelationships) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppInfoRelationships) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


