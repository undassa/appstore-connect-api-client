/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// AppScreenshotSetsApiService AppScreenshotSetsApi service
type AppScreenshotSetsApiService service

type ApiAppScreenshotSetsAppScreenshotsGetToManyRelatedRequest struct {
	ctx _context.Context
	ApiService *AppScreenshotSetsApiService
	id string
	fieldsAppScreenshotSets *[]string
	fieldsAppScreenshots *[]string
	limit *int32
	include *[]string
}

func (r ApiAppScreenshotSetsAppScreenshotsGetToManyRelatedRequest) FieldsAppScreenshotSets(fieldsAppScreenshotSets []string) ApiAppScreenshotSetsAppScreenshotsGetToManyRelatedRequest {
	r.fieldsAppScreenshotSets = &fieldsAppScreenshotSets
	return r
}
func (r ApiAppScreenshotSetsAppScreenshotsGetToManyRelatedRequest) FieldsAppScreenshots(fieldsAppScreenshots []string) ApiAppScreenshotSetsAppScreenshotsGetToManyRelatedRequest {
	r.fieldsAppScreenshots = &fieldsAppScreenshots
	return r
}
func (r ApiAppScreenshotSetsAppScreenshotsGetToManyRelatedRequest) Limit(limit int32) ApiAppScreenshotSetsAppScreenshotsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}
func (r ApiAppScreenshotSetsAppScreenshotsGetToManyRelatedRequest) Include(include []string) ApiAppScreenshotSetsAppScreenshotsGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r ApiAppScreenshotSetsAppScreenshotsGetToManyRelatedRequest) Execute() (AppScreenshotsResponse, *_nethttp.Response, error) {
	return r.ApiService.AppScreenshotSetsAppScreenshotsGetToManyRelatedExecute(r)
}

/*
 * AppScreenshotSetsAppScreenshotsGetToManyRelated Method for AppScreenshotSetsAppScreenshotsGetToManyRelated
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiAppScreenshotSetsAppScreenshotsGetToManyRelatedRequest
 */
func (a *AppScreenshotSetsApiService) AppScreenshotSetsAppScreenshotsGetToManyRelated(ctx _context.Context, id string) ApiAppScreenshotSetsAppScreenshotsGetToManyRelatedRequest {
	return ApiAppScreenshotSetsAppScreenshotsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return AppScreenshotsResponse
 */
func (a *AppScreenshotSetsApiService) AppScreenshotSetsAppScreenshotsGetToManyRelatedExecute(r ApiAppScreenshotSetsAppScreenshotsGetToManyRelatedRequest) (AppScreenshotsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AppScreenshotsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppScreenshotSetsApiService.AppScreenshotSetsAppScreenshotsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appScreenshotSets/{id}/appScreenshots"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fieldsAppScreenshotSets != nil {
		localVarQueryParams.Add("fields[appScreenshotSets]", parameterToString(*r.fieldsAppScreenshotSets, "csv"))
	}
	if r.fieldsAppScreenshots != nil {
		localVarQueryParams.Add("fields[appScreenshots]", parameterToString(*r.fieldsAppScreenshots, "csv"))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppScreenshotSetsAppScreenshotsGetToManyRelationshipRequest struct {
	ctx _context.Context
	ApiService *AppScreenshotSetsApiService
	id string
	limit *int32
}

func (r ApiAppScreenshotSetsAppScreenshotsGetToManyRelationshipRequest) Limit(limit int32) ApiAppScreenshotSetsAppScreenshotsGetToManyRelationshipRequest {
	r.limit = &limit
	return r
}

func (r ApiAppScreenshotSetsAppScreenshotsGetToManyRelationshipRequest) Execute() (AppScreenshotSetAppScreenshotsLinkagesResponse, *_nethttp.Response, error) {
	return r.ApiService.AppScreenshotSetsAppScreenshotsGetToManyRelationshipExecute(r)
}

/*
 * AppScreenshotSetsAppScreenshotsGetToManyRelationship Method for AppScreenshotSetsAppScreenshotsGetToManyRelationship
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiAppScreenshotSetsAppScreenshotsGetToManyRelationshipRequest
 */
func (a *AppScreenshotSetsApiService) AppScreenshotSetsAppScreenshotsGetToManyRelationship(ctx _context.Context, id string) ApiAppScreenshotSetsAppScreenshotsGetToManyRelationshipRequest {
	return ApiAppScreenshotSetsAppScreenshotsGetToManyRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return AppScreenshotSetAppScreenshotsLinkagesResponse
 */
func (a *AppScreenshotSetsApiService) AppScreenshotSetsAppScreenshotsGetToManyRelationshipExecute(r ApiAppScreenshotSetsAppScreenshotsGetToManyRelationshipRequest) (AppScreenshotSetAppScreenshotsLinkagesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AppScreenshotSetAppScreenshotsLinkagesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppScreenshotSetsApiService.AppScreenshotSetsAppScreenshotsGetToManyRelationship")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appScreenshotSets/{id}/relationships/appScreenshots"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppScreenshotSetsAppScreenshotsReplaceToManyRelationshipRequest struct {
	ctx _context.Context
	ApiService *AppScreenshotSetsApiService
	id string
	appScreenshotSetAppScreenshotsLinkagesRequest *AppScreenshotSetAppScreenshotsLinkagesRequest
}

func (r ApiAppScreenshotSetsAppScreenshotsReplaceToManyRelationshipRequest) AppScreenshotSetAppScreenshotsLinkagesRequest(appScreenshotSetAppScreenshotsLinkagesRequest AppScreenshotSetAppScreenshotsLinkagesRequest) ApiAppScreenshotSetsAppScreenshotsReplaceToManyRelationshipRequest {
	r.appScreenshotSetAppScreenshotsLinkagesRequest = &appScreenshotSetAppScreenshotsLinkagesRequest
	return r
}

func (r ApiAppScreenshotSetsAppScreenshotsReplaceToManyRelationshipRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipExecute(r)
}

/*
 * AppScreenshotSetsAppScreenshotsReplaceToManyRelationship Method for AppScreenshotSetsAppScreenshotsReplaceToManyRelationship
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiAppScreenshotSetsAppScreenshotsReplaceToManyRelationshipRequest
 */
func (a *AppScreenshotSetsApiService) AppScreenshotSetsAppScreenshotsReplaceToManyRelationship(ctx _context.Context, id string) ApiAppScreenshotSetsAppScreenshotsReplaceToManyRelationshipRequest {
	return ApiAppScreenshotSetsAppScreenshotsReplaceToManyRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *AppScreenshotSetsApiService) AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipExecute(r ApiAppScreenshotSetsAppScreenshotsReplaceToManyRelationshipRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppScreenshotSetsApiService.AppScreenshotSetsAppScreenshotsReplaceToManyRelationship")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appScreenshotSets/{id}/relationships/appScreenshots"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.appScreenshotSetAppScreenshotsLinkagesRequest == nil {
		return nil, reportError("appScreenshotSetAppScreenshotsLinkagesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appScreenshotSetAppScreenshotsLinkagesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAppScreenshotSetsCreateInstanceRequest struct {
	ctx _context.Context
	ApiService *AppScreenshotSetsApiService
	appScreenshotSetCreateRequest *AppScreenshotSetCreateRequest
}

func (r ApiAppScreenshotSetsCreateInstanceRequest) AppScreenshotSetCreateRequest(appScreenshotSetCreateRequest AppScreenshotSetCreateRequest) ApiAppScreenshotSetsCreateInstanceRequest {
	r.appScreenshotSetCreateRequest = &appScreenshotSetCreateRequest
	return r
}

func (r ApiAppScreenshotSetsCreateInstanceRequest) Execute() (AppScreenshotSetResponse, *_nethttp.Response, error) {
	return r.ApiService.AppScreenshotSetsCreateInstanceExecute(r)
}

/*
 * AppScreenshotSetsCreateInstance Method for AppScreenshotSetsCreateInstance
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiAppScreenshotSetsCreateInstanceRequest
 */
func (a *AppScreenshotSetsApiService) AppScreenshotSetsCreateInstance(ctx _context.Context) ApiAppScreenshotSetsCreateInstanceRequest {
	return ApiAppScreenshotSetsCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return AppScreenshotSetResponse
 */
func (a *AppScreenshotSetsApiService) AppScreenshotSetsCreateInstanceExecute(r ApiAppScreenshotSetsCreateInstanceRequest) (AppScreenshotSetResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AppScreenshotSetResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppScreenshotSetsApiService.AppScreenshotSetsCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appScreenshotSets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.appScreenshotSetCreateRequest == nil {
		return localVarReturnValue, nil, reportError("appScreenshotSetCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appScreenshotSetCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppScreenshotSetsDeleteInstanceRequest struct {
	ctx _context.Context
	ApiService *AppScreenshotSetsApiService
	id string
}


func (r ApiAppScreenshotSetsDeleteInstanceRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AppScreenshotSetsDeleteInstanceExecute(r)
}

/*
 * AppScreenshotSetsDeleteInstance Method for AppScreenshotSetsDeleteInstance
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiAppScreenshotSetsDeleteInstanceRequest
 */
func (a *AppScreenshotSetsApiService) AppScreenshotSetsDeleteInstance(ctx _context.Context, id string) ApiAppScreenshotSetsDeleteInstanceRequest {
	return ApiAppScreenshotSetsDeleteInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *AppScreenshotSetsApiService) AppScreenshotSetsDeleteInstanceExecute(r ApiAppScreenshotSetsDeleteInstanceRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppScreenshotSetsApiService.AppScreenshotSetsDeleteInstance")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appScreenshotSets/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAppScreenshotSetsGetInstanceRequest struct {
	ctx _context.Context
	ApiService *AppScreenshotSetsApiService
	id string
	fieldsAppScreenshotSets *[]string
	include *[]string
	fieldsAppScreenshots *[]string
	limitAppScreenshots *int32
}

func (r ApiAppScreenshotSetsGetInstanceRequest) FieldsAppScreenshotSets(fieldsAppScreenshotSets []string) ApiAppScreenshotSetsGetInstanceRequest {
	r.fieldsAppScreenshotSets = &fieldsAppScreenshotSets
	return r
}
func (r ApiAppScreenshotSetsGetInstanceRequest) Include(include []string) ApiAppScreenshotSetsGetInstanceRequest {
	r.include = &include
	return r
}
func (r ApiAppScreenshotSetsGetInstanceRequest) FieldsAppScreenshots(fieldsAppScreenshots []string) ApiAppScreenshotSetsGetInstanceRequest {
	r.fieldsAppScreenshots = &fieldsAppScreenshots
	return r
}
func (r ApiAppScreenshotSetsGetInstanceRequest) LimitAppScreenshots(limitAppScreenshots int32) ApiAppScreenshotSetsGetInstanceRequest {
	r.limitAppScreenshots = &limitAppScreenshots
	return r
}

func (r ApiAppScreenshotSetsGetInstanceRequest) Execute() (AppScreenshotSetResponse, *_nethttp.Response, error) {
	return r.ApiService.AppScreenshotSetsGetInstanceExecute(r)
}

/*
 * AppScreenshotSetsGetInstance Method for AppScreenshotSetsGetInstance
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiAppScreenshotSetsGetInstanceRequest
 */
func (a *AppScreenshotSetsApiService) AppScreenshotSetsGetInstance(ctx _context.Context, id string) ApiAppScreenshotSetsGetInstanceRequest {
	return ApiAppScreenshotSetsGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return AppScreenshotSetResponse
 */
func (a *AppScreenshotSetsApiService) AppScreenshotSetsGetInstanceExecute(r ApiAppScreenshotSetsGetInstanceRequest) (AppScreenshotSetResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AppScreenshotSetResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppScreenshotSetsApiService.AppScreenshotSetsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appScreenshotSets/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fieldsAppScreenshotSets != nil {
		localVarQueryParams.Add("fields[appScreenshotSets]", parameterToString(*r.fieldsAppScreenshotSets, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsAppScreenshots != nil {
		localVarQueryParams.Add("fields[appScreenshots]", parameterToString(*r.fieldsAppScreenshots, "csv"))
	}
	if r.limitAppScreenshots != nil {
		localVarQueryParams.Add("limit[appScreenshots]", parameterToString(*r.limitAppScreenshots, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
