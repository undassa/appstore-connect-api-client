/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect

import (
	"encoding/json"
	"time"
)

// CertificateAttributes struct for CertificateAttributes
type CertificateAttributes struct {
	Name *string `json:"name,omitempty"`
	CertificateType *CertificateType `json:"certificateType,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	SerialNumber *string `json:"serialNumber,omitempty"`
	Platform *BundleIdPlatform `json:"platform,omitempty"`
	ExpirationDate *time.Time `json:"expirationDate,omitempty"`
	CertificateContent *string `json:"certificateContent,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CertificateAttributes CertificateAttributes

// NewCertificateAttributes instantiates a new CertificateAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateAttributes() *CertificateAttributes {
	this := CertificateAttributes{}
	return &this
}

// NewCertificateAttributesWithDefaults instantiates a new CertificateAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateAttributesWithDefaults() *CertificateAttributes {
	this := CertificateAttributes{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CertificateAttributes) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAttributes) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CertificateAttributes) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CertificateAttributes) SetName(v string) {
	o.Name = &v
}

// GetCertificateType returns the CertificateType field value if set, zero value otherwise.
func (o *CertificateAttributes) GetCertificateType() CertificateType {
	if o == nil || o.CertificateType == nil {
		var ret CertificateType
		return ret
	}
	return *o.CertificateType
}

// GetCertificateTypeOk returns a tuple with the CertificateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAttributes) GetCertificateTypeOk() (*CertificateType, bool) {
	if o == nil || o.CertificateType == nil {
		return nil, false
	}
	return o.CertificateType, true
}

// HasCertificateType returns a boolean if a field has been set.
func (o *CertificateAttributes) HasCertificateType() bool {
	if o != nil && o.CertificateType != nil {
		return true
	}

	return false
}

// SetCertificateType gets a reference to the given CertificateType and assigns it to the CertificateType field.
func (o *CertificateAttributes) SetCertificateType(v CertificateType) {
	o.CertificateType = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *CertificateAttributes) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAttributes) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *CertificateAttributes) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *CertificateAttributes) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *CertificateAttributes) GetSerialNumber() string {
	if o == nil || o.SerialNumber == nil {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAttributes) GetSerialNumberOk() (*string, bool) {
	if o == nil || o.SerialNumber == nil {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *CertificateAttributes) HasSerialNumber() bool {
	if o != nil && o.SerialNumber != nil {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *CertificateAttributes) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetPlatform returns the Platform field value if set, zero value otherwise.
func (o *CertificateAttributes) GetPlatform() BundleIdPlatform {
	if o == nil || o.Platform == nil {
		var ret BundleIdPlatform
		return ret
	}
	return *o.Platform
}

// GetPlatformOk returns a tuple with the Platform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAttributes) GetPlatformOk() (*BundleIdPlatform, bool) {
	if o == nil || o.Platform == nil {
		return nil, false
	}
	return o.Platform, true
}

// HasPlatform returns a boolean if a field has been set.
func (o *CertificateAttributes) HasPlatform() bool {
	if o != nil && o.Platform != nil {
		return true
	}

	return false
}

// SetPlatform gets a reference to the given BundleIdPlatform and assigns it to the Platform field.
func (o *CertificateAttributes) SetPlatform(v BundleIdPlatform) {
	o.Platform = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *CertificateAttributes) GetExpirationDate() time.Time {
	if o == nil || o.ExpirationDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAttributes) GetExpirationDateOk() (*time.Time, bool) {
	if o == nil || o.ExpirationDate == nil {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *CertificateAttributes) HasExpirationDate() bool {
	if o != nil && o.ExpirationDate != nil {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given time.Time and assigns it to the ExpirationDate field.
func (o *CertificateAttributes) SetExpirationDate(v time.Time) {
	o.ExpirationDate = &v
}

// GetCertificateContent returns the CertificateContent field value if set, zero value otherwise.
func (o *CertificateAttributes) GetCertificateContent() string {
	if o == nil || o.CertificateContent == nil {
		var ret string
		return ret
	}
	return *o.CertificateContent
}

// GetCertificateContentOk returns a tuple with the CertificateContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateAttributes) GetCertificateContentOk() (*string, bool) {
	if o == nil || o.CertificateContent == nil {
		return nil, false
	}
	return o.CertificateContent, true
}

// HasCertificateContent returns a boolean if a field has been set.
func (o *CertificateAttributes) HasCertificateContent() bool {
	if o != nil && o.CertificateContent != nil {
		return true
	}

	return false
}

// SetCertificateContent gets a reference to the given string and assigns it to the CertificateContent field.
func (o *CertificateAttributes) SetCertificateContent(v string) {
	o.CertificateContent = &v
}

func (o CertificateAttributes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.CertificateType != nil {
		toSerialize["certificateType"] = o.CertificateType
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.SerialNumber != nil {
		toSerialize["serialNumber"] = o.SerialNumber
	}
	if o.Platform != nil {
		toSerialize["platform"] = o.Platform
	}
	if o.ExpirationDate != nil {
		toSerialize["expirationDate"] = o.ExpirationDate
	}
	if o.CertificateContent != nil {
		toSerialize["certificateContent"] = o.CertificateContent
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CertificateAttributes) UnmarshalJSON(bytes []byte) (err error) {
	varCertificateAttributes := _CertificateAttributes{}

	if err = json.Unmarshal(bytes, &varCertificateAttributes); err == nil {
		*o = CertificateAttributes(varCertificateAttributes)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "certificateType")
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "serialNumber")
		delete(additionalProperties, "platform")
		delete(additionalProperties, "expirationDate")
		delete(additionalProperties, "certificateContent")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCertificateAttributes struct {
	value *CertificateAttributes
	isSet bool
}

func (v NullableCertificateAttributes) Get() *CertificateAttributes {
	return v.value
}

func (v *NullableCertificateAttributes) Set(val *CertificateAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateAttributes(val *CertificateAttributes) *NullableCertificateAttributes {
	return &NullableCertificateAttributes{value: val, isSet: true}
}

func (v NullableCertificateAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


