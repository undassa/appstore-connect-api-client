/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// ProfilesApiService ProfilesApi service
type ProfilesApiService service

type ApiProfilesBundleIdGetToOneRelatedRequest struct {
	ctx _context.Context
	ApiService *ProfilesApiService
	id string
	fieldsBundleIds *[]string
}

func (r ApiProfilesBundleIdGetToOneRelatedRequest) FieldsBundleIds(fieldsBundleIds []string) ApiProfilesBundleIdGetToOneRelatedRequest {
	r.fieldsBundleIds = &fieldsBundleIds
	return r
}

func (r ApiProfilesBundleIdGetToOneRelatedRequest) Execute() (BundleIdResponse, *_nethttp.Response, error) {
	return r.ApiService.ProfilesBundleIdGetToOneRelatedExecute(r)
}

/*
 * ProfilesBundleIdGetToOneRelated Method for ProfilesBundleIdGetToOneRelated
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiProfilesBundleIdGetToOneRelatedRequest
 */
func (a *ProfilesApiService) ProfilesBundleIdGetToOneRelated(ctx _context.Context, id string) ApiProfilesBundleIdGetToOneRelatedRequest {
	return ApiProfilesBundleIdGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return BundleIdResponse
 */
func (a *ProfilesApiService) ProfilesBundleIdGetToOneRelatedExecute(r ApiProfilesBundleIdGetToOneRelatedRequest) (BundleIdResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BundleIdResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfilesApiService.ProfilesBundleIdGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/profiles/{id}/bundleId"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fieldsBundleIds != nil {
		localVarQueryParams.Add("fields[bundleIds]", parameterToString(*r.fieldsBundleIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProfilesCertificatesGetToManyRelatedRequest struct {
	ctx _context.Context
	ApiService *ProfilesApiService
	id string
	fieldsCertificates *[]string
	limit *int32
}

func (r ApiProfilesCertificatesGetToManyRelatedRequest) FieldsCertificates(fieldsCertificates []string) ApiProfilesCertificatesGetToManyRelatedRequest {
	r.fieldsCertificates = &fieldsCertificates
	return r
}
func (r ApiProfilesCertificatesGetToManyRelatedRequest) Limit(limit int32) ApiProfilesCertificatesGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

func (r ApiProfilesCertificatesGetToManyRelatedRequest) Execute() (CertificatesResponse, *_nethttp.Response, error) {
	return r.ApiService.ProfilesCertificatesGetToManyRelatedExecute(r)
}

/*
 * ProfilesCertificatesGetToManyRelated Method for ProfilesCertificatesGetToManyRelated
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiProfilesCertificatesGetToManyRelatedRequest
 */
func (a *ProfilesApiService) ProfilesCertificatesGetToManyRelated(ctx _context.Context, id string) ApiProfilesCertificatesGetToManyRelatedRequest {
	return ApiProfilesCertificatesGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return CertificatesResponse
 */
func (a *ProfilesApiService) ProfilesCertificatesGetToManyRelatedExecute(r ApiProfilesCertificatesGetToManyRelatedRequest) (CertificatesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CertificatesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfilesApiService.ProfilesCertificatesGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/profiles/{id}/certificates"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fieldsCertificates != nil {
		localVarQueryParams.Add("fields[certificates]", parameterToString(*r.fieldsCertificates, "csv"))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProfilesCreateInstanceRequest struct {
	ctx _context.Context
	ApiService *ProfilesApiService
	profileCreateRequest *ProfileCreateRequest
}

func (r ApiProfilesCreateInstanceRequest) ProfileCreateRequest(profileCreateRequest ProfileCreateRequest) ApiProfilesCreateInstanceRequest {
	r.profileCreateRequest = &profileCreateRequest
	return r
}

func (r ApiProfilesCreateInstanceRequest) Execute() (ProfileResponse, *_nethttp.Response, error) {
	return r.ApiService.ProfilesCreateInstanceExecute(r)
}

/*
 * ProfilesCreateInstance Method for ProfilesCreateInstance
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiProfilesCreateInstanceRequest
 */
func (a *ProfilesApiService) ProfilesCreateInstance(ctx _context.Context) ApiProfilesCreateInstanceRequest {
	return ApiProfilesCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return ProfileResponse
 */
func (a *ProfilesApiService) ProfilesCreateInstanceExecute(r ApiProfilesCreateInstanceRequest) (ProfileResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ProfileResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfilesApiService.ProfilesCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/profiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.profileCreateRequest == nil {
		return localVarReturnValue, nil, reportError("profileCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.profileCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProfilesDeleteInstanceRequest struct {
	ctx _context.Context
	ApiService *ProfilesApiService
	id string
}


func (r ApiProfilesDeleteInstanceRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ProfilesDeleteInstanceExecute(r)
}

/*
 * ProfilesDeleteInstance Method for ProfilesDeleteInstance
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiProfilesDeleteInstanceRequest
 */
func (a *ProfilesApiService) ProfilesDeleteInstance(ctx _context.Context, id string) ApiProfilesDeleteInstanceRequest {
	return ApiProfilesDeleteInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *ProfilesApiService) ProfilesDeleteInstanceExecute(r ApiProfilesDeleteInstanceRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfilesApiService.ProfilesDeleteInstance")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/profiles/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiProfilesDevicesGetToManyRelatedRequest struct {
	ctx _context.Context
	ApiService *ProfilesApiService
	id string
	fieldsDevices *[]string
	limit *int32
}

func (r ApiProfilesDevicesGetToManyRelatedRequest) FieldsDevices(fieldsDevices []string) ApiProfilesDevicesGetToManyRelatedRequest {
	r.fieldsDevices = &fieldsDevices
	return r
}
func (r ApiProfilesDevicesGetToManyRelatedRequest) Limit(limit int32) ApiProfilesDevicesGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

func (r ApiProfilesDevicesGetToManyRelatedRequest) Execute() (DevicesResponse, *_nethttp.Response, error) {
	return r.ApiService.ProfilesDevicesGetToManyRelatedExecute(r)
}

/*
 * ProfilesDevicesGetToManyRelated Method for ProfilesDevicesGetToManyRelated
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiProfilesDevicesGetToManyRelatedRequest
 */
func (a *ProfilesApiService) ProfilesDevicesGetToManyRelated(ctx _context.Context, id string) ApiProfilesDevicesGetToManyRelatedRequest {
	return ApiProfilesDevicesGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return DevicesResponse
 */
func (a *ProfilesApiService) ProfilesDevicesGetToManyRelatedExecute(r ApiProfilesDevicesGetToManyRelatedRequest) (DevicesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DevicesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfilesApiService.ProfilesDevicesGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/profiles/{id}/devices"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fieldsDevices != nil {
		localVarQueryParams.Add("fields[devices]", parameterToString(*r.fieldsDevices, "csv"))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProfilesGetCollectionRequest struct {
	ctx _context.Context
	ApiService *ProfilesApiService
	filterName *[]string
	filterProfileState *[]string
	filterProfileType *[]string
	filterId *[]string
	sort *[]string
	fieldsProfiles *[]string
	limit *int32
	include *[]string
	fieldsCertificates *[]string
	fieldsDevices *[]string
	fieldsBundleIds *[]string
	limitCertificates *int32
	limitDevices *int32
}

func (r ApiProfilesGetCollectionRequest) FilterName(filterName []string) ApiProfilesGetCollectionRequest {
	r.filterName = &filterName
	return r
}
func (r ApiProfilesGetCollectionRequest) FilterProfileState(filterProfileState []string) ApiProfilesGetCollectionRequest {
	r.filterProfileState = &filterProfileState
	return r
}
func (r ApiProfilesGetCollectionRequest) FilterProfileType(filterProfileType []string) ApiProfilesGetCollectionRequest {
	r.filterProfileType = &filterProfileType
	return r
}
func (r ApiProfilesGetCollectionRequest) FilterId(filterId []string) ApiProfilesGetCollectionRequest {
	r.filterId = &filterId
	return r
}
func (r ApiProfilesGetCollectionRequest) Sort(sort []string) ApiProfilesGetCollectionRequest {
	r.sort = &sort
	return r
}
func (r ApiProfilesGetCollectionRequest) FieldsProfiles(fieldsProfiles []string) ApiProfilesGetCollectionRequest {
	r.fieldsProfiles = &fieldsProfiles
	return r
}
func (r ApiProfilesGetCollectionRequest) Limit(limit int32) ApiProfilesGetCollectionRequest {
	r.limit = &limit
	return r
}
func (r ApiProfilesGetCollectionRequest) Include(include []string) ApiProfilesGetCollectionRequest {
	r.include = &include
	return r
}
func (r ApiProfilesGetCollectionRequest) FieldsCertificates(fieldsCertificates []string) ApiProfilesGetCollectionRequest {
	r.fieldsCertificates = &fieldsCertificates
	return r
}
func (r ApiProfilesGetCollectionRequest) FieldsDevices(fieldsDevices []string) ApiProfilesGetCollectionRequest {
	r.fieldsDevices = &fieldsDevices
	return r
}
func (r ApiProfilesGetCollectionRequest) FieldsBundleIds(fieldsBundleIds []string) ApiProfilesGetCollectionRequest {
	r.fieldsBundleIds = &fieldsBundleIds
	return r
}
func (r ApiProfilesGetCollectionRequest) LimitCertificates(limitCertificates int32) ApiProfilesGetCollectionRequest {
	r.limitCertificates = &limitCertificates
	return r
}
func (r ApiProfilesGetCollectionRequest) LimitDevices(limitDevices int32) ApiProfilesGetCollectionRequest {
	r.limitDevices = &limitDevices
	return r
}

func (r ApiProfilesGetCollectionRequest) Execute() (ProfilesResponse, *_nethttp.Response, error) {
	return r.ApiService.ProfilesGetCollectionExecute(r)
}

/*
 * ProfilesGetCollection Method for ProfilesGetCollection
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiProfilesGetCollectionRequest
 */
func (a *ProfilesApiService) ProfilesGetCollection(ctx _context.Context) ApiProfilesGetCollectionRequest {
	return ApiProfilesGetCollectionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return ProfilesResponse
 */
func (a *ProfilesApiService) ProfilesGetCollectionExecute(r ApiProfilesGetCollectionRequest) (ProfilesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ProfilesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfilesApiService.ProfilesGetCollection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/profiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.filterName != nil {
		localVarQueryParams.Add("filter[name]", parameterToString(*r.filterName, "csv"))
	}
	if r.filterProfileState != nil {
		localVarQueryParams.Add("filter[profileState]", parameterToString(*r.filterProfileState, "csv"))
	}
	if r.filterProfileType != nil {
		localVarQueryParams.Add("filter[profileType]", parameterToString(*r.filterProfileType, "csv"))
	}
	if r.filterId != nil {
		localVarQueryParams.Add("filter[id]", parameterToString(*r.filterId, "csv"))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, "csv"))
	}
	if r.fieldsProfiles != nil {
		localVarQueryParams.Add("fields[profiles]", parameterToString(*r.fieldsProfiles, "csv"))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsCertificates != nil {
		localVarQueryParams.Add("fields[certificates]", parameterToString(*r.fieldsCertificates, "csv"))
	}
	if r.fieldsDevices != nil {
		localVarQueryParams.Add("fields[devices]", parameterToString(*r.fieldsDevices, "csv"))
	}
	if r.fieldsBundleIds != nil {
		localVarQueryParams.Add("fields[bundleIds]", parameterToString(*r.fieldsBundleIds, "csv"))
	}
	if r.limitCertificates != nil {
		localVarQueryParams.Add("limit[certificates]", parameterToString(*r.limitCertificates, ""))
	}
	if r.limitDevices != nil {
		localVarQueryParams.Add("limit[devices]", parameterToString(*r.limitDevices, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProfilesGetInstanceRequest struct {
	ctx _context.Context
	ApiService *ProfilesApiService
	id string
	fieldsProfiles *[]string
	include *[]string
	fieldsCertificates *[]string
	fieldsDevices *[]string
	fieldsBundleIds *[]string
	limitCertificates *int32
	limitDevices *int32
}

func (r ApiProfilesGetInstanceRequest) FieldsProfiles(fieldsProfiles []string) ApiProfilesGetInstanceRequest {
	r.fieldsProfiles = &fieldsProfiles
	return r
}
func (r ApiProfilesGetInstanceRequest) Include(include []string) ApiProfilesGetInstanceRequest {
	r.include = &include
	return r
}
func (r ApiProfilesGetInstanceRequest) FieldsCertificates(fieldsCertificates []string) ApiProfilesGetInstanceRequest {
	r.fieldsCertificates = &fieldsCertificates
	return r
}
func (r ApiProfilesGetInstanceRequest) FieldsDevices(fieldsDevices []string) ApiProfilesGetInstanceRequest {
	r.fieldsDevices = &fieldsDevices
	return r
}
func (r ApiProfilesGetInstanceRequest) FieldsBundleIds(fieldsBundleIds []string) ApiProfilesGetInstanceRequest {
	r.fieldsBundleIds = &fieldsBundleIds
	return r
}
func (r ApiProfilesGetInstanceRequest) LimitCertificates(limitCertificates int32) ApiProfilesGetInstanceRequest {
	r.limitCertificates = &limitCertificates
	return r
}
func (r ApiProfilesGetInstanceRequest) LimitDevices(limitDevices int32) ApiProfilesGetInstanceRequest {
	r.limitDevices = &limitDevices
	return r
}

func (r ApiProfilesGetInstanceRequest) Execute() (ProfileResponse, *_nethttp.Response, error) {
	return r.ApiService.ProfilesGetInstanceExecute(r)
}

/*
 * ProfilesGetInstance Method for ProfilesGetInstance
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiProfilesGetInstanceRequest
 */
func (a *ProfilesApiService) ProfilesGetInstance(ctx _context.Context, id string) ApiProfilesGetInstanceRequest {
	return ApiProfilesGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return ProfileResponse
 */
func (a *ProfilesApiService) ProfilesGetInstanceExecute(r ApiProfilesGetInstanceRequest) (ProfileResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ProfileResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfilesApiService.ProfilesGetInstance")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/profiles/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fieldsProfiles != nil {
		localVarQueryParams.Add("fields[profiles]", parameterToString(*r.fieldsProfiles, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsCertificates != nil {
		localVarQueryParams.Add("fields[certificates]", parameterToString(*r.fieldsCertificates, "csv"))
	}
	if r.fieldsDevices != nil {
		localVarQueryParams.Add("fields[devices]", parameterToString(*r.fieldsDevices, "csv"))
	}
	if r.fieldsBundleIds != nil {
		localVarQueryParams.Add("fields[bundleIds]", parameterToString(*r.fieldsBundleIds, "csv"))
	}
	if r.limitCertificates != nil {
		localVarQueryParams.Add("limit[certificates]", parameterToString(*r.limitCertificates, ""))
	}
	if r.limitDevices != nil {
		localVarQueryParams.Add("limit[devices]", parameterToString(*r.limitDevices, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
