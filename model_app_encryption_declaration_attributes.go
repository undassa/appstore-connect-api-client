/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect

import (
	"encoding/json"
	"time"
)

// AppEncryptionDeclarationAttributes struct for AppEncryptionDeclarationAttributes
type AppEncryptionDeclarationAttributes struct {
	UsesEncryption *bool `json:"usesEncryption,omitempty"`
	Exempt *bool `json:"exempt,omitempty"`
	ContainsProprietaryCryptography *bool `json:"containsProprietaryCryptography,omitempty"`
	ContainsThirdPartyCryptography *bool `json:"containsThirdPartyCryptography,omitempty"`
	AvailableOnFrenchStore *bool `json:"availableOnFrenchStore,omitempty"`
	Platform *Platform `json:"platform,omitempty"`
	UploadedDate *time.Time `json:"uploadedDate,omitempty"`
	DocumentUrl *string `json:"documentUrl,omitempty"`
	DocumentName *string `json:"documentName,omitempty"`
	DocumentType *string `json:"documentType,omitempty"`
	AppEncryptionDeclarationState *AppEncryptionDeclarationState `json:"appEncryptionDeclarationState,omitempty"`
	CodeValue *string `json:"codeValue,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AppEncryptionDeclarationAttributes AppEncryptionDeclarationAttributes

// NewAppEncryptionDeclarationAttributes instantiates a new AppEncryptionDeclarationAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppEncryptionDeclarationAttributes() *AppEncryptionDeclarationAttributes {
	this := AppEncryptionDeclarationAttributes{}
	return &this
}

// NewAppEncryptionDeclarationAttributesWithDefaults instantiates a new AppEncryptionDeclarationAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppEncryptionDeclarationAttributesWithDefaults() *AppEncryptionDeclarationAttributes {
	this := AppEncryptionDeclarationAttributes{}
	return &this
}

// GetUsesEncryption returns the UsesEncryption field value if set, zero value otherwise.
func (o *AppEncryptionDeclarationAttributes) GetUsesEncryption() bool {
	if o == nil || o.UsesEncryption == nil {
		var ret bool
		return ret
	}
	return *o.UsesEncryption
}

// GetUsesEncryptionOk returns a tuple with the UsesEncryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppEncryptionDeclarationAttributes) GetUsesEncryptionOk() (*bool, bool) {
	if o == nil || o.UsesEncryption == nil {
		return nil, false
	}
	return o.UsesEncryption, true
}

// HasUsesEncryption returns a boolean if a field has been set.
func (o *AppEncryptionDeclarationAttributes) HasUsesEncryption() bool {
	if o != nil && o.UsesEncryption != nil {
		return true
	}

	return false
}

// SetUsesEncryption gets a reference to the given bool and assigns it to the UsesEncryption field.
func (o *AppEncryptionDeclarationAttributes) SetUsesEncryption(v bool) {
	o.UsesEncryption = &v
}

// GetExempt returns the Exempt field value if set, zero value otherwise.
func (o *AppEncryptionDeclarationAttributes) GetExempt() bool {
	if o == nil || o.Exempt == nil {
		var ret bool
		return ret
	}
	return *o.Exempt
}

// GetExemptOk returns a tuple with the Exempt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppEncryptionDeclarationAttributes) GetExemptOk() (*bool, bool) {
	if o == nil || o.Exempt == nil {
		return nil, false
	}
	return o.Exempt, true
}

// HasExempt returns a boolean if a field has been set.
func (o *AppEncryptionDeclarationAttributes) HasExempt() bool {
	if o != nil && o.Exempt != nil {
		return true
	}

	return false
}

// SetExempt gets a reference to the given bool and assigns it to the Exempt field.
func (o *AppEncryptionDeclarationAttributes) SetExempt(v bool) {
	o.Exempt = &v
}

// GetContainsProprietaryCryptography returns the ContainsProprietaryCryptography field value if set, zero value otherwise.
func (o *AppEncryptionDeclarationAttributes) GetContainsProprietaryCryptography() bool {
	if o == nil || o.ContainsProprietaryCryptography == nil {
		var ret bool
		return ret
	}
	return *o.ContainsProprietaryCryptography
}

// GetContainsProprietaryCryptographyOk returns a tuple with the ContainsProprietaryCryptography field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppEncryptionDeclarationAttributes) GetContainsProprietaryCryptographyOk() (*bool, bool) {
	if o == nil || o.ContainsProprietaryCryptography == nil {
		return nil, false
	}
	return o.ContainsProprietaryCryptography, true
}

// HasContainsProprietaryCryptography returns a boolean if a field has been set.
func (o *AppEncryptionDeclarationAttributes) HasContainsProprietaryCryptography() bool {
	if o != nil && o.ContainsProprietaryCryptography != nil {
		return true
	}

	return false
}

// SetContainsProprietaryCryptography gets a reference to the given bool and assigns it to the ContainsProprietaryCryptography field.
func (o *AppEncryptionDeclarationAttributes) SetContainsProprietaryCryptography(v bool) {
	o.ContainsProprietaryCryptography = &v
}

// GetContainsThirdPartyCryptography returns the ContainsThirdPartyCryptography field value if set, zero value otherwise.
func (o *AppEncryptionDeclarationAttributes) GetContainsThirdPartyCryptography() bool {
	if o == nil || o.ContainsThirdPartyCryptography == nil {
		var ret bool
		return ret
	}
	return *o.ContainsThirdPartyCryptography
}

// GetContainsThirdPartyCryptographyOk returns a tuple with the ContainsThirdPartyCryptography field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppEncryptionDeclarationAttributes) GetContainsThirdPartyCryptographyOk() (*bool, bool) {
	if o == nil || o.ContainsThirdPartyCryptography == nil {
		return nil, false
	}
	return o.ContainsThirdPartyCryptography, true
}

// HasContainsThirdPartyCryptography returns a boolean if a field has been set.
func (o *AppEncryptionDeclarationAttributes) HasContainsThirdPartyCryptography() bool {
	if o != nil && o.ContainsThirdPartyCryptography != nil {
		return true
	}

	return false
}

// SetContainsThirdPartyCryptography gets a reference to the given bool and assigns it to the ContainsThirdPartyCryptography field.
func (o *AppEncryptionDeclarationAttributes) SetContainsThirdPartyCryptography(v bool) {
	o.ContainsThirdPartyCryptography = &v
}

// GetAvailableOnFrenchStore returns the AvailableOnFrenchStore field value if set, zero value otherwise.
func (o *AppEncryptionDeclarationAttributes) GetAvailableOnFrenchStore() bool {
	if o == nil || o.AvailableOnFrenchStore == nil {
		var ret bool
		return ret
	}
	return *o.AvailableOnFrenchStore
}

// GetAvailableOnFrenchStoreOk returns a tuple with the AvailableOnFrenchStore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppEncryptionDeclarationAttributes) GetAvailableOnFrenchStoreOk() (*bool, bool) {
	if o == nil || o.AvailableOnFrenchStore == nil {
		return nil, false
	}
	return o.AvailableOnFrenchStore, true
}

// HasAvailableOnFrenchStore returns a boolean if a field has been set.
func (o *AppEncryptionDeclarationAttributes) HasAvailableOnFrenchStore() bool {
	if o != nil && o.AvailableOnFrenchStore != nil {
		return true
	}

	return false
}

// SetAvailableOnFrenchStore gets a reference to the given bool and assigns it to the AvailableOnFrenchStore field.
func (o *AppEncryptionDeclarationAttributes) SetAvailableOnFrenchStore(v bool) {
	o.AvailableOnFrenchStore = &v
}

// GetPlatform returns the Platform field value if set, zero value otherwise.
func (o *AppEncryptionDeclarationAttributes) GetPlatform() Platform {
	if o == nil || o.Platform == nil {
		var ret Platform
		return ret
	}
	return *o.Platform
}

// GetPlatformOk returns a tuple with the Platform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppEncryptionDeclarationAttributes) GetPlatformOk() (*Platform, bool) {
	if o == nil || o.Platform == nil {
		return nil, false
	}
	return o.Platform, true
}

// HasPlatform returns a boolean if a field has been set.
func (o *AppEncryptionDeclarationAttributes) HasPlatform() bool {
	if o != nil && o.Platform != nil {
		return true
	}

	return false
}

// SetPlatform gets a reference to the given Platform and assigns it to the Platform field.
func (o *AppEncryptionDeclarationAttributes) SetPlatform(v Platform) {
	o.Platform = &v
}

// GetUploadedDate returns the UploadedDate field value if set, zero value otherwise.
func (o *AppEncryptionDeclarationAttributes) GetUploadedDate() time.Time {
	if o == nil || o.UploadedDate == nil {
		var ret time.Time
		return ret
	}
	return *o.UploadedDate
}

// GetUploadedDateOk returns a tuple with the UploadedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppEncryptionDeclarationAttributes) GetUploadedDateOk() (*time.Time, bool) {
	if o == nil || o.UploadedDate == nil {
		return nil, false
	}
	return o.UploadedDate, true
}

// HasUploadedDate returns a boolean if a field has been set.
func (o *AppEncryptionDeclarationAttributes) HasUploadedDate() bool {
	if o != nil && o.UploadedDate != nil {
		return true
	}

	return false
}

// SetUploadedDate gets a reference to the given time.Time and assigns it to the UploadedDate field.
func (o *AppEncryptionDeclarationAttributes) SetUploadedDate(v time.Time) {
	o.UploadedDate = &v
}

// GetDocumentUrl returns the DocumentUrl field value if set, zero value otherwise.
func (o *AppEncryptionDeclarationAttributes) GetDocumentUrl() string {
	if o == nil || o.DocumentUrl == nil {
		var ret string
		return ret
	}
	return *o.DocumentUrl
}

// GetDocumentUrlOk returns a tuple with the DocumentUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppEncryptionDeclarationAttributes) GetDocumentUrlOk() (*string, bool) {
	if o == nil || o.DocumentUrl == nil {
		return nil, false
	}
	return o.DocumentUrl, true
}

// HasDocumentUrl returns a boolean if a field has been set.
func (o *AppEncryptionDeclarationAttributes) HasDocumentUrl() bool {
	if o != nil && o.DocumentUrl != nil {
		return true
	}

	return false
}

// SetDocumentUrl gets a reference to the given string and assigns it to the DocumentUrl field.
func (o *AppEncryptionDeclarationAttributes) SetDocumentUrl(v string) {
	o.DocumentUrl = &v
}

// GetDocumentName returns the DocumentName field value if set, zero value otherwise.
func (o *AppEncryptionDeclarationAttributes) GetDocumentName() string {
	if o == nil || o.DocumentName == nil {
		var ret string
		return ret
	}
	return *o.DocumentName
}

// GetDocumentNameOk returns a tuple with the DocumentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppEncryptionDeclarationAttributes) GetDocumentNameOk() (*string, bool) {
	if o == nil || o.DocumentName == nil {
		return nil, false
	}
	return o.DocumentName, true
}

// HasDocumentName returns a boolean if a field has been set.
func (o *AppEncryptionDeclarationAttributes) HasDocumentName() bool {
	if o != nil && o.DocumentName != nil {
		return true
	}

	return false
}

// SetDocumentName gets a reference to the given string and assigns it to the DocumentName field.
func (o *AppEncryptionDeclarationAttributes) SetDocumentName(v string) {
	o.DocumentName = &v
}

// GetDocumentType returns the DocumentType field value if set, zero value otherwise.
func (o *AppEncryptionDeclarationAttributes) GetDocumentType() string {
	if o == nil || o.DocumentType == nil {
		var ret string
		return ret
	}
	return *o.DocumentType
}

// GetDocumentTypeOk returns a tuple with the DocumentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppEncryptionDeclarationAttributes) GetDocumentTypeOk() (*string, bool) {
	if o == nil || o.DocumentType == nil {
		return nil, false
	}
	return o.DocumentType, true
}

// HasDocumentType returns a boolean if a field has been set.
func (o *AppEncryptionDeclarationAttributes) HasDocumentType() bool {
	if o != nil && o.DocumentType != nil {
		return true
	}

	return false
}

// SetDocumentType gets a reference to the given string and assigns it to the DocumentType field.
func (o *AppEncryptionDeclarationAttributes) SetDocumentType(v string) {
	o.DocumentType = &v
}

// GetAppEncryptionDeclarationState returns the AppEncryptionDeclarationState field value if set, zero value otherwise.
func (o *AppEncryptionDeclarationAttributes) GetAppEncryptionDeclarationState() AppEncryptionDeclarationState {
	if o == nil || o.AppEncryptionDeclarationState == nil {
		var ret AppEncryptionDeclarationState
		return ret
	}
	return *o.AppEncryptionDeclarationState
}

// GetAppEncryptionDeclarationStateOk returns a tuple with the AppEncryptionDeclarationState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppEncryptionDeclarationAttributes) GetAppEncryptionDeclarationStateOk() (*AppEncryptionDeclarationState, bool) {
	if o == nil || o.AppEncryptionDeclarationState == nil {
		return nil, false
	}
	return o.AppEncryptionDeclarationState, true
}

// HasAppEncryptionDeclarationState returns a boolean if a field has been set.
func (o *AppEncryptionDeclarationAttributes) HasAppEncryptionDeclarationState() bool {
	if o != nil && o.AppEncryptionDeclarationState != nil {
		return true
	}

	return false
}

// SetAppEncryptionDeclarationState gets a reference to the given AppEncryptionDeclarationState and assigns it to the AppEncryptionDeclarationState field.
func (o *AppEncryptionDeclarationAttributes) SetAppEncryptionDeclarationState(v AppEncryptionDeclarationState) {
	o.AppEncryptionDeclarationState = &v
}

// GetCodeValue returns the CodeValue field value if set, zero value otherwise.
func (o *AppEncryptionDeclarationAttributes) GetCodeValue() string {
	if o == nil || o.CodeValue == nil {
		var ret string
		return ret
	}
	return *o.CodeValue
}

// GetCodeValueOk returns a tuple with the CodeValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppEncryptionDeclarationAttributes) GetCodeValueOk() (*string, bool) {
	if o == nil || o.CodeValue == nil {
		return nil, false
	}
	return o.CodeValue, true
}

// HasCodeValue returns a boolean if a field has been set.
func (o *AppEncryptionDeclarationAttributes) HasCodeValue() bool {
	if o != nil && o.CodeValue != nil {
		return true
	}

	return false
}

// SetCodeValue gets a reference to the given string and assigns it to the CodeValue field.
func (o *AppEncryptionDeclarationAttributes) SetCodeValue(v string) {
	o.CodeValue = &v
}

func (o AppEncryptionDeclarationAttributes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UsesEncryption != nil {
		toSerialize["usesEncryption"] = o.UsesEncryption
	}
	if o.Exempt != nil {
		toSerialize["exempt"] = o.Exempt
	}
	if o.ContainsProprietaryCryptography != nil {
		toSerialize["containsProprietaryCryptography"] = o.ContainsProprietaryCryptography
	}
	if o.ContainsThirdPartyCryptography != nil {
		toSerialize["containsThirdPartyCryptography"] = o.ContainsThirdPartyCryptography
	}
	if o.AvailableOnFrenchStore != nil {
		toSerialize["availableOnFrenchStore"] = o.AvailableOnFrenchStore
	}
	if o.Platform != nil {
		toSerialize["platform"] = o.Platform
	}
	if o.UploadedDate != nil {
		toSerialize["uploadedDate"] = o.UploadedDate
	}
	if o.DocumentUrl != nil {
		toSerialize["documentUrl"] = o.DocumentUrl
	}
	if o.DocumentName != nil {
		toSerialize["documentName"] = o.DocumentName
	}
	if o.DocumentType != nil {
		toSerialize["documentType"] = o.DocumentType
	}
	if o.AppEncryptionDeclarationState != nil {
		toSerialize["appEncryptionDeclarationState"] = o.AppEncryptionDeclarationState
	}
	if o.CodeValue != nil {
		toSerialize["codeValue"] = o.CodeValue
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *AppEncryptionDeclarationAttributes) UnmarshalJSON(bytes []byte) (err error) {
	varAppEncryptionDeclarationAttributes := _AppEncryptionDeclarationAttributes{}

	if err = json.Unmarshal(bytes, &varAppEncryptionDeclarationAttributes); err == nil {
		*o = AppEncryptionDeclarationAttributes(varAppEncryptionDeclarationAttributes)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "usesEncryption")
		delete(additionalProperties, "exempt")
		delete(additionalProperties, "containsProprietaryCryptography")
		delete(additionalProperties, "containsThirdPartyCryptography")
		delete(additionalProperties, "availableOnFrenchStore")
		delete(additionalProperties, "platform")
		delete(additionalProperties, "uploadedDate")
		delete(additionalProperties, "documentUrl")
		delete(additionalProperties, "documentName")
		delete(additionalProperties, "documentType")
		delete(additionalProperties, "appEncryptionDeclarationState")
		delete(additionalProperties, "codeValue")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAppEncryptionDeclarationAttributes struct {
	value *AppEncryptionDeclarationAttributes
	isSet bool
}

func (v NullableAppEncryptionDeclarationAttributes) Get() *AppEncryptionDeclarationAttributes {
	return v.value
}

func (v *NullableAppEncryptionDeclarationAttributes) Set(val *AppEncryptionDeclarationAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableAppEncryptionDeclarationAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableAppEncryptionDeclarationAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppEncryptionDeclarationAttributes(val *AppEncryptionDeclarationAttributes) *NullableAppEncryptionDeclarationAttributes {
	return &NullableAppEncryptionDeclarationAttributes{value: val, isSet: true}
}

func (v NullableAppEncryptionDeclarationAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppEncryptionDeclarationAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


