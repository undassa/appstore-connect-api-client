/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect

import (
	"encoding/json"
)

// CapabilityOption struct for CapabilityOption
type CapabilityOption struct {
	Key *string `json:"key,omitempty"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	EnabledByDefault *bool `json:"enabledByDefault,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	SupportsWildcard *bool `json:"supportsWildcard,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CapabilityOption CapabilityOption

// NewCapabilityOption instantiates a new CapabilityOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCapabilityOption() *CapabilityOption {
	this := CapabilityOption{}
	return &this
}

// NewCapabilityOptionWithDefaults instantiates a new CapabilityOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCapabilityOptionWithDefaults() *CapabilityOption {
	this := CapabilityOption{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *CapabilityOption) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityOption) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *CapabilityOption) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *CapabilityOption) SetKey(v string) {
	o.Key = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CapabilityOption) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityOption) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CapabilityOption) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CapabilityOption) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CapabilityOption) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityOption) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CapabilityOption) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CapabilityOption) SetDescription(v string) {
	o.Description = &v
}

// GetEnabledByDefault returns the EnabledByDefault field value if set, zero value otherwise.
func (o *CapabilityOption) GetEnabledByDefault() bool {
	if o == nil || o.EnabledByDefault == nil {
		var ret bool
		return ret
	}
	return *o.EnabledByDefault
}

// GetEnabledByDefaultOk returns a tuple with the EnabledByDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityOption) GetEnabledByDefaultOk() (*bool, bool) {
	if o == nil || o.EnabledByDefault == nil {
		return nil, false
	}
	return o.EnabledByDefault, true
}

// HasEnabledByDefault returns a boolean if a field has been set.
func (o *CapabilityOption) HasEnabledByDefault() bool {
	if o != nil && o.EnabledByDefault != nil {
		return true
	}

	return false
}

// SetEnabledByDefault gets a reference to the given bool and assigns it to the EnabledByDefault field.
func (o *CapabilityOption) SetEnabledByDefault(v bool) {
	o.EnabledByDefault = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CapabilityOption) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityOption) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CapabilityOption) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CapabilityOption) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetSupportsWildcard returns the SupportsWildcard field value if set, zero value otherwise.
func (o *CapabilityOption) GetSupportsWildcard() bool {
	if o == nil || o.SupportsWildcard == nil {
		var ret bool
		return ret
	}
	return *o.SupportsWildcard
}

// GetSupportsWildcardOk returns a tuple with the SupportsWildcard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilityOption) GetSupportsWildcardOk() (*bool, bool) {
	if o == nil || o.SupportsWildcard == nil {
		return nil, false
	}
	return o.SupportsWildcard, true
}

// HasSupportsWildcard returns a boolean if a field has been set.
func (o *CapabilityOption) HasSupportsWildcard() bool {
	if o != nil && o.SupportsWildcard != nil {
		return true
	}

	return false
}

// SetSupportsWildcard gets a reference to the given bool and assigns it to the SupportsWildcard field.
func (o *CapabilityOption) SetSupportsWildcard(v bool) {
	o.SupportsWildcard = &v
}

func (o CapabilityOption) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.EnabledByDefault != nil {
		toSerialize["enabledByDefault"] = o.EnabledByDefault
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.SupportsWildcard != nil {
		toSerialize["supportsWildcard"] = o.SupportsWildcard
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CapabilityOption) UnmarshalJSON(bytes []byte) (err error) {
	varCapabilityOption := _CapabilityOption{}

	if err = json.Unmarshal(bytes, &varCapabilityOption); err == nil {
		*o = CapabilityOption(varCapabilityOption)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "key")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "enabledByDefault")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "supportsWildcard")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCapabilityOption struct {
	value *CapabilityOption
	isSet bool
}

func (v NullableCapabilityOption) Get() *CapabilityOption {
	return v.value
}

func (v *NullableCapabilityOption) Set(val *CapabilityOption) {
	v.value = val
	v.isSet = true
}

func (v NullableCapabilityOption) IsSet() bool {
	return v.isSet
}

func (v *NullableCapabilityOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCapabilityOption(val *CapabilityOption) *NullableCapabilityOption {
	return &NullableCapabilityOption{value: val, isSet: true}
}

func (v NullableCapabilityOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCapabilityOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


