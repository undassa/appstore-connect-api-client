/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect

import (
	"encoding/json"
	"fmt"
)

// AppEncryptionDeclarationState the model 'AppEncryptionDeclarationState'
type AppEncryptionDeclarationState string

// List of AppEncryptionDeclarationState
const (
	INVALID AppEncryptionDeclarationState = "INVALID"
)

func (v *AppEncryptionDeclarationState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AppEncryptionDeclarationState(value)
	for _, existing := range []AppEncryptionDeclarationState{"IN_REVIEW", "APPROVED", "REJECTED", "INVALID", "EXPIRED"} {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AppEncryptionDeclarationState", value)
}

// Ptr returns reference to AppEncryptionDeclarationState value
func (v AppEncryptionDeclarationState) Ptr() *AppEncryptionDeclarationState {
	return &v
}

type NullableAppEncryptionDeclarationState struct {
	value *AppEncryptionDeclarationState
	isSet bool
}

func (v NullableAppEncryptionDeclarationState) Get() *AppEncryptionDeclarationState {
	return v.value
}

func (v *NullableAppEncryptionDeclarationState) Set(val *AppEncryptionDeclarationState) {
	v.value = val
	v.isSet = true
}

func (v NullableAppEncryptionDeclarationState) IsSet() bool {
	return v.isSet
}

func (v *NullableAppEncryptionDeclarationState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppEncryptionDeclarationState(val *AppEncryptionDeclarationState) *NullableAppEncryptionDeclarationState {
	return &NullableAppEncryptionDeclarationState{value: val, isSet: true}
}

func (v NullableAppEncryptionDeclarationState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppEncryptionDeclarationState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
