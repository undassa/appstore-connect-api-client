/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect

import (
	"encoding/json"
)

// CapabilitySetting struct for CapabilitySetting
type CapabilitySetting struct {
	Key *string `json:"key,omitempty"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	EnabledByDefault *bool `json:"enabledByDefault,omitempty"`
	Visible *bool `json:"visible,omitempty"`
	AllowedInstances *string `json:"allowedInstances,omitempty"`
	MinInstances *int32 `json:"minInstances,omitempty"`
	Options *[]CapabilityOption `json:"options,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CapabilitySetting CapabilitySetting

// NewCapabilitySetting instantiates a new CapabilitySetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCapabilitySetting() *CapabilitySetting {
	this := CapabilitySetting{}
	return &this
}

// NewCapabilitySettingWithDefaults instantiates a new CapabilitySetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCapabilitySettingWithDefaults() *CapabilitySetting {
	this := CapabilitySetting{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *CapabilitySetting) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySetting) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *CapabilitySetting) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *CapabilitySetting) SetKey(v string) {
	o.Key = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CapabilitySetting) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySetting) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CapabilitySetting) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CapabilitySetting) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CapabilitySetting) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySetting) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CapabilitySetting) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CapabilitySetting) SetDescription(v string) {
	o.Description = &v
}

// GetEnabledByDefault returns the EnabledByDefault field value if set, zero value otherwise.
func (o *CapabilitySetting) GetEnabledByDefault() bool {
	if o == nil || o.EnabledByDefault == nil {
		var ret bool
		return ret
	}
	return *o.EnabledByDefault
}

// GetEnabledByDefaultOk returns a tuple with the EnabledByDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySetting) GetEnabledByDefaultOk() (*bool, bool) {
	if o == nil || o.EnabledByDefault == nil {
		return nil, false
	}
	return o.EnabledByDefault, true
}

// HasEnabledByDefault returns a boolean if a field has been set.
func (o *CapabilitySetting) HasEnabledByDefault() bool {
	if o != nil && o.EnabledByDefault != nil {
		return true
	}

	return false
}

// SetEnabledByDefault gets a reference to the given bool and assigns it to the EnabledByDefault field.
func (o *CapabilitySetting) SetEnabledByDefault(v bool) {
	o.EnabledByDefault = &v
}

// GetVisible returns the Visible field value if set, zero value otherwise.
func (o *CapabilitySetting) GetVisible() bool {
	if o == nil || o.Visible == nil {
		var ret bool
		return ret
	}
	return *o.Visible
}

// GetVisibleOk returns a tuple with the Visible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySetting) GetVisibleOk() (*bool, bool) {
	if o == nil || o.Visible == nil {
		return nil, false
	}
	return o.Visible, true
}

// HasVisible returns a boolean if a field has been set.
func (o *CapabilitySetting) HasVisible() bool {
	if o != nil && o.Visible != nil {
		return true
	}

	return false
}

// SetVisible gets a reference to the given bool and assigns it to the Visible field.
func (o *CapabilitySetting) SetVisible(v bool) {
	o.Visible = &v
}

// GetAllowedInstances returns the AllowedInstances field value if set, zero value otherwise.
func (o *CapabilitySetting) GetAllowedInstances() string {
	if o == nil || o.AllowedInstances == nil {
		var ret string
		return ret
	}
	return *o.AllowedInstances
}

// GetAllowedInstancesOk returns a tuple with the AllowedInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySetting) GetAllowedInstancesOk() (*string, bool) {
	if o == nil || o.AllowedInstances == nil {
		return nil, false
	}
	return o.AllowedInstances, true
}

// HasAllowedInstances returns a boolean if a field has been set.
func (o *CapabilitySetting) HasAllowedInstances() bool {
	if o != nil && o.AllowedInstances != nil {
		return true
	}

	return false
}

// SetAllowedInstances gets a reference to the given string and assigns it to the AllowedInstances field.
func (o *CapabilitySetting) SetAllowedInstances(v string) {
	o.AllowedInstances = &v
}

// GetMinInstances returns the MinInstances field value if set, zero value otherwise.
func (o *CapabilitySetting) GetMinInstances() int32 {
	if o == nil || o.MinInstances == nil {
		var ret int32
		return ret
	}
	return *o.MinInstances
}

// GetMinInstancesOk returns a tuple with the MinInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySetting) GetMinInstancesOk() (*int32, bool) {
	if o == nil || o.MinInstances == nil {
		return nil, false
	}
	return o.MinInstances, true
}

// HasMinInstances returns a boolean if a field has been set.
func (o *CapabilitySetting) HasMinInstances() bool {
	if o != nil && o.MinInstances != nil {
		return true
	}

	return false
}

// SetMinInstances gets a reference to the given int32 and assigns it to the MinInstances field.
func (o *CapabilitySetting) SetMinInstances(v int32) {
	o.MinInstances = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *CapabilitySetting) GetOptions() []CapabilityOption {
	if o == nil || o.Options == nil {
		var ret []CapabilityOption
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapabilitySetting) GetOptionsOk() (*[]CapabilityOption, bool) {
	if o == nil || o.Options == nil {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *CapabilitySetting) HasOptions() bool {
	if o != nil && o.Options != nil {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []CapabilityOption and assigns it to the Options field.
func (o *CapabilitySetting) SetOptions(v []CapabilityOption) {
	o.Options = &v
}

func (o CapabilitySetting) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.EnabledByDefault != nil {
		toSerialize["enabledByDefault"] = o.EnabledByDefault
	}
	if o.Visible != nil {
		toSerialize["visible"] = o.Visible
	}
	if o.AllowedInstances != nil {
		toSerialize["allowedInstances"] = o.AllowedInstances
	}
	if o.MinInstances != nil {
		toSerialize["minInstances"] = o.MinInstances
	}
	if o.Options != nil {
		toSerialize["options"] = o.Options
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CapabilitySetting) UnmarshalJSON(bytes []byte) (err error) {
	varCapabilitySetting := _CapabilitySetting{}

	if err = json.Unmarshal(bytes, &varCapabilitySetting); err == nil {
		*o = CapabilitySetting(varCapabilitySetting)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "key")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "enabledByDefault")
		delete(additionalProperties, "visible")
		delete(additionalProperties, "allowedInstances")
		delete(additionalProperties, "minInstances")
		delete(additionalProperties, "options")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCapabilitySetting struct {
	value *CapabilitySetting
	isSet bool
}

func (v NullableCapabilitySetting) Get() *CapabilitySetting {
	return v.value
}

func (v *NullableCapabilitySetting) Set(val *CapabilitySetting) {
	v.value = val
	v.isSet = true
}

func (v NullableCapabilitySetting) IsSet() bool {
	return v.isSet
}

func (v *NullableCapabilitySetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCapabilitySetting(val *CapabilitySetting) *NullableCapabilitySetting {
	return &NullableCapabilitySetting{value: val, isSet: true}
}

func (v NullableCapabilitySetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCapabilitySetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


