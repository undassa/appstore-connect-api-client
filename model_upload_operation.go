/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect

import (
	"encoding/json"
)

// UploadOperation struct for UploadOperation
type UploadOperation struct {
	Method *string `json:"method,omitempty"`
	Url *string `json:"url,omitempty"`
	Length *int32 `json:"length,omitempty"`
	Offset *int32 `json:"offset,omitempty"`
	RequestHeaders *[]UploadOperationHeader `json:"requestHeaders,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UploadOperation UploadOperation

// NewUploadOperation instantiates a new UploadOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadOperation() *UploadOperation {
	this := UploadOperation{}
	return &this
}

// NewUploadOperationWithDefaults instantiates a new UploadOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadOperationWithDefaults() *UploadOperation {
	this := UploadOperation{}
	return &this
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *UploadOperation) GetMethod() string {
	if o == nil || o.Method == nil {
		var ret string
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadOperation) GetMethodOk() (*string, bool) {
	if o == nil || o.Method == nil {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *UploadOperation) HasMethod() bool {
	if o != nil && o.Method != nil {
		return true
	}

	return false
}

// SetMethod gets a reference to the given string and assigns it to the Method field.
func (o *UploadOperation) SetMethod(v string) {
	o.Method = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *UploadOperation) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadOperation) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *UploadOperation) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *UploadOperation) SetUrl(v string) {
	o.Url = &v
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *UploadOperation) GetLength() int32 {
	if o == nil || o.Length == nil {
		var ret int32
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadOperation) GetLengthOk() (*int32, bool) {
	if o == nil || o.Length == nil {
		return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *UploadOperation) HasLength() bool {
	if o != nil && o.Length != nil {
		return true
	}

	return false
}

// SetLength gets a reference to the given int32 and assigns it to the Length field.
func (o *UploadOperation) SetLength(v int32) {
	o.Length = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *UploadOperation) GetOffset() int32 {
	if o == nil || o.Offset == nil {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadOperation) GetOffsetOk() (*int32, bool) {
	if o == nil || o.Offset == nil {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *UploadOperation) HasOffset() bool {
	if o != nil && o.Offset != nil {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *UploadOperation) SetOffset(v int32) {
	o.Offset = &v
}

// GetRequestHeaders returns the RequestHeaders field value if set, zero value otherwise.
func (o *UploadOperation) GetRequestHeaders() []UploadOperationHeader {
	if o == nil || o.RequestHeaders == nil {
		var ret []UploadOperationHeader
		return ret
	}
	return *o.RequestHeaders
}

// GetRequestHeadersOk returns a tuple with the RequestHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadOperation) GetRequestHeadersOk() (*[]UploadOperationHeader, bool) {
	if o == nil || o.RequestHeaders == nil {
		return nil, false
	}
	return o.RequestHeaders, true
}

// HasRequestHeaders returns a boolean if a field has been set.
func (o *UploadOperation) HasRequestHeaders() bool {
	if o != nil && o.RequestHeaders != nil {
		return true
	}

	return false
}

// SetRequestHeaders gets a reference to the given []UploadOperationHeader and assigns it to the RequestHeaders field.
func (o *UploadOperation) SetRequestHeaders(v []UploadOperationHeader) {
	o.RequestHeaders = &v
}

func (o UploadOperation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Method != nil {
		toSerialize["method"] = o.Method
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.Length != nil {
		toSerialize["length"] = o.Length
	}
	if o.Offset != nil {
		toSerialize["offset"] = o.Offset
	}
	if o.RequestHeaders != nil {
		toSerialize["requestHeaders"] = o.RequestHeaders
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *UploadOperation) UnmarshalJSON(bytes []byte) (err error) {
	varUploadOperation := _UploadOperation{}

	if err = json.Unmarshal(bytes, &varUploadOperation); err == nil {
		*o = UploadOperation(varUploadOperation)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "method")
		delete(additionalProperties, "url")
		delete(additionalProperties, "length")
		delete(additionalProperties, "offset")
		delete(additionalProperties, "requestHeaders")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUploadOperation struct {
	value *UploadOperation
	isSet bool
}

func (v NullableUploadOperation) Get() *UploadOperation {
	return v.value
}

func (v *NullableUploadOperation) Set(val *UploadOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadOperation(val *UploadOperation) *NullableUploadOperation {
	return &NullableUploadOperation{value: val, isSet: true}
}

func (v NullableUploadOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


