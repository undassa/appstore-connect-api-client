/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect

import (
	"encoding/json"
)

// PagingInformationPaging struct for PagingInformationPaging
type PagingInformationPaging struct {
	Total int32 `json:"total"`
	Limit int32 `json:"limit"`
	AdditionalProperties map[string]interface{}
}

type _PagingInformationPaging PagingInformationPaging

// NewPagingInformationPaging instantiates a new PagingInformationPaging object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPagingInformationPaging(total int32, limit int32, ) *PagingInformationPaging {
	this := PagingInformationPaging{}
	this.Total = total
	this.Limit = limit
	return &this
}

// NewPagingInformationPagingWithDefaults instantiates a new PagingInformationPaging object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPagingInformationPagingWithDefaults() *PagingInformationPaging {
	this := PagingInformationPaging{}
	return &this
}

// GetTotal returns the Total field value
func (o *PagingInformationPaging) GetTotal() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *PagingInformationPaging) GetTotalOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *PagingInformationPaging) SetTotal(v int32) {
	o.Total = v
}

// GetLimit returns the Limit field value
func (o *PagingInformationPaging) GetLimit() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.Limit
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *PagingInformationPaging) GetLimitOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Limit, true
}

// SetLimit sets field value
func (o *PagingInformationPaging) SetLimit(v int32) {
	o.Limit = v
}

func (o PagingInformationPaging) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["total"] = o.Total
	}
	if true {
		toSerialize["limit"] = o.Limit
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *PagingInformationPaging) UnmarshalJSON(bytes []byte) (err error) {
	varPagingInformationPaging := _PagingInformationPaging{}

	if err = json.Unmarshal(bytes, &varPagingInformationPaging); err == nil {
		*o = PagingInformationPaging(varPagingInformationPaging)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "total")
		delete(additionalProperties, "limit")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePagingInformationPaging struct {
	value *PagingInformationPaging
	isSet bool
}

func (v NullablePagingInformationPaging) Get() *PagingInformationPaging {
	return v.value
}

func (v *NullablePagingInformationPaging) Set(val *PagingInformationPaging) {
	v.value = val
	v.isSet = true
}

func (v NullablePagingInformationPaging) IsSet() bool {
	return v.isSet
}

func (v *NullablePagingInformationPaging) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePagingInformationPaging(val *PagingInformationPaging) *NullablePagingInformationPaging {
	return &NullablePagingInformationPaging{value: val, isSet: true}
}

func (v NullablePagingInformationPaging) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePagingInformationPaging) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


