/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect

import (
	"encoding/json"
)

// GameCenterEnabledVersionRelationships struct for GameCenterEnabledVersionRelationships
type GameCenterEnabledVersionRelationships struct {
	CompatibleVersions *AppRelationshipsGameCenterEnabledVersions `json:"compatibleVersions,omitempty"`
	App *AppEncryptionDeclarationRelationshipsApp `json:"app,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GameCenterEnabledVersionRelationships GameCenterEnabledVersionRelationships

// NewGameCenterEnabledVersionRelationships instantiates a new GameCenterEnabledVersionRelationships object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGameCenterEnabledVersionRelationships() *GameCenterEnabledVersionRelationships {
	this := GameCenterEnabledVersionRelationships{}
	return &this
}

// NewGameCenterEnabledVersionRelationshipsWithDefaults instantiates a new GameCenterEnabledVersionRelationships object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGameCenterEnabledVersionRelationshipsWithDefaults() *GameCenterEnabledVersionRelationships {
	this := GameCenterEnabledVersionRelationships{}
	return &this
}

// GetCompatibleVersions returns the CompatibleVersions field value if set, zero value otherwise.
func (o *GameCenterEnabledVersionRelationships) GetCompatibleVersions() AppRelationshipsGameCenterEnabledVersions {
	if o == nil || o.CompatibleVersions == nil {
		var ret AppRelationshipsGameCenterEnabledVersions
		return ret
	}
	return *o.CompatibleVersions
}

// GetCompatibleVersionsOk returns a tuple with the CompatibleVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameCenterEnabledVersionRelationships) GetCompatibleVersionsOk() (*AppRelationshipsGameCenterEnabledVersions, bool) {
	if o == nil || o.CompatibleVersions == nil {
		return nil, false
	}
	return o.CompatibleVersions, true
}

// HasCompatibleVersions returns a boolean if a field has been set.
func (o *GameCenterEnabledVersionRelationships) HasCompatibleVersions() bool {
	if o != nil && o.CompatibleVersions != nil {
		return true
	}

	return false
}

// SetCompatibleVersions gets a reference to the given AppRelationshipsGameCenterEnabledVersions and assigns it to the CompatibleVersions field.
func (o *GameCenterEnabledVersionRelationships) SetCompatibleVersions(v AppRelationshipsGameCenterEnabledVersions) {
	o.CompatibleVersions = &v
}

// GetApp returns the App field value if set, zero value otherwise.
func (o *GameCenterEnabledVersionRelationships) GetApp() AppEncryptionDeclarationRelationshipsApp {
	if o == nil || o.App == nil {
		var ret AppEncryptionDeclarationRelationshipsApp
		return ret
	}
	return *o.App
}

// GetAppOk returns a tuple with the App field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameCenterEnabledVersionRelationships) GetAppOk() (*AppEncryptionDeclarationRelationshipsApp, bool) {
	if o == nil || o.App == nil {
		return nil, false
	}
	return o.App, true
}

// HasApp returns a boolean if a field has been set.
func (o *GameCenterEnabledVersionRelationships) HasApp() bool {
	if o != nil && o.App != nil {
		return true
	}

	return false
}

// SetApp gets a reference to the given AppEncryptionDeclarationRelationshipsApp and assigns it to the App field.
func (o *GameCenterEnabledVersionRelationships) SetApp(v AppEncryptionDeclarationRelationshipsApp) {
	o.App = &v
}

func (o GameCenterEnabledVersionRelationships) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CompatibleVersions != nil {
		toSerialize["compatibleVersions"] = o.CompatibleVersions
	}
	if o.App != nil {
		toSerialize["app"] = o.App
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *GameCenterEnabledVersionRelationships) UnmarshalJSON(bytes []byte) (err error) {
	varGameCenterEnabledVersionRelationships := _GameCenterEnabledVersionRelationships{}

	if err = json.Unmarshal(bytes, &varGameCenterEnabledVersionRelationships); err == nil {
		*o = GameCenterEnabledVersionRelationships(varGameCenterEnabledVersionRelationships)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "compatibleVersions")
		delete(additionalProperties, "app")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGameCenterEnabledVersionRelationships struct {
	value *GameCenterEnabledVersionRelationships
	isSet bool
}

func (v NullableGameCenterEnabledVersionRelationships) Get() *GameCenterEnabledVersionRelationships {
	return v.value
}

func (v *NullableGameCenterEnabledVersionRelationships) Set(val *GameCenterEnabledVersionRelationships) {
	v.value = val
	v.isSet = true
}

func (v NullableGameCenterEnabledVersionRelationships) IsSet() bool {
	return v.isSet
}

func (v *NullableGameCenterEnabledVersionRelationships) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGameCenterEnabledVersionRelationships(val *GameCenterEnabledVersionRelationships) *NullableGameCenterEnabledVersionRelationships {
	return &NullableGameCenterEnabledVersionRelationships{value: val, isSet: true}
}

func (v NullableGameCenterEnabledVersionRelationships) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGameCenterEnabledVersionRelationships) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


