/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect

import (
	"encoding/json"
)

// AppInfoLocalizationAttributes struct for AppInfoLocalizationAttributes
type AppInfoLocalizationAttributes struct {
	Locale *string `json:"locale,omitempty"`
	Name *string `json:"name,omitempty"`
	Subtitle *string `json:"subtitle,omitempty"`
	PrivacyPolicyUrl *string `json:"privacyPolicyUrl,omitempty"`
	PrivacyPolicyText *string `json:"privacyPolicyText,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AppInfoLocalizationAttributes AppInfoLocalizationAttributes

// NewAppInfoLocalizationAttributes instantiates a new AppInfoLocalizationAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppInfoLocalizationAttributes() *AppInfoLocalizationAttributes {
	this := AppInfoLocalizationAttributes{}
	return &this
}

// NewAppInfoLocalizationAttributesWithDefaults instantiates a new AppInfoLocalizationAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppInfoLocalizationAttributesWithDefaults() *AppInfoLocalizationAttributes {
	this := AppInfoLocalizationAttributes{}
	return &this
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *AppInfoLocalizationAttributes) GetLocale() string {
	if o == nil || o.Locale == nil {
		var ret string
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppInfoLocalizationAttributes) GetLocaleOk() (*string, bool) {
	if o == nil || o.Locale == nil {
		return nil, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *AppInfoLocalizationAttributes) HasLocale() bool {
	if o != nil && o.Locale != nil {
		return true
	}

	return false
}

// SetLocale gets a reference to the given string and assigns it to the Locale field.
func (o *AppInfoLocalizationAttributes) SetLocale(v string) {
	o.Locale = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AppInfoLocalizationAttributes) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppInfoLocalizationAttributes) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AppInfoLocalizationAttributes) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AppInfoLocalizationAttributes) SetName(v string) {
	o.Name = &v
}

// GetSubtitle returns the Subtitle field value if set, zero value otherwise.
func (o *AppInfoLocalizationAttributes) GetSubtitle() string {
	if o == nil || o.Subtitle == nil {
		var ret string
		return ret
	}
	return *o.Subtitle
}

// GetSubtitleOk returns a tuple with the Subtitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppInfoLocalizationAttributes) GetSubtitleOk() (*string, bool) {
	if o == nil || o.Subtitle == nil {
		return nil, false
	}
	return o.Subtitle, true
}

// HasSubtitle returns a boolean if a field has been set.
func (o *AppInfoLocalizationAttributes) HasSubtitle() bool {
	if o != nil && o.Subtitle != nil {
		return true
	}

	return false
}

// SetSubtitle gets a reference to the given string and assigns it to the Subtitle field.
func (o *AppInfoLocalizationAttributes) SetSubtitle(v string) {
	o.Subtitle = &v
}

// GetPrivacyPolicyUrl returns the PrivacyPolicyUrl field value if set, zero value otherwise.
func (o *AppInfoLocalizationAttributes) GetPrivacyPolicyUrl() string {
	if o == nil || o.PrivacyPolicyUrl == nil {
		var ret string
		return ret
	}
	return *o.PrivacyPolicyUrl
}

// GetPrivacyPolicyUrlOk returns a tuple with the PrivacyPolicyUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppInfoLocalizationAttributes) GetPrivacyPolicyUrlOk() (*string, bool) {
	if o == nil || o.PrivacyPolicyUrl == nil {
		return nil, false
	}
	return o.PrivacyPolicyUrl, true
}

// HasPrivacyPolicyUrl returns a boolean if a field has been set.
func (o *AppInfoLocalizationAttributes) HasPrivacyPolicyUrl() bool {
	if o != nil && o.PrivacyPolicyUrl != nil {
		return true
	}

	return false
}

// SetPrivacyPolicyUrl gets a reference to the given string and assigns it to the PrivacyPolicyUrl field.
func (o *AppInfoLocalizationAttributes) SetPrivacyPolicyUrl(v string) {
	o.PrivacyPolicyUrl = &v
}

// GetPrivacyPolicyText returns the PrivacyPolicyText field value if set, zero value otherwise.
func (o *AppInfoLocalizationAttributes) GetPrivacyPolicyText() string {
	if o == nil || o.PrivacyPolicyText == nil {
		var ret string
		return ret
	}
	return *o.PrivacyPolicyText
}

// GetPrivacyPolicyTextOk returns a tuple with the PrivacyPolicyText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppInfoLocalizationAttributes) GetPrivacyPolicyTextOk() (*string, bool) {
	if o == nil || o.PrivacyPolicyText == nil {
		return nil, false
	}
	return o.PrivacyPolicyText, true
}

// HasPrivacyPolicyText returns a boolean if a field has been set.
func (o *AppInfoLocalizationAttributes) HasPrivacyPolicyText() bool {
	if o != nil && o.PrivacyPolicyText != nil {
		return true
	}

	return false
}

// SetPrivacyPolicyText gets a reference to the given string and assigns it to the PrivacyPolicyText field.
func (o *AppInfoLocalizationAttributes) SetPrivacyPolicyText(v string) {
	o.PrivacyPolicyText = &v
}

func (o AppInfoLocalizationAttributes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Locale != nil {
		toSerialize["locale"] = o.Locale
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Subtitle != nil {
		toSerialize["subtitle"] = o.Subtitle
	}
	if o.PrivacyPolicyUrl != nil {
		toSerialize["privacyPolicyUrl"] = o.PrivacyPolicyUrl
	}
	if o.PrivacyPolicyText != nil {
		toSerialize["privacyPolicyText"] = o.PrivacyPolicyText
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *AppInfoLocalizationAttributes) UnmarshalJSON(bytes []byte) (err error) {
	varAppInfoLocalizationAttributes := _AppInfoLocalizationAttributes{}

	if err = json.Unmarshal(bytes, &varAppInfoLocalizationAttributes); err == nil {
		*o = AppInfoLocalizationAttributes(varAppInfoLocalizationAttributes)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "locale")
		delete(additionalProperties, "name")
		delete(additionalProperties, "subtitle")
		delete(additionalProperties, "privacyPolicyUrl")
		delete(additionalProperties, "privacyPolicyText")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAppInfoLocalizationAttributes struct {
	value *AppInfoLocalizationAttributes
	isSet bool
}

func (v NullableAppInfoLocalizationAttributes) Get() *AppInfoLocalizationAttributes {
	return v.value
}

func (v *NullableAppInfoLocalizationAttributes) Set(val *AppInfoLocalizationAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableAppInfoLocalizationAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableAppInfoLocalizationAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppInfoLocalizationAttributes(val *AppInfoLocalizationAttributes) *NullableAppInfoLocalizationAttributes {
	return &NullableAppInfoLocalizationAttributes{value: val, isSet: true}
}

func (v NullableAppInfoLocalizationAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppInfoLocalizationAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


