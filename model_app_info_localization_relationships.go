/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect

import (
	"encoding/json"
)

// AppInfoLocalizationRelationships struct for AppInfoLocalizationRelationships
type AppInfoLocalizationRelationships struct {
	AppInfo *AppInfoLocalizationRelationshipsAppInfo `json:"appInfo,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AppInfoLocalizationRelationships AppInfoLocalizationRelationships

// NewAppInfoLocalizationRelationships instantiates a new AppInfoLocalizationRelationships object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppInfoLocalizationRelationships() *AppInfoLocalizationRelationships {
	this := AppInfoLocalizationRelationships{}
	return &this
}

// NewAppInfoLocalizationRelationshipsWithDefaults instantiates a new AppInfoLocalizationRelationships object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppInfoLocalizationRelationshipsWithDefaults() *AppInfoLocalizationRelationships {
	this := AppInfoLocalizationRelationships{}
	return &this
}

// GetAppInfo returns the AppInfo field value if set, zero value otherwise.
func (o *AppInfoLocalizationRelationships) GetAppInfo() AppInfoLocalizationRelationshipsAppInfo {
	if o == nil || o.AppInfo == nil {
		var ret AppInfoLocalizationRelationshipsAppInfo
		return ret
	}
	return *o.AppInfo
}

// GetAppInfoOk returns a tuple with the AppInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppInfoLocalizationRelationships) GetAppInfoOk() (*AppInfoLocalizationRelationshipsAppInfo, bool) {
	if o == nil || o.AppInfo == nil {
		return nil, false
	}
	return o.AppInfo, true
}

// HasAppInfo returns a boolean if a field has been set.
func (o *AppInfoLocalizationRelationships) HasAppInfo() bool {
	if o != nil && o.AppInfo != nil {
		return true
	}

	return false
}

// SetAppInfo gets a reference to the given AppInfoLocalizationRelationshipsAppInfo and assigns it to the AppInfo field.
func (o *AppInfoLocalizationRelationships) SetAppInfo(v AppInfoLocalizationRelationshipsAppInfo) {
	o.AppInfo = &v
}

func (o AppInfoLocalizationRelationships) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AppInfo != nil {
		toSerialize["appInfo"] = o.AppInfo
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *AppInfoLocalizationRelationships) UnmarshalJSON(bytes []byte) (err error) {
	varAppInfoLocalizationRelationships := _AppInfoLocalizationRelationships{}

	if err = json.Unmarshal(bytes, &varAppInfoLocalizationRelationships); err == nil {
		*o = AppInfoLocalizationRelationships(varAppInfoLocalizationRelationships)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "appInfo")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAppInfoLocalizationRelationships struct {
	value *AppInfoLocalizationRelationships
	isSet bool
}

func (v NullableAppInfoLocalizationRelationships) Get() *AppInfoLocalizationRelationships {
	return v.value
}

func (v *NullableAppInfoLocalizationRelationships) Set(val *AppInfoLocalizationRelationships) {
	v.value = val
	v.isSet = true
}

func (v NullableAppInfoLocalizationRelationships) IsSet() bool {
	return v.isSet
}

func (v *NullableAppInfoLocalizationRelationships) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppInfoLocalizationRelationships(val *AppInfoLocalizationRelationships) *NullableAppInfoLocalizationRelationships {
	return &NullableAppInfoLocalizationRelationships{value: val, isSet: true}
}

func (v NullableAppInfoLocalizationRelationships) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppInfoLocalizationRelationships) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


