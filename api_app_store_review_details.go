/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// AppStoreReviewDetailsApiService AppStoreReviewDetailsApi service
type AppStoreReviewDetailsApiService service

type ApiAppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedRequest struct {
	ctx _context.Context
	ApiService *AppStoreReviewDetailsApiService
	id string
	fieldsAppStoreReviewDetails *[]string
	fieldsAppStoreReviewAttachments *[]string
	limit *int32
	include *[]string
}

func (r ApiAppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedRequest) FieldsAppStoreReviewDetails(fieldsAppStoreReviewDetails []string) ApiAppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedRequest {
	r.fieldsAppStoreReviewDetails = &fieldsAppStoreReviewDetails
	return r
}
func (r ApiAppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedRequest) FieldsAppStoreReviewAttachments(fieldsAppStoreReviewAttachments []string) ApiAppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedRequest {
	r.fieldsAppStoreReviewAttachments = &fieldsAppStoreReviewAttachments
	return r
}
func (r ApiAppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedRequest) Limit(limit int32) ApiAppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}
func (r ApiAppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedRequest) Include(include []string) ApiAppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r ApiAppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedRequest) Execute() (AppStoreReviewAttachmentsResponse, *_nethttp.Response, error) {
	return r.ApiService.AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedExecute(r)
}

/*
 * AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelated Method for AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelated
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiAppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedRequest
 */
func (a *AppStoreReviewDetailsApiService) AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelated(ctx _context.Context, id string) ApiAppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedRequest {
	return ApiAppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return AppStoreReviewAttachmentsResponse
 */
func (a *AppStoreReviewDetailsApiService) AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedExecute(r ApiAppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedRequest) (AppStoreReviewAttachmentsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AppStoreReviewAttachmentsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreReviewDetailsApiService.AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreReviewDetails/{id}/appStoreReviewAttachments"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fieldsAppStoreReviewDetails != nil {
		localVarQueryParams.Add("fields[appStoreReviewDetails]", parameterToString(*r.fieldsAppStoreReviewDetails, "csv"))
	}
	if r.fieldsAppStoreReviewAttachments != nil {
		localVarQueryParams.Add("fields[appStoreReviewAttachments]", parameterToString(*r.fieldsAppStoreReviewAttachments, "csv"))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppStoreReviewDetailsCreateInstanceRequest struct {
	ctx _context.Context
	ApiService *AppStoreReviewDetailsApiService
	appStoreReviewDetailCreateRequest *AppStoreReviewDetailCreateRequest
}

func (r ApiAppStoreReviewDetailsCreateInstanceRequest) AppStoreReviewDetailCreateRequest(appStoreReviewDetailCreateRequest AppStoreReviewDetailCreateRequest) ApiAppStoreReviewDetailsCreateInstanceRequest {
	r.appStoreReviewDetailCreateRequest = &appStoreReviewDetailCreateRequest
	return r
}

func (r ApiAppStoreReviewDetailsCreateInstanceRequest) Execute() (AppStoreReviewDetailResponse, *_nethttp.Response, error) {
	return r.ApiService.AppStoreReviewDetailsCreateInstanceExecute(r)
}

/*
 * AppStoreReviewDetailsCreateInstance Method for AppStoreReviewDetailsCreateInstance
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiAppStoreReviewDetailsCreateInstanceRequest
 */
func (a *AppStoreReviewDetailsApiService) AppStoreReviewDetailsCreateInstance(ctx _context.Context) ApiAppStoreReviewDetailsCreateInstanceRequest {
	return ApiAppStoreReviewDetailsCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return AppStoreReviewDetailResponse
 */
func (a *AppStoreReviewDetailsApiService) AppStoreReviewDetailsCreateInstanceExecute(r ApiAppStoreReviewDetailsCreateInstanceRequest) (AppStoreReviewDetailResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AppStoreReviewDetailResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreReviewDetailsApiService.AppStoreReviewDetailsCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreReviewDetails"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.appStoreReviewDetailCreateRequest == nil {
		return localVarReturnValue, nil, reportError("appStoreReviewDetailCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appStoreReviewDetailCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppStoreReviewDetailsGetInstanceRequest struct {
	ctx _context.Context
	ApiService *AppStoreReviewDetailsApiService
	id string
	fieldsAppStoreReviewDetails *[]string
	include *[]string
	fieldsAppStoreReviewAttachments *[]string
	limitAppStoreReviewAttachments *int32
}

func (r ApiAppStoreReviewDetailsGetInstanceRequest) FieldsAppStoreReviewDetails(fieldsAppStoreReviewDetails []string) ApiAppStoreReviewDetailsGetInstanceRequest {
	r.fieldsAppStoreReviewDetails = &fieldsAppStoreReviewDetails
	return r
}
func (r ApiAppStoreReviewDetailsGetInstanceRequest) Include(include []string) ApiAppStoreReviewDetailsGetInstanceRequest {
	r.include = &include
	return r
}
func (r ApiAppStoreReviewDetailsGetInstanceRequest) FieldsAppStoreReviewAttachments(fieldsAppStoreReviewAttachments []string) ApiAppStoreReviewDetailsGetInstanceRequest {
	r.fieldsAppStoreReviewAttachments = &fieldsAppStoreReviewAttachments
	return r
}
func (r ApiAppStoreReviewDetailsGetInstanceRequest) LimitAppStoreReviewAttachments(limitAppStoreReviewAttachments int32) ApiAppStoreReviewDetailsGetInstanceRequest {
	r.limitAppStoreReviewAttachments = &limitAppStoreReviewAttachments
	return r
}

func (r ApiAppStoreReviewDetailsGetInstanceRequest) Execute() (AppStoreReviewDetailResponse, *_nethttp.Response, error) {
	return r.ApiService.AppStoreReviewDetailsGetInstanceExecute(r)
}

/*
 * AppStoreReviewDetailsGetInstance Method for AppStoreReviewDetailsGetInstance
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiAppStoreReviewDetailsGetInstanceRequest
 */
func (a *AppStoreReviewDetailsApiService) AppStoreReviewDetailsGetInstance(ctx _context.Context, id string) ApiAppStoreReviewDetailsGetInstanceRequest {
	return ApiAppStoreReviewDetailsGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return AppStoreReviewDetailResponse
 */
func (a *AppStoreReviewDetailsApiService) AppStoreReviewDetailsGetInstanceExecute(r ApiAppStoreReviewDetailsGetInstanceRequest) (AppStoreReviewDetailResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AppStoreReviewDetailResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreReviewDetailsApiService.AppStoreReviewDetailsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreReviewDetails/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fieldsAppStoreReviewDetails != nil {
		localVarQueryParams.Add("fields[appStoreReviewDetails]", parameterToString(*r.fieldsAppStoreReviewDetails, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsAppStoreReviewAttachments != nil {
		localVarQueryParams.Add("fields[appStoreReviewAttachments]", parameterToString(*r.fieldsAppStoreReviewAttachments, "csv"))
	}
	if r.limitAppStoreReviewAttachments != nil {
		localVarQueryParams.Add("limit[appStoreReviewAttachments]", parameterToString(*r.limitAppStoreReviewAttachments, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppStoreReviewDetailsUpdateInstanceRequest struct {
	ctx _context.Context
	ApiService *AppStoreReviewDetailsApiService
	id string
	appStoreReviewDetailUpdateRequest *AppStoreReviewDetailUpdateRequest
}

func (r ApiAppStoreReviewDetailsUpdateInstanceRequest) AppStoreReviewDetailUpdateRequest(appStoreReviewDetailUpdateRequest AppStoreReviewDetailUpdateRequest) ApiAppStoreReviewDetailsUpdateInstanceRequest {
	r.appStoreReviewDetailUpdateRequest = &appStoreReviewDetailUpdateRequest
	return r
}

func (r ApiAppStoreReviewDetailsUpdateInstanceRequest) Execute() (AppStoreReviewDetailResponse, *_nethttp.Response, error) {
	return r.ApiService.AppStoreReviewDetailsUpdateInstanceExecute(r)
}

/*
 * AppStoreReviewDetailsUpdateInstance Method for AppStoreReviewDetailsUpdateInstance
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiAppStoreReviewDetailsUpdateInstanceRequest
 */
func (a *AppStoreReviewDetailsApiService) AppStoreReviewDetailsUpdateInstance(ctx _context.Context, id string) ApiAppStoreReviewDetailsUpdateInstanceRequest {
	return ApiAppStoreReviewDetailsUpdateInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return AppStoreReviewDetailResponse
 */
func (a *AppStoreReviewDetailsApiService) AppStoreReviewDetailsUpdateInstanceExecute(r ApiAppStoreReviewDetailsUpdateInstanceRequest) (AppStoreReviewDetailResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AppStoreReviewDetailResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreReviewDetailsApiService.AppStoreReviewDetailsUpdateInstance")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreReviewDetails/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.appStoreReviewDetailUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("appStoreReviewDetailUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appStoreReviewDetailUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
