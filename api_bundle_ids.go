/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// BundleIdsApiService BundleIdsApi service
type BundleIdsApiService service

type ApiBundleIdsAppGetToOneRelatedRequest struct {
	ctx _context.Context
	ApiService *BundleIdsApiService
	id string
	fieldsApps *[]string
}

func (r ApiBundleIdsAppGetToOneRelatedRequest) FieldsApps(fieldsApps []string) ApiBundleIdsAppGetToOneRelatedRequest {
	r.fieldsApps = &fieldsApps
	return r
}

func (r ApiBundleIdsAppGetToOneRelatedRequest) Execute() (AppResponse, *_nethttp.Response, error) {
	return r.ApiService.BundleIdsAppGetToOneRelatedExecute(r)
}

/*
 * BundleIdsAppGetToOneRelated Method for BundleIdsAppGetToOneRelated
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiBundleIdsAppGetToOneRelatedRequest
 */
func (a *BundleIdsApiService) BundleIdsAppGetToOneRelated(ctx _context.Context, id string) ApiBundleIdsAppGetToOneRelatedRequest {
	return ApiBundleIdsAppGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return AppResponse
 */
func (a *BundleIdsApiService) BundleIdsAppGetToOneRelatedExecute(r ApiBundleIdsAppGetToOneRelatedRequest) (AppResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AppResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BundleIdsApiService.BundleIdsAppGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/bundleIds/{id}/app"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fieldsApps != nil {
		localVarQueryParams.Add("fields[apps]", parameterToString(*r.fieldsApps, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBundleIdsBundleIdCapabilitiesGetToManyRelatedRequest struct {
	ctx _context.Context
	ApiService *BundleIdsApiService
	id string
	fieldsBundleIdCapabilities *[]string
	limit *int32
}

func (r ApiBundleIdsBundleIdCapabilitiesGetToManyRelatedRequest) FieldsBundleIdCapabilities(fieldsBundleIdCapabilities []string) ApiBundleIdsBundleIdCapabilitiesGetToManyRelatedRequest {
	r.fieldsBundleIdCapabilities = &fieldsBundleIdCapabilities
	return r
}
func (r ApiBundleIdsBundleIdCapabilitiesGetToManyRelatedRequest) Limit(limit int32) ApiBundleIdsBundleIdCapabilitiesGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

func (r ApiBundleIdsBundleIdCapabilitiesGetToManyRelatedRequest) Execute() (BundleIdCapabilitiesResponse, *_nethttp.Response, error) {
	return r.ApiService.BundleIdsBundleIdCapabilitiesGetToManyRelatedExecute(r)
}

/*
 * BundleIdsBundleIdCapabilitiesGetToManyRelated Method for BundleIdsBundleIdCapabilitiesGetToManyRelated
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiBundleIdsBundleIdCapabilitiesGetToManyRelatedRequest
 */
func (a *BundleIdsApiService) BundleIdsBundleIdCapabilitiesGetToManyRelated(ctx _context.Context, id string) ApiBundleIdsBundleIdCapabilitiesGetToManyRelatedRequest {
	return ApiBundleIdsBundleIdCapabilitiesGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return BundleIdCapabilitiesResponse
 */
func (a *BundleIdsApiService) BundleIdsBundleIdCapabilitiesGetToManyRelatedExecute(r ApiBundleIdsBundleIdCapabilitiesGetToManyRelatedRequest) (BundleIdCapabilitiesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BundleIdCapabilitiesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BundleIdsApiService.BundleIdsBundleIdCapabilitiesGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/bundleIds/{id}/bundleIdCapabilities"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fieldsBundleIdCapabilities != nil {
		localVarQueryParams.Add("fields[bundleIdCapabilities]", parameterToString(*r.fieldsBundleIdCapabilities, "csv"))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBundleIdsCreateInstanceRequest struct {
	ctx _context.Context
	ApiService *BundleIdsApiService
	bundleIdCreateRequest *BundleIdCreateRequest
}

func (r ApiBundleIdsCreateInstanceRequest) BundleIdCreateRequest(bundleIdCreateRequest BundleIdCreateRequest) ApiBundleIdsCreateInstanceRequest {
	r.bundleIdCreateRequest = &bundleIdCreateRequest
	return r
}

func (r ApiBundleIdsCreateInstanceRequest) Execute() (BundleIdResponse, *_nethttp.Response, error) {
	return r.ApiService.BundleIdsCreateInstanceExecute(r)
}

/*
 * BundleIdsCreateInstance Method for BundleIdsCreateInstance
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiBundleIdsCreateInstanceRequest
 */
func (a *BundleIdsApiService) BundleIdsCreateInstance(ctx _context.Context) ApiBundleIdsCreateInstanceRequest {
	return ApiBundleIdsCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return BundleIdResponse
 */
func (a *BundleIdsApiService) BundleIdsCreateInstanceExecute(r ApiBundleIdsCreateInstanceRequest) (BundleIdResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BundleIdResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BundleIdsApiService.BundleIdsCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/bundleIds"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.bundleIdCreateRequest == nil {
		return localVarReturnValue, nil, reportError("bundleIdCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bundleIdCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBundleIdsDeleteInstanceRequest struct {
	ctx _context.Context
	ApiService *BundleIdsApiService
	id string
}


func (r ApiBundleIdsDeleteInstanceRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.BundleIdsDeleteInstanceExecute(r)
}

/*
 * BundleIdsDeleteInstance Method for BundleIdsDeleteInstance
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiBundleIdsDeleteInstanceRequest
 */
func (a *BundleIdsApiService) BundleIdsDeleteInstance(ctx _context.Context, id string) ApiBundleIdsDeleteInstanceRequest {
	return ApiBundleIdsDeleteInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *BundleIdsApiService) BundleIdsDeleteInstanceExecute(r ApiBundleIdsDeleteInstanceRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BundleIdsApiService.BundleIdsDeleteInstance")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/bundleIds/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiBundleIdsGetCollectionRequest struct {
	ctx _context.Context
	ApiService *BundleIdsApiService
	filterIdentifier *[]string
	filterName *[]string
	filterPlatform *[]string
	filterSeedId *[]string
	filterId *[]string
	sort *[]string
	fieldsBundleIds *[]string
	limit *int32
	include *[]string
	fieldsBundleIdCapabilities *[]string
	fieldsProfiles *[]string
	fieldsApps *[]string
	limitBundleIdCapabilities *int32
	limitProfiles *int32
}

func (r ApiBundleIdsGetCollectionRequest) FilterIdentifier(filterIdentifier []string) ApiBundleIdsGetCollectionRequest {
	r.filterIdentifier = &filterIdentifier
	return r
}
func (r ApiBundleIdsGetCollectionRequest) FilterName(filterName []string) ApiBundleIdsGetCollectionRequest {
	r.filterName = &filterName
	return r
}
func (r ApiBundleIdsGetCollectionRequest) FilterPlatform(filterPlatform []string) ApiBundleIdsGetCollectionRequest {
	r.filterPlatform = &filterPlatform
	return r
}
func (r ApiBundleIdsGetCollectionRequest) FilterSeedId(filterSeedId []string) ApiBundleIdsGetCollectionRequest {
	r.filterSeedId = &filterSeedId
	return r
}
func (r ApiBundleIdsGetCollectionRequest) FilterId(filterId []string) ApiBundleIdsGetCollectionRequest {
	r.filterId = &filterId
	return r
}
func (r ApiBundleIdsGetCollectionRequest) Sort(sort []string) ApiBundleIdsGetCollectionRequest {
	r.sort = &sort
	return r
}
func (r ApiBundleIdsGetCollectionRequest) FieldsBundleIds(fieldsBundleIds []string) ApiBundleIdsGetCollectionRequest {
	r.fieldsBundleIds = &fieldsBundleIds
	return r
}
func (r ApiBundleIdsGetCollectionRequest) Limit(limit int32) ApiBundleIdsGetCollectionRequest {
	r.limit = &limit
	return r
}
func (r ApiBundleIdsGetCollectionRequest) Include(include []string) ApiBundleIdsGetCollectionRequest {
	r.include = &include
	return r
}
func (r ApiBundleIdsGetCollectionRequest) FieldsBundleIdCapabilities(fieldsBundleIdCapabilities []string) ApiBundleIdsGetCollectionRequest {
	r.fieldsBundleIdCapabilities = &fieldsBundleIdCapabilities
	return r
}
func (r ApiBundleIdsGetCollectionRequest) FieldsProfiles(fieldsProfiles []string) ApiBundleIdsGetCollectionRequest {
	r.fieldsProfiles = &fieldsProfiles
	return r
}
func (r ApiBundleIdsGetCollectionRequest) FieldsApps(fieldsApps []string) ApiBundleIdsGetCollectionRequest {
	r.fieldsApps = &fieldsApps
	return r
}
func (r ApiBundleIdsGetCollectionRequest) LimitBundleIdCapabilities(limitBundleIdCapabilities int32) ApiBundleIdsGetCollectionRequest {
	r.limitBundleIdCapabilities = &limitBundleIdCapabilities
	return r
}
func (r ApiBundleIdsGetCollectionRequest) LimitProfiles(limitProfiles int32) ApiBundleIdsGetCollectionRequest {
	r.limitProfiles = &limitProfiles
	return r
}

func (r ApiBundleIdsGetCollectionRequest) Execute() (BundleIdsResponse, *_nethttp.Response, error) {
	return r.ApiService.BundleIdsGetCollectionExecute(r)
}

/*
 * BundleIdsGetCollection Method for BundleIdsGetCollection
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiBundleIdsGetCollectionRequest
 */
func (a *BundleIdsApiService) BundleIdsGetCollection(ctx _context.Context) ApiBundleIdsGetCollectionRequest {
	return ApiBundleIdsGetCollectionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return BundleIdsResponse
 */
func (a *BundleIdsApiService) BundleIdsGetCollectionExecute(r ApiBundleIdsGetCollectionRequest) (BundleIdsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BundleIdsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BundleIdsApiService.BundleIdsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/bundleIds"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.filterIdentifier != nil {
		localVarQueryParams.Add("filter[identifier]", parameterToString(*r.filterIdentifier, "csv"))
	}
	if r.filterName != nil {
		localVarQueryParams.Add("filter[name]", parameterToString(*r.filterName, "csv"))
	}
	if r.filterPlatform != nil {
		localVarQueryParams.Add("filter[platform]", parameterToString(*r.filterPlatform, "csv"))
	}
	if r.filterSeedId != nil {
		localVarQueryParams.Add("filter[seedId]", parameterToString(*r.filterSeedId, "csv"))
	}
	if r.filterId != nil {
		localVarQueryParams.Add("filter[id]", parameterToString(*r.filterId, "csv"))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, "csv"))
	}
	if r.fieldsBundleIds != nil {
		localVarQueryParams.Add("fields[bundleIds]", parameterToString(*r.fieldsBundleIds, "csv"))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsBundleIdCapabilities != nil {
		localVarQueryParams.Add("fields[bundleIdCapabilities]", parameterToString(*r.fieldsBundleIdCapabilities, "csv"))
	}
	if r.fieldsProfiles != nil {
		localVarQueryParams.Add("fields[profiles]", parameterToString(*r.fieldsProfiles, "csv"))
	}
	if r.fieldsApps != nil {
		localVarQueryParams.Add("fields[apps]", parameterToString(*r.fieldsApps, "csv"))
	}
	if r.limitBundleIdCapabilities != nil {
		localVarQueryParams.Add("limit[bundleIdCapabilities]", parameterToString(*r.limitBundleIdCapabilities, ""))
	}
	if r.limitProfiles != nil {
		localVarQueryParams.Add("limit[profiles]", parameterToString(*r.limitProfiles, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBundleIdsGetInstanceRequest struct {
	ctx _context.Context
	ApiService *BundleIdsApiService
	id string
	fieldsBundleIds *[]string
	include *[]string
	fieldsBundleIdCapabilities *[]string
	fieldsProfiles *[]string
	fieldsApps *[]string
	limitBundleIdCapabilities *int32
	limitProfiles *int32
}

func (r ApiBundleIdsGetInstanceRequest) FieldsBundleIds(fieldsBundleIds []string) ApiBundleIdsGetInstanceRequest {
	r.fieldsBundleIds = &fieldsBundleIds
	return r
}
func (r ApiBundleIdsGetInstanceRequest) Include(include []string) ApiBundleIdsGetInstanceRequest {
	r.include = &include
	return r
}
func (r ApiBundleIdsGetInstanceRequest) FieldsBundleIdCapabilities(fieldsBundleIdCapabilities []string) ApiBundleIdsGetInstanceRequest {
	r.fieldsBundleIdCapabilities = &fieldsBundleIdCapabilities
	return r
}
func (r ApiBundleIdsGetInstanceRequest) FieldsProfiles(fieldsProfiles []string) ApiBundleIdsGetInstanceRequest {
	r.fieldsProfiles = &fieldsProfiles
	return r
}
func (r ApiBundleIdsGetInstanceRequest) FieldsApps(fieldsApps []string) ApiBundleIdsGetInstanceRequest {
	r.fieldsApps = &fieldsApps
	return r
}
func (r ApiBundleIdsGetInstanceRequest) LimitBundleIdCapabilities(limitBundleIdCapabilities int32) ApiBundleIdsGetInstanceRequest {
	r.limitBundleIdCapabilities = &limitBundleIdCapabilities
	return r
}
func (r ApiBundleIdsGetInstanceRequest) LimitProfiles(limitProfiles int32) ApiBundleIdsGetInstanceRequest {
	r.limitProfiles = &limitProfiles
	return r
}

func (r ApiBundleIdsGetInstanceRequest) Execute() (BundleIdResponse, *_nethttp.Response, error) {
	return r.ApiService.BundleIdsGetInstanceExecute(r)
}

/*
 * BundleIdsGetInstance Method for BundleIdsGetInstance
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiBundleIdsGetInstanceRequest
 */
func (a *BundleIdsApiService) BundleIdsGetInstance(ctx _context.Context, id string) ApiBundleIdsGetInstanceRequest {
	return ApiBundleIdsGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return BundleIdResponse
 */
func (a *BundleIdsApiService) BundleIdsGetInstanceExecute(r ApiBundleIdsGetInstanceRequest) (BundleIdResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BundleIdResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BundleIdsApiService.BundleIdsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/bundleIds/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fieldsBundleIds != nil {
		localVarQueryParams.Add("fields[bundleIds]", parameterToString(*r.fieldsBundleIds, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsBundleIdCapabilities != nil {
		localVarQueryParams.Add("fields[bundleIdCapabilities]", parameterToString(*r.fieldsBundleIdCapabilities, "csv"))
	}
	if r.fieldsProfiles != nil {
		localVarQueryParams.Add("fields[profiles]", parameterToString(*r.fieldsProfiles, "csv"))
	}
	if r.fieldsApps != nil {
		localVarQueryParams.Add("fields[apps]", parameterToString(*r.fieldsApps, "csv"))
	}
	if r.limitBundleIdCapabilities != nil {
		localVarQueryParams.Add("limit[bundleIdCapabilities]", parameterToString(*r.limitBundleIdCapabilities, ""))
	}
	if r.limitProfiles != nil {
		localVarQueryParams.Add("limit[profiles]", parameterToString(*r.limitProfiles, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBundleIdsProfilesGetToManyRelatedRequest struct {
	ctx _context.Context
	ApiService *BundleIdsApiService
	id string
	fieldsProfiles *[]string
	limit *int32
}

func (r ApiBundleIdsProfilesGetToManyRelatedRequest) FieldsProfiles(fieldsProfiles []string) ApiBundleIdsProfilesGetToManyRelatedRequest {
	r.fieldsProfiles = &fieldsProfiles
	return r
}
func (r ApiBundleIdsProfilesGetToManyRelatedRequest) Limit(limit int32) ApiBundleIdsProfilesGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

func (r ApiBundleIdsProfilesGetToManyRelatedRequest) Execute() (ProfilesResponse, *_nethttp.Response, error) {
	return r.ApiService.BundleIdsProfilesGetToManyRelatedExecute(r)
}

/*
 * BundleIdsProfilesGetToManyRelated Method for BundleIdsProfilesGetToManyRelated
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiBundleIdsProfilesGetToManyRelatedRequest
 */
func (a *BundleIdsApiService) BundleIdsProfilesGetToManyRelated(ctx _context.Context, id string) ApiBundleIdsProfilesGetToManyRelatedRequest {
	return ApiBundleIdsProfilesGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return ProfilesResponse
 */
func (a *BundleIdsApiService) BundleIdsProfilesGetToManyRelatedExecute(r ApiBundleIdsProfilesGetToManyRelatedRequest) (ProfilesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ProfilesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BundleIdsApiService.BundleIdsProfilesGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/bundleIds/{id}/profiles"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fieldsProfiles != nil {
		localVarQueryParams.Add("fields[profiles]", parameterToString(*r.fieldsProfiles, "csv"))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBundleIdsUpdateInstanceRequest struct {
	ctx _context.Context
	ApiService *BundleIdsApiService
	id string
	bundleIdUpdateRequest *BundleIdUpdateRequest
}

func (r ApiBundleIdsUpdateInstanceRequest) BundleIdUpdateRequest(bundleIdUpdateRequest BundleIdUpdateRequest) ApiBundleIdsUpdateInstanceRequest {
	r.bundleIdUpdateRequest = &bundleIdUpdateRequest
	return r
}

func (r ApiBundleIdsUpdateInstanceRequest) Execute() (BundleIdResponse, *_nethttp.Response, error) {
	return r.ApiService.BundleIdsUpdateInstanceExecute(r)
}

/*
 * BundleIdsUpdateInstance Method for BundleIdsUpdateInstance
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiBundleIdsUpdateInstanceRequest
 */
func (a *BundleIdsApiService) BundleIdsUpdateInstance(ctx _context.Context, id string) ApiBundleIdsUpdateInstanceRequest {
	return ApiBundleIdsUpdateInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return BundleIdResponse
 */
func (a *BundleIdsApiService) BundleIdsUpdateInstanceExecute(r ApiBundleIdsUpdateInstanceRequest) (BundleIdResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BundleIdResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BundleIdsApiService.BundleIdsUpdateInstance")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/bundleIds/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.bundleIdUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("bundleIdUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bundleIdUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
