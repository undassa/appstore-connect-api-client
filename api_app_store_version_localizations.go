/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// AppStoreVersionLocalizationsApiService AppStoreVersionLocalizationsApi service
type AppStoreVersionLocalizationsApiService service

type ApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest struct {
	ctx _context.Context
	ApiService *AppStoreVersionLocalizationsApiService
	id string
	filterPreviewType *[]string
	fieldsAppStoreVersionLocalizations *[]string
	fieldsAppPreviews *[]string
	fieldsAppPreviewSets *[]string
	limit *int32
	include *[]string
}

func (r ApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest) FilterPreviewType(filterPreviewType []string) ApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.filterPreviewType = &filterPreviewType
	return r
}
func (r ApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest) FieldsAppStoreVersionLocalizations(fieldsAppStoreVersionLocalizations []string) ApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.fieldsAppStoreVersionLocalizations = &fieldsAppStoreVersionLocalizations
	return r
}
func (r ApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest) FieldsAppPreviews(fieldsAppPreviews []string) ApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.fieldsAppPreviews = &fieldsAppPreviews
	return r
}
func (r ApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest) FieldsAppPreviewSets(fieldsAppPreviewSets []string) ApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.fieldsAppPreviewSets = &fieldsAppPreviewSets
	return r
}
func (r ApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest) Limit(limit int32) ApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}
func (r ApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest) Include(include []string) ApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r ApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest) Execute() (AppPreviewSetsResponse, *_nethttp.Response, error) {
	return r.ApiService.AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedExecute(r)
}

/*
 * AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelated Method for AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelated
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest
 */
func (a *AppStoreVersionLocalizationsApiService) AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelated(ctx _context.Context, id string) ApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	return ApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return AppPreviewSetsResponse
 */
func (a *AppStoreVersionLocalizationsApiService) AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedExecute(r ApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest) (AppPreviewSetsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AppPreviewSetsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionLocalizationsApiService.AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersionLocalizations/{id}/appPreviewSets"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.filterPreviewType != nil {
		localVarQueryParams.Add("filter[previewType]", parameterToString(*r.filterPreviewType, "csv"))
	}
	if r.fieldsAppStoreVersionLocalizations != nil {
		localVarQueryParams.Add("fields[appStoreVersionLocalizations]", parameterToString(*r.fieldsAppStoreVersionLocalizations, "csv"))
	}
	if r.fieldsAppPreviews != nil {
		localVarQueryParams.Add("fields[appPreviews]", parameterToString(*r.fieldsAppPreviews, "csv"))
	}
	if r.fieldsAppPreviewSets != nil {
		localVarQueryParams.Add("fields[appPreviewSets]", parameterToString(*r.fieldsAppPreviewSets, "csv"))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest struct {
	ctx _context.Context
	ApiService *AppStoreVersionLocalizationsApiService
	id string
	filterScreenshotDisplayType *[]string
	fieldsAppStoreVersionLocalizations *[]string
	fieldsAppScreenshotSets *[]string
	fieldsAppScreenshots *[]string
	limit *int32
	include *[]string
}

func (r ApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest) FilterScreenshotDisplayType(filterScreenshotDisplayType []string) ApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.filterScreenshotDisplayType = &filterScreenshotDisplayType
	return r
}
func (r ApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest) FieldsAppStoreVersionLocalizations(fieldsAppStoreVersionLocalizations []string) ApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.fieldsAppStoreVersionLocalizations = &fieldsAppStoreVersionLocalizations
	return r
}
func (r ApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest) FieldsAppScreenshotSets(fieldsAppScreenshotSets []string) ApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.fieldsAppScreenshotSets = &fieldsAppScreenshotSets
	return r
}
func (r ApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest) FieldsAppScreenshots(fieldsAppScreenshots []string) ApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.fieldsAppScreenshots = &fieldsAppScreenshots
	return r
}
func (r ApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest) Limit(limit int32) ApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}
func (r ApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest) Include(include []string) ApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r ApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest) Execute() (AppScreenshotSetsResponse, *_nethttp.Response, error) {
	return r.ApiService.AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedExecute(r)
}

/*
 * AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelated Method for AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelated
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest
 */
func (a *AppStoreVersionLocalizationsApiService) AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelated(ctx _context.Context, id string) ApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	return ApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return AppScreenshotSetsResponse
 */
func (a *AppStoreVersionLocalizationsApiService) AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedExecute(r ApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest) (AppScreenshotSetsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AppScreenshotSetsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionLocalizationsApiService.AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersionLocalizations/{id}/appScreenshotSets"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.filterScreenshotDisplayType != nil {
		localVarQueryParams.Add("filter[screenshotDisplayType]", parameterToString(*r.filterScreenshotDisplayType, "csv"))
	}
	if r.fieldsAppStoreVersionLocalizations != nil {
		localVarQueryParams.Add("fields[appStoreVersionLocalizations]", parameterToString(*r.fieldsAppStoreVersionLocalizations, "csv"))
	}
	if r.fieldsAppScreenshotSets != nil {
		localVarQueryParams.Add("fields[appScreenshotSets]", parameterToString(*r.fieldsAppScreenshotSets, "csv"))
	}
	if r.fieldsAppScreenshots != nil {
		localVarQueryParams.Add("fields[appScreenshots]", parameterToString(*r.fieldsAppScreenshots, "csv"))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppStoreVersionLocalizationsCreateInstanceRequest struct {
	ctx _context.Context
	ApiService *AppStoreVersionLocalizationsApiService
	appStoreVersionLocalizationCreateRequest *AppStoreVersionLocalizationCreateRequest
}

func (r ApiAppStoreVersionLocalizationsCreateInstanceRequest) AppStoreVersionLocalizationCreateRequest(appStoreVersionLocalizationCreateRequest AppStoreVersionLocalizationCreateRequest) ApiAppStoreVersionLocalizationsCreateInstanceRequest {
	r.appStoreVersionLocalizationCreateRequest = &appStoreVersionLocalizationCreateRequest
	return r
}

func (r ApiAppStoreVersionLocalizationsCreateInstanceRequest) Execute() (AppStoreVersionLocalizationResponse, *_nethttp.Response, error) {
	return r.ApiService.AppStoreVersionLocalizationsCreateInstanceExecute(r)
}

/*
 * AppStoreVersionLocalizationsCreateInstance Method for AppStoreVersionLocalizationsCreateInstance
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiAppStoreVersionLocalizationsCreateInstanceRequest
 */
func (a *AppStoreVersionLocalizationsApiService) AppStoreVersionLocalizationsCreateInstance(ctx _context.Context) ApiAppStoreVersionLocalizationsCreateInstanceRequest {
	return ApiAppStoreVersionLocalizationsCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return AppStoreVersionLocalizationResponse
 */
func (a *AppStoreVersionLocalizationsApiService) AppStoreVersionLocalizationsCreateInstanceExecute(r ApiAppStoreVersionLocalizationsCreateInstanceRequest) (AppStoreVersionLocalizationResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AppStoreVersionLocalizationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionLocalizationsApiService.AppStoreVersionLocalizationsCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersionLocalizations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.appStoreVersionLocalizationCreateRequest == nil {
		return localVarReturnValue, nil, reportError("appStoreVersionLocalizationCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appStoreVersionLocalizationCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppStoreVersionLocalizationsDeleteInstanceRequest struct {
	ctx _context.Context
	ApiService *AppStoreVersionLocalizationsApiService
	id string
}


func (r ApiAppStoreVersionLocalizationsDeleteInstanceRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AppStoreVersionLocalizationsDeleteInstanceExecute(r)
}

/*
 * AppStoreVersionLocalizationsDeleteInstance Method for AppStoreVersionLocalizationsDeleteInstance
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiAppStoreVersionLocalizationsDeleteInstanceRequest
 */
func (a *AppStoreVersionLocalizationsApiService) AppStoreVersionLocalizationsDeleteInstance(ctx _context.Context, id string) ApiAppStoreVersionLocalizationsDeleteInstanceRequest {
	return ApiAppStoreVersionLocalizationsDeleteInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *AppStoreVersionLocalizationsApiService) AppStoreVersionLocalizationsDeleteInstanceExecute(r ApiAppStoreVersionLocalizationsDeleteInstanceRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionLocalizationsApiService.AppStoreVersionLocalizationsDeleteInstance")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersionLocalizations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAppStoreVersionLocalizationsGetInstanceRequest struct {
	ctx _context.Context
	ApiService *AppStoreVersionLocalizationsApiService
	id string
	fieldsAppStoreVersionLocalizations *[]string
	include *[]string
	fieldsAppScreenshotSets *[]string
	fieldsAppPreviewSets *[]string
	limitAppPreviewSets *int32
	limitAppScreenshotSets *int32
}

func (r ApiAppStoreVersionLocalizationsGetInstanceRequest) FieldsAppStoreVersionLocalizations(fieldsAppStoreVersionLocalizations []string) ApiAppStoreVersionLocalizationsGetInstanceRequest {
	r.fieldsAppStoreVersionLocalizations = &fieldsAppStoreVersionLocalizations
	return r
}
func (r ApiAppStoreVersionLocalizationsGetInstanceRequest) Include(include []string) ApiAppStoreVersionLocalizationsGetInstanceRequest {
	r.include = &include
	return r
}
func (r ApiAppStoreVersionLocalizationsGetInstanceRequest) FieldsAppScreenshotSets(fieldsAppScreenshotSets []string) ApiAppStoreVersionLocalizationsGetInstanceRequest {
	r.fieldsAppScreenshotSets = &fieldsAppScreenshotSets
	return r
}
func (r ApiAppStoreVersionLocalizationsGetInstanceRequest) FieldsAppPreviewSets(fieldsAppPreviewSets []string) ApiAppStoreVersionLocalizationsGetInstanceRequest {
	r.fieldsAppPreviewSets = &fieldsAppPreviewSets
	return r
}
func (r ApiAppStoreVersionLocalizationsGetInstanceRequest) LimitAppPreviewSets(limitAppPreviewSets int32) ApiAppStoreVersionLocalizationsGetInstanceRequest {
	r.limitAppPreviewSets = &limitAppPreviewSets
	return r
}
func (r ApiAppStoreVersionLocalizationsGetInstanceRequest) LimitAppScreenshotSets(limitAppScreenshotSets int32) ApiAppStoreVersionLocalizationsGetInstanceRequest {
	r.limitAppScreenshotSets = &limitAppScreenshotSets
	return r
}

func (r ApiAppStoreVersionLocalizationsGetInstanceRequest) Execute() (AppStoreVersionLocalizationResponse, *_nethttp.Response, error) {
	return r.ApiService.AppStoreVersionLocalizationsGetInstanceExecute(r)
}

/*
 * AppStoreVersionLocalizationsGetInstance Method for AppStoreVersionLocalizationsGetInstance
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiAppStoreVersionLocalizationsGetInstanceRequest
 */
func (a *AppStoreVersionLocalizationsApiService) AppStoreVersionLocalizationsGetInstance(ctx _context.Context, id string) ApiAppStoreVersionLocalizationsGetInstanceRequest {
	return ApiAppStoreVersionLocalizationsGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return AppStoreVersionLocalizationResponse
 */
func (a *AppStoreVersionLocalizationsApiService) AppStoreVersionLocalizationsGetInstanceExecute(r ApiAppStoreVersionLocalizationsGetInstanceRequest) (AppStoreVersionLocalizationResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AppStoreVersionLocalizationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionLocalizationsApiService.AppStoreVersionLocalizationsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersionLocalizations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fieldsAppStoreVersionLocalizations != nil {
		localVarQueryParams.Add("fields[appStoreVersionLocalizations]", parameterToString(*r.fieldsAppStoreVersionLocalizations, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsAppScreenshotSets != nil {
		localVarQueryParams.Add("fields[appScreenshotSets]", parameterToString(*r.fieldsAppScreenshotSets, "csv"))
	}
	if r.fieldsAppPreviewSets != nil {
		localVarQueryParams.Add("fields[appPreviewSets]", parameterToString(*r.fieldsAppPreviewSets, "csv"))
	}
	if r.limitAppPreviewSets != nil {
		localVarQueryParams.Add("limit[appPreviewSets]", parameterToString(*r.limitAppPreviewSets, ""))
	}
	if r.limitAppScreenshotSets != nil {
		localVarQueryParams.Add("limit[appScreenshotSets]", parameterToString(*r.limitAppScreenshotSets, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppStoreVersionLocalizationsUpdateInstanceRequest struct {
	ctx _context.Context
	ApiService *AppStoreVersionLocalizationsApiService
	id string
	appStoreVersionLocalizationUpdateRequest *AppStoreVersionLocalizationUpdateRequest
}

func (r ApiAppStoreVersionLocalizationsUpdateInstanceRequest) AppStoreVersionLocalizationUpdateRequest(appStoreVersionLocalizationUpdateRequest AppStoreVersionLocalizationUpdateRequest) ApiAppStoreVersionLocalizationsUpdateInstanceRequest {
	r.appStoreVersionLocalizationUpdateRequest = &appStoreVersionLocalizationUpdateRequest
	return r
}

func (r ApiAppStoreVersionLocalizationsUpdateInstanceRequest) Execute() (AppStoreVersionLocalizationResponse, *_nethttp.Response, error) {
	return r.ApiService.AppStoreVersionLocalizationsUpdateInstanceExecute(r)
}

/*
 * AppStoreVersionLocalizationsUpdateInstance Method for AppStoreVersionLocalizationsUpdateInstance
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiAppStoreVersionLocalizationsUpdateInstanceRequest
 */
func (a *AppStoreVersionLocalizationsApiService) AppStoreVersionLocalizationsUpdateInstance(ctx _context.Context, id string) ApiAppStoreVersionLocalizationsUpdateInstanceRequest {
	return ApiAppStoreVersionLocalizationsUpdateInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return AppStoreVersionLocalizationResponse
 */
func (a *AppStoreVersionLocalizationsApiService) AppStoreVersionLocalizationsUpdateInstanceExecute(r ApiAppStoreVersionLocalizationsUpdateInstanceRequest) (AppStoreVersionLocalizationResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AppStoreVersionLocalizationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionLocalizationsApiService.AppStoreVersionLocalizationsUpdateInstance")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersionLocalizations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.appStoreVersionLocalizationUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("appStoreVersionLocalizationUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appStoreVersionLocalizationUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
