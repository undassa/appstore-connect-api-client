/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect

import (
	"encoding/json"
)

// UploadOperationHeader struct for UploadOperationHeader
type UploadOperationHeader struct {
	Name *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UploadOperationHeader UploadOperationHeader

// NewUploadOperationHeader instantiates a new UploadOperationHeader object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadOperationHeader() *UploadOperationHeader {
	this := UploadOperationHeader{}
	return &this
}

// NewUploadOperationHeaderWithDefaults instantiates a new UploadOperationHeader object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadOperationHeaderWithDefaults() *UploadOperationHeader {
	this := UploadOperationHeader{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UploadOperationHeader) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadOperationHeader) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UploadOperationHeader) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UploadOperationHeader) SetName(v string) {
	o.Name = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *UploadOperationHeader) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadOperationHeader) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *UploadOperationHeader) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *UploadOperationHeader) SetValue(v string) {
	o.Value = &v
}

func (o UploadOperationHeader) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *UploadOperationHeader) UnmarshalJSON(bytes []byte) (err error) {
	varUploadOperationHeader := _UploadOperationHeader{}

	if err = json.Unmarshal(bytes, &varUploadOperationHeader); err == nil {
		*o = UploadOperationHeader(varUploadOperationHeader)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUploadOperationHeader struct {
	value *UploadOperationHeader
	isSet bool
}

func (v NullableUploadOperationHeader) Get() *UploadOperationHeader {
	return v.value
}

func (v *NullableUploadOperationHeader) Set(val *UploadOperationHeader) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadOperationHeader) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadOperationHeader) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadOperationHeader(val *UploadOperationHeader) *NullableUploadOperationHeader {
	return &NullableUploadOperationHeader{value: val, isSet: true}
}

func (v NullableUploadOperationHeader) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadOperationHeader) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


