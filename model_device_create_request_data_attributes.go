/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect

import (
	"encoding/json"
)

// DeviceCreateRequestDataAttributes struct for DeviceCreateRequestDataAttributes
type DeviceCreateRequestDataAttributes struct {
	Name string `json:"name"`
	Platform BundleIdPlatform `json:"platform"`
	Udid string `json:"udid"`
	AdditionalProperties map[string]interface{}
}

type _DeviceCreateRequestDataAttributes DeviceCreateRequestDataAttributes

// NewDeviceCreateRequestDataAttributes instantiates a new DeviceCreateRequestDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceCreateRequestDataAttributes(name string, platform BundleIdPlatform, udid string, ) *DeviceCreateRequestDataAttributes {
	this := DeviceCreateRequestDataAttributes{}
	this.Name = name
	this.Platform = platform
	this.Udid = udid
	return &this
}

// NewDeviceCreateRequestDataAttributesWithDefaults instantiates a new DeviceCreateRequestDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceCreateRequestDataAttributesWithDefaults() *DeviceCreateRequestDataAttributes {
	this := DeviceCreateRequestDataAttributes{}
	return &this
}

// GetName returns the Name field value
func (o *DeviceCreateRequestDataAttributes) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DeviceCreateRequestDataAttributes) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DeviceCreateRequestDataAttributes) SetName(v string) {
	o.Name = v
}

// GetPlatform returns the Platform field value
func (o *DeviceCreateRequestDataAttributes) GetPlatform() BundleIdPlatform {
	if o == nil  {
		var ret BundleIdPlatform
		return ret
	}

	return o.Platform
}

// GetPlatformOk returns a tuple with the Platform field value
// and a boolean to check if the value has been set.
func (o *DeviceCreateRequestDataAttributes) GetPlatformOk() (*BundleIdPlatform, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Platform, true
}

// SetPlatform sets field value
func (o *DeviceCreateRequestDataAttributes) SetPlatform(v BundleIdPlatform) {
	o.Platform = v
}

// GetUdid returns the Udid field value
func (o *DeviceCreateRequestDataAttributes) GetUdid() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Udid
}

// GetUdidOk returns a tuple with the Udid field value
// and a boolean to check if the value has been set.
func (o *DeviceCreateRequestDataAttributes) GetUdidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Udid, true
}

// SetUdid sets field value
func (o *DeviceCreateRequestDataAttributes) SetUdid(v string) {
	o.Udid = v
}

func (o DeviceCreateRequestDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["platform"] = o.Platform
	}
	if true {
		toSerialize["udid"] = o.Udid
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *DeviceCreateRequestDataAttributes) UnmarshalJSON(bytes []byte) (err error) {
	varDeviceCreateRequestDataAttributes := _DeviceCreateRequestDataAttributes{}

	if err = json.Unmarshal(bytes, &varDeviceCreateRequestDataAttributes); err == nil {
		*o = DeviceCreateRequestDataAttributes(varDeviceCreateRequestDataAttributes)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "platform")
		delete(additionalProperties, "udid")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeviceCreateRequestDataAttributes struct {
	value *DeviceCreateRequestDataAttributes
	isSet bool
}

func (v NullableDeviceCreateRequestDataAttributes) Get() *DeviceCreateRequestDataAttributes {
	return v.value
}

func (v *NullableDeviceCreateRequestDataAttributes) Set(val *DeviceCreateRequestDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceCreateRequestDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceCreateRequestDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceCreateRequestDataAttributes(val *DeviceCreateRequestDataAttributes) *NullableDeviceCreateRequestDataAttributes {
	return &NullableDeviceCreateRequestDataAttributes{value: val, isSet: true}
}

func (v NullableDeviceCreateRequestDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceCreateRequestDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


