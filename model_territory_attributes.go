/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect

import (
	"encoding/json"
)

// TerritoryAttributes struct for TerritoryAttributes
type TerritoryAttributes struct {
	Currency *string `json:"currency,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TerritoryAttributes TerritoryAttributes

// NewTerritoryAttributes instantiates a new TerritoryAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTerritoryAttributes() *TerritoryAttributes {
	this := TerritoryAttributes{}
	return &this
}

// NewTerritoryAttributesWithDefaults instantiates a new TerritoryAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTerritoryAttributesWithDefaults() *TerritoryAttributes {
	this := TerritoryAttributes{}
	return &this
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *TerritoryAttributes) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerritoryAttributes) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *TerritoryAttributes) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *TerritoryAttributes) SetCurrency(v string) {
	o.Currency = &v
}

func (o TerritoryAttributes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *TerritoryAttributes) UnmarshalJSON(bytes []byte) (err error) {
	varTerritoryAttributes := _TerritoryAttributes{}

	if err = json.Unmarshal(bytes, &varTerritoryAttributes); err == nil {
		*o = TerritoryAttributes(varTerritoryAttributes)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "currency")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTerritoryAttributes struct {
	value *TerritoryAttributes
	isSet bool
}

func (v NullableTerritoryAttributes) Get() *TerritoryAttributes {
	return v.value
}

func (v *NullableTerritoryAttributes) Set(val *TerritoryAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableTerritoryAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableTerritoryAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTerritoryAttributes(val *TerritoryAttributes) *NullableTerritoryAttributes {
	return &NullableTerritoryAttributes{value: val, isSet: true}
}

func (v NullableTerritoryAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTerritoryAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


