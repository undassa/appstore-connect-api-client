/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect

import (
	"encoding/json"
)

// ProfileRelationships struct for ProfileRelationships
type ProfileRelationships struct {
	BundleId *ProfileRelationshipsBundleId `json:"bundleId,omitempty"`
	Devices *ProfileRelationshipsDevices `json:"devices,omitempty"`
	Certificates *ProfileRelationshipsCertificates `json:"certificates,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProfileRelationships ProfileRelationships

// NewProfileRelationships instantiates a new ProfileRelationships object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProfileRelationships() *ProfileRelationships {
	this := ProfileRelationships{}
	return &this
}

// NewProfileRelationshipsWithDefaults instantiates a new ProfileRelationships object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProfileRelationshipsWithDefaults() *ProfileRelationships {
	this := ProfileRelationships{}
	return &this
}

// GetBundleId returns the BundleId field value if set, zero value otherwise.
func (o *ProfileRelationships) GetBundleId() ProfileRelationshipsBundleId {
	if o == nil || o.BundleId == nil {
		var ret ProfileRelationshipsBundleId
		return ret
	}
	return *o.BundleId
}

// GetBundleIdOk returns a tuple with the BundleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileRelationships) GetBundleIdOk() (*ProfileRelationshipsBundleId, bool) {
	if o == nil || o.BundleId == nil {
		return nil, false
	}
	return o.BundleId, true
}

// HasBundleId returns a boolean if a field has been set.
func (o *ProfileRelationships) HasBundleId() bool {
	if o != nil && o.BundleId != nil {
		return true
	}

	return false
}

// SetBundleId gets a reference to the given ProfileRelationshipsBundleId and assigns it to the BundleId field.
func (o *ProfileRelationships) SetBundleId(v ProfileRelationshipsBundleId) {
	o.BundleId = &v
}

// GetDevices returns the Devices field value if set, zero value otherwise.
func (o *ProfileRelationships) GetDevices() ProfileRelationshipsDevices {
	if o == nil || o.Devices == nil {
		var ret ProfileRelationshipsDevices
		return ret
	}
	return *o.Devices
}

// GetDevicesOk returns a tuple with the Devices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileRelationships) GetDevicesOk() (*ProfileRelationshipsDevices, bool) {
	if o == nil || o.Devices == nil {
		return nil, false
	}
	return o.Devices, true
}

// HasDevices returns a boolean if a field has been set.
func (o *ProfileRelationships) HasDevices() bool {
	if o != nil && o.Devices != nil {
		return true
	}

	return false
}

// SetDevices gets a reference to the given ProfileRelationshipsDevices and assigns it to the Devices field.
func (o *ProfileRelationships) SetDevices(v ProfileRelationshipsDevices) {
	o.Devices = &v
}

// GetCertificates returns the Certificates field value if set, zero value otherwise.
func (o *ProfileRelationships) GetCertificates() ProfileRelationshipsCertificates {
	if o == nil || o.Certificates == nil {
		var ret ProfileRelationshipsCertificates
		return ret
	}
	return *o.Certificates
}

// GetCertificatesOk returns a tuple with the Certificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileRelationships) GetCertificatesOk() (*ProfileRelationshipsCertificates, bool) {
	if o == nil || o.Certificates == nil {
		return nil, false
	}
	return o.Certificates, true
}

// HasCertificates returns a boolean if a field has been set.
func (o *ProfileRelationships) HasCertificates() bool {
	if o != nil && o.Certificates != nil {
		return true
	}

	return false
}

// SetCertificates gets a reference to the given ProfileRelationshipsCertificates and assigns it to the Certificates field.
func (o *ProfileRelationships) SetCertificates(v ProfileRelationshipsCertificates) {
	o.Certificates = &v
}

func (o ProfileRelationships) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BundleId != nil {
		toSerialize["bundleId"] = o.BundleId
	}
	if o.Devices != nil {
		toSerialize["devices"] = o.Devices
	}
	if o.Certificates != nil {
		toSerialize["certificates"] = o.Certificates
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ProfileRelationships) UnmarshalJSON(bytes []byte) (err error) {
	varProfileRelationships := _ProfileRelationships{}

	if err = json.Unmarshal(bytes, &varProfileRelationships); err == nil {
		*o = ProfileRelationships(varProfileRelationships)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "bundleId")
		delete(additionalProperties, "devices")
		delete(additionalProperties, "certificates")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProfileRelationships struct {
	value *ProfileRelationships
	isSet bool
}

func (v NullableProfileRelationships) Get() *ProfileRelationships {
	return v.value
}

func (v *NullableProfileRelationships) Set(val *ProfileRelationships) {
	v.value = val
	v.isSet = true
}

func (v NullableProfileRelationships) IsSet() bool {
	return v.isSet
}

func (v *NullableProfileRelationships) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfileRelationships(val *ProfileRelationships) *NullableProfileRelationships {
	return &NullableProfileRelationships{value: val, isSet: true}
}

func (v NullableProfileRelationships) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfileRelationships) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


