/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// AppPreviewSetsApiService AppPreviewSetsApi service
type AppPreviewSetsApiService service

type ApiAppPreviewSetsAppPreviewsGetToManyRelatedRequest struct {
	ctx _context.Context
	ApiService *AppPreviewSetsApiService
	id string
	fieldsAppPreviews *[]string
	fieldsAppPreviewSets *[]string
	limit *int32
	include *[]string
}

func (r ApiAppPreviewSetsAppPreviewsGetToManyRelatedRequest) FieldsAppPreviews(fieldsAppPreviews []string) ApiAppPreviewSetsAppPreviewsGetToManyRelatedRequest {
	r.fieldsAppPreviews = &fieldsAppPreviews
	return r
}
func (r ApiAppPreviewSetsAppPreviewsGetToManyRelatedRequest) FieldsAppPreviewSets(fieldsAppPreviewSets []string) ApiAppPreviewSetsAppPreviewsGetToManyRelatedRequest {
	r.fieldsAppPreviewSets = &fieldsAppPreviewSets
	return r
}
func (r ApiAppPreviewSetsAppPreviewsGetToManyRelatedRequest) Limit(limit int32) ApiAppPreviewSetsAppPreviewsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}
func (r ApiAppPreviewSetsAppPreviewsGetToManyRelatedRequest) Include(include []string) ApiAppPreviewSetsAppPreviewsGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r ApiAppPreviewSetsAppPreviewsGetToManyRelatedRequest) Execute() (AppPreviewsResponse, *_nethttp.Response, error) {
	return r.ApiService.AppPreviewSetsAppPreviewsGetToManyRelatedExecute(r)
}

/*
 * AppPreviewSetsAppPreviewsGetToManyRelated Method for AppPreviewSetsAppPreviewsGetToManyRelated
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiAppPreviewSetsAppPreviewsGetToManyRelatedRequest
 */
func (a *AppPreviewSetsApiService) AppPreviewSetsAppPreviewsGetToManyRelated(ctx _context.Context, id string) ApiAppPreviewSetsAppPreviewsGetToManyRelatedRequest {
	return ApiAppPreviewSetsAppPreviewsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return AppPreviewsResponse
 */
func (a *AppPreviewSetsApiService) AppPreviewSetsAppPreviewsGetToManyRelatedExecute(r ApiAppPreviewSetsAppPreviewsGetToManyRelatedRequest) (AppPreviewsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AppPreviewsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppPreviewSetsApiService.AppPreviewSetsAppPreviewsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appPreviewSets/{id}/appPreviews"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fieldsAppPreviews != nil {
		localVarQueryParams.Add("fields[appPreviews]", parameterToString(*r.fieldsAppPreviews, "csv"))
	}
	if r.fieldsAppPreviewSets != nil {
		localVarQueryParams.Add("fields[appPreviewSets]", parameterToString(*r.fieldsAppPreviewSets, "csv"))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppPreviewSetsAppPreviewsGetToManyRelationshipRequest struct {
	ctx _context.Context
	ApiService *AppPreviewSetsApiService
	id string
	limit *int32
}

func (r ApiAppPreviewSetsAppPreviewsGetToManyRelationshipRequest) Limit(limit int32) ApiAppPreviewSetsAppPreviewsGetToManyRelationshipRequest {
	r.limit = &limit
	return r
}

func (r ApiAppPreviewSetsAppPreviewsGetToManyRelationshipRequest) Execute() (AppPreviewSetAppPreviewsLinkagesResponse, *_nethttp.Response, error) {
	return r.ApiService.AppPreviewSetsAppPreviewsGetToManyRelationshipExecute(r)
}

/*
 * AppPreviewSetsAppPreviewsGetToManyRelationship Method for AppPreviewSetsAppPreviewsGetToManyRelationship
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiAppPreviewSetsAppPreviewsGetToManyRelationshipRequest
 */
func (a *AppPreviewSetsApiService) AppPreviewSetsAppPreviewsGetToManyRelationship(ctx _context.Context, id string) ApiAppPreviewSetsAppPreviewsGetToManyRelationshipRequest {
	return ApiAppPreviewSetsAppPreviewsGetToManyRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return AppPreviewSetAppPreviewsLinkagesResponse
 */
func (a *AppPreviewSetsApiService) AppPreviewSetsAppPreviewsGetToManyRelationshipExecute(r ApiAppPreviewSetsAppPreviewsGetToManyRelationshipRequest) (AppPreviewSetAppPreviewsLinkagesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AppPreviewSetAppPreviewsLinkagesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppPreviewSetsApiService.AppPreviewSetsAppPreviewsGetToManyRelationship")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appPreviewSets/{id}/relationships/appPreviews"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppPreviewSetsAppPreviewsReplaceToManyRelationshipRequest struct {
	ctx _context.Context
	ApiService *AppPreviewSetsApiService
	id string
	appPreviewSetAppPreviewsLinkagesRequest *AppPreviewSetAppPreviewsLinkagesRequest
}

func (r ApiAppPreviewSetsAppPreviewsReplaceToManyRelationshipRequest) AppPreviewSetAppPreviewsLinkagesRequest(appPreviewSetAppPreviewsLinkagesRequest AppPreviewSetAppPreviewsLinkagesRequest) ApiAppPreviewSetsAppPreviewsReplaceToManyRelationshipRequest {
	r.appPreviewSetAppPreviewsLinkagesRequest = &appPreviewSetAppPreviewsLinkagesRequest
	return r
}

func (r ApiAppPreviewSetsAppPreviewsReplaceToManyRelationshipRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AppPreviewSetsAppPreviewsReplaceToManyRelationshipExecute(r)
}

/*
 * AppPreviewSetsAppPreviewsReplaceToManyRelationship Method for AppPreviewSetsAppPreviewsReplaceToManyRelationship
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiAppPreviewSetsAppPreviewsReplaceToManyRelationshipRequest
 */
func (a *AppPreviewSetsApiService) AppPreviewSetsAppPreviewsReplaceToManyRelationship(ctx _context.Context, id string) ApiAppPreviewSetsAppPreviewsReplaceToManyRelationshipRequest {
	return ApiAppPreviewSetsAppPreviewsReplaceToManyRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *AppPreviewSetsApiService) AppPreviewSetsAppPreviewsReplaceToManyRelationshipExecute(r ApiAppPreviewSetsAppPreviewsReplaceToManyRelationshipRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppPreviewSetsApiService.AppPreviewSetsAppPreviewsReplaceToManyRelationship")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appPreviewSets/{id}/relationships/appPreviews"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.appPreviewSetAppPreviewsLinkagesRequest == nil {
		return nil, reportError("appPreviewSetAppPreviewsLinkagesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appPreviewSetAppPreviewsLinkagesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAppPreviewSetsCreateInstanceRequest struct {
	ctx _context.Context
	ApiService *AppPreviewSetsApiService
	appPreviewSetCreateRequest *AppPreviewSetCreateRequest
}

func (r ApiAppPreviewSetsCreateInstanceRequest) AppPreviewSetCreateRequest(appPreviewSetCreateRequest AppPreviewSetCreateRequest) ApiAppPreviewSetsCreateInstanceRequest {
	r.appPreviewSetCreateRequest = &appPreviewSetCreateRequest
	return r
}

func (r ApiAppPreviewSetsCreateInstanceRequest) Execute() (AppPreviewSetResponse, *_nethttp.Response, error) {
	return r.ApiService.AppPreviewSetsCreateInstanceExecute(r)
}

/*
 * AppPreviewSetsCreateInstance Method for AppPreviewSetsCreateInstance
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiAppPreviewSetsCreateInstanceRequest
 */
func (a *AppPreviewSetsApiService) AppPreviewSetsCreateInstance(ctx _context.Context) ApiAppPreviewSetsCreateInstanceRequest {
	return ApiAppPreviewSetsCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return AppPreviewSetResponse
 */
func (a *AppPreviewSetsApiService) AppPreviewSetsCreateInstanceExecute(r ApiAppPreviewSetsCreateInstanceRequest) (AppPreviewSetResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AppPreviewSetResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppPreviewSetsApiService.AppPreviewSetsCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appPreviewSets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.appPreviewSetCreateRequest == nil {
		return localVarReturnValue, nil, reportError("appPreviewSetCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appPreviewSetCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppPreviewSetsDeleteInstanceRequest struct {
	ctx _context.Context
	ApiService *AppPreviewSetsApiService
	id string
}


func (r ApiAppPreviewSetsDeleteInstanceRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AppPreviewSetsDeleteInstanceExecute(r)
}

/*
 * AppPreviewSetsDeleteInstance Method for AppPreviewSetsDeleteInstance
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiAppPreviewSetsDeleteInstanceRequest
 */
func (a *AppPreviewSetsApiService) AppPreviewSetsDeleteInstance(ctx _context.Context, id string) ApiAppPreviewSetsDeleteInstanceRequest {
	return ApiAppPreviewSetsDeleteInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *AppPreviewSetsApiService) AppPreviewSetsDeleteInstanceExecute(r ApiAppPreviewSetsDeleteInstanceRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppPreviewSetsApiService.AppPreviewSetsDeleteInstance")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appPreviewSets/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAppPreviewSetsGetInstanceRequest struct {
	ctx _context.Context
	ApiService *AppPreviewSetsApiService
	id string
	fieldsAppPreviewSets *[]string
	include *[]string
	fieldsAppPreviews *[]string
	limitAppPreviews *int32
}

func (r ApiAppPreviewSetsGetInstanceRequest) FieldsAppPreviewSets(fieldsAppPreviewSets []string) ApiAppPreviewSetsGetInstanceRequest {
	r.fieldsAppPreviewSets = &fieldsAppPreviewSets
	return r
}
func (r ApiAppPreviewSetsGetInstanceRequest) Include(include []string) ApiAppPreviewSetsGetInstanceRequest {
	r.include = &include
	return r
}
func (r ApiAppPreviewSetsGetInstanceRequest) FieldsAppPreviews(fieldsAppPreviews []string) ApiAppPreviewSetsGetInstanceRequest {
	r.fieldsAppPreviews = &fieldsAppPreviews
	return r
}
func (r ApiAppPreviewSetsGetInstanceRequest) LimitAppPreviews(limitAppPreviews int32) ApiAppPreviewSetsGetInstanceRequest {
	r.limitAppPreviews = &limitAppPreviews
	return r
}

func (r ApiAppPreviewSetsGetInstanceRequest) Execute() (AppPreviewSetResponse, *_nethttp.Response, error) {
	return r.ApiService.AppPreviewSetsGetInstanceExecute(r)
}

/*
 * AppPreviewSetsGetInstance Method for AppPreviewSetsGetInstance
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id the id of the requested resource
 * @return ApiAppPreviewSetsGetInstanceRequest
 */
func (a *AppPreviewSetsApiService) AppPreviewSetsGetInstance(ctx _context.Context, id string) ApiAppPreviewSetsGetInstanceRequest {
	return ApiAppPreviewSetsGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return AppPreviewSetResponse
 */
func (a *AppPreviewSetsApiService) AppPreviewSetsGetInstanceExecute(r ApiAppPreviewSetsGetInstanceRequest) (AppPreviewSetResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AppPreviewSetResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppPreviewSetsApiService.AppPreviewSetsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appPreviewSets/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.fieldsAppPreviewSets != nil {
		localVarQueryParams.Add("fields[appPreviewSets]", parameterToString(*r.fieldsAppPreviewSets, "csv"))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, "csv"))
	}
	if r.fieldsAppPreviews != nil {
		localVarQueryParams.Add("fields[appPreviews]", parameterToString(*r.fieldsAppPreviews, "csv"))
	}
	if r.limitAppPreviews != nil {
		localVarQueryParams.Add("limit[appPreviews]", parameterToString(*r.limitAppPreviews, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
